// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Request.proto

#ifndef PROTOBUF_Request_2eproto__INCLUDED
#define PROTOBUF_Request_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonTypes.pb.h"
#include "ResponsePrim.pb.h"
// @@protoc_insertion_point(includes)

namespace MicroWireless {
namespace OneM2M {
namespace pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Request_2eproto();
void protobuf_AssignDesc_Request_2eproto();
void protobuf_ShutdownFile_Request_2eproto();

class Request;

// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  inline Request* New() const { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MicroWireless.OneM2M.pb.CommonTypes.Operation op = 1;
  void clear_op();
  static const int kOpFieldNumber = 1;
  ::MicroWireless::OneM2M::pb::CommonTypes_Operation op() const;
  void set_op(::MicroWireless::OneM2M::pb::CommonTypes_Operation value);

  // optional string tg = 2;
  void clear_tg();
  static const int kTgFieldNumber = 2;
  const ::std::string& tg() const;
  void set_tg(const ::std::string& value);
  void set_tg(const char* value);
  void set_tg(const char* value, size_t size);
  ::std::string* mutable_tg();
  ::std::string* release_tg();
  void set_allocated_tg(::std::string* tg);

  // optional string og = 3;
  void clear_og();
  static const int kOgFieldNumber = 3;
  const ::std::string& og() const;
  void set_og(const ::std::string& value);
  void set_og(const char* value);
  void set_og(const char* value, size_t size);
  ::std::string* mutable_og();
  ::std::string* release_og();
  void set_allocated_og(::std::string* og);

  // optional string rid = 4;
  void clear_rid();
  static const int kRidFieldNumber = 4;
  const ::std::string& rid() const;
  void set_rid(const ::std::string& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  ::std::string* mutable_rid();
  ::std::string* release_rid();
  void set_allocated_rid(::std::string* rid);

  // optional string mi = 5;
  void clear_mi();
  static const int kMiFieldNumber = 5;
  const ::std::string& mi() const;
  void set_mi(const ::std::string& value);
  void set_mi(const char* value);
  void set_mi(const char* value, size_t size);
  ::std::string* mutable_mi();
  ::std::string* release_mi();
  void set_allocated_mi(::std::string* mi);

  // optional string pc = 6;
  void clear_pc();
  static const int kPcFieldNumber = 6;
  const ::std::string& pc() const;
  void set_pc(const ::std::string& value);
  void set_pc(const char* value);
  void set_pc(const char* value, size_t size);
  ::std::string* mutable_pc();
  ::std::string* release_pc();
  void set_allocated_pc(::std::string* pc);

  // optional .MicroWireless.OneM2M.pb.CommonTypes.RequestStatus rs = 7;
  void clear_rs();
  static const int kRsFieldNumber = 7;
  ::MicroWireless::OneM2M::pb::CommonTypes_RequestStatus rs() const;
  void set_rs(::MicroWireless::OneM2M::pb::CommonTypes_RequestStatus value);

  // optional .MicroWireless.OneM2M.pb.ResponsePrim ol = 8;
  bool has_ol() const;
  void clear_ol();
  static const int kOlFieldNumber = 8;
  const ::MicroWireless::OneM2M::pb::ResponsePrim& ol() const;
  ::MicroWireless::OneM2M::pb::ResponsePrim* mutable_ol();
  ::MicroWireless::OneM2M::pb::ResponsePrim* release_ol();
  void set_allocated_ol(::MicroWireless::OneM2M::pb::ResponsePrim* ol);

  // @@protoc_insertion_point(class_scope:MicroWireless.OneM2M.pb.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr tg_;
  ::google::protobuf::internal::ArenaStringPtr og_;
  ::google::protobuf::internal::ArenaStringPtr rid_;
  int op_;
  int rs_;
  ::google::protobuf::internal::ArenaStringPtr mi_;
  ::google::protobuf::internal::ArenaStringPtr pc_;
  ::MicroWireless::OneM2M::pb::ResponsePrim* ol_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Request_2eproto();
  friend void protobuf_AssignDesc_Request_2eproto();
  friend void protobuf_ShutdownFile_Request_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional .MicroWireless.OneM2M.pb.CommonTypes.Operation op = 1;
inline void Request::clear_op() {
  op_ = 0;
}
inline ::MicroWireless::OneM2M::pb::CommonTypes_Operation Request::op() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.Request.op)
  return static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_Operation >(op_);
}
inline void Request::set_op(::MicroWireless::OneM2M::pb::CommonTypes_Operation value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.Request.op)
}

// optional string tg = 2;
inline void Request::clear_tg() {
  tg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::tg() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.Request.tg)
  return tg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_tg(const ::std::string& value) {
  
  tg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.Request.tg)
}
inline void Request::set_tg(const char* value) {
  
  tg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.Request.tg)
}
inline void Request::set_tg(const char* value, size_t size) {
  
  tg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.Request.tg)
}
inline ::std::string* Request::mutable_tg() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.Request.tg)
  return tg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_tg() {
  
  return tg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_tg(::std::string* tg) {
  if (tg != NULL) {
    
  } else {
    
  }
  tg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tg);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.Request.tg)
}

// optional string og = 3;
inline void Request::clear_og() {
  og_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::og() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.Request.og)
  return og_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_og(const ::std::string& value) {
  
  og_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.Request.og)
}
inline void Request::set_og(const char* value) {
  
  og_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.Request.og)
}
inline void Request::set_og(const char* value, size_t size) {
  
  og_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.Request.og)
}
inline ::std::string* Request::mutable_og() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.Request.og)
  return og_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_og() {
  
  return og_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_og(::std::string* og) {
  if (og != NULL) {
    
  } else {
    
  }
  og_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), og);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.Request.og)
}

// optional string rid = 4;
inline void Request::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::rid() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.Request.rid)
  return rid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.Request.rid)
}
inline void Request::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.Request.rid)
}
inline void Request::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.Request.rid)
}
inline ::std::string* Request::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.Request.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_rid() {
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.Request.rid)
}

// optional string mi = 5;
inline void Request::clear_mi() {
  mi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::mi() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.Request.mi)
  return mi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_mi(const ::std::string& value) {
  
  mi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.Request.mi)
}
inline void Request::set_mi(const char* value) {
  
  mi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.Request.mi)
}
inline void Request::set_mi(const char* value, size_t size) {
  
  mi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.Request.mi)
}
inline ::std::string* Request::mutable_mi() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.Request.mi)
  return mi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_mi() {
  
  return mi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_mi(::std::string* mi) {
  if (mi != NULL) {
    
  } else {
    
  }
  mi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mi);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.Request.mi)
}

// optional string pc = 6;
inline void Request::clear_pc() {
  pc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::pc() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.Request.pc)
  return pc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_pc(const ::std::string& value) {
  
  pc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.Request.pc)
}
inline void Request::set_pc(const char* value) {
  
  pc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.Request.pc)
}
inline void Request::set_pc(const char* value, size_t size) {
  
  pc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.Request.pc)
}
inline ::std::string* Request::mutable_pc() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.Request.pc)
  return pc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_pc() {
  
  return pc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_pc(::std::string* pc) {
  if (pc != NULL) {
    
  } else {
    
  }
  pc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pc);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.Request.pc)
}

// optional .MicroWireless.OneM2M.pb.CommonTypes.RequestStatus rs = 7;
inline void Request::clear_rs() {
  rs_ = 0;
}
inline ::MicroWireless::OneM2M::pb::CommonTypes_RequestStatus Request::rs() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.Request.rs)
  return static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_RequestStatus >(rs_);
}
inline void Request::set_rs(::MicroWireless::OneM2M::pb::CommonTypes_RequestStatus value) {
  
  rs_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.Request.rs)
}

// optional .MicroWireless.OneM2M.pb.ResponsePrim ol = 8;
inline bool Request::has_ol() const {
  return !_is_default_instance_ && ol_ != NULL;
}
inline void Request::clear_ol() {
  if (GetArenaNoVirtual() == NULL && ol_ != NULL) delete ol_;
  ol_ = NULL;
}
inline const ::MicroWireless::OneM2M::pb::ResponsePrim& Request::ol() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.Request.ol)
  return ol_ != NULL ? *ol_ : *default_instance_->ol_;
}
inline ::MicroWireless::OneM2M::pb::ResponsePrim* Request::mutable_ol() {
  
  if (ol_ == NULL) {
    ol_ = new ::MicroWireless::OneM2M::pb::ResponsePrim;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.Request.ol)
  return ol_;
}
inline ::MicroWireless::OneM2M::pb::ResponsePrim* Request::release_ol() {
  
  ::MicroWireless::OneM2M::pb::ResponsePrim* temp = ol_;
  ol_ = NULL;
  return temp;
}
inline void Request::set_allocated_ol(::MicroWireless::OneM2M::pb::ResponsePrim* ol) {
  delete ol_;
  ol_ = ol;
  if (ol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.Request.ol)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace OneM2M
}  // namespace MicroWireless

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Request_2eproto__INCLUDED
