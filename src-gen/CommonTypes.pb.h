// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonTypes.proto

#ifndef PROTOBUF_CommonTypes_2eproto__INCLUDED
#define PROTOBUF_CommonTypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/protobuf/any.pb.h"
// @@protoc_insertion_point(includes)

namespace MicroWireless {
namespace OneM2M {
namespace pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_CommonTypes_2eproto();
void protobuf_AssignDesc_CommonTypes_2eproto();
void protobuf_ShutdownFile_CommonTypes_2eproto();

class CommonTypes;
class Attribute;

enum CommonTypes_ResourceType {
  CommonTypes_ResourceType_RESOURCE_TYPE_NONE = 0,
  CommonTypes_ResourceType_NORMAL = 1,
  CommonTypes_ResourceType_VIRTUAL = 2,
  CommonTypes_ResourceType_ANNOUNCED = 3,
  CommonTypes_ResourceType_CommonTypes_ResourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommonTypes_ResourceType_CommonTypes_ResourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommonTypes_ResourceType_IsValid(int value);
const CommonTypes_ResourceType CommonTypes_ResourceType_ResourceType_MIN = CommonTypes_ResourceType_RESOURCE_TYPE_NONE;
const CommonTypes_ResourceType CommonTypes_ResourceType_ResourceType_MAX = CommonTypes_ResourceType_ANNOUNCED;
const int CommonTypes_ResourceType_ResourceType_ARRAYSIZE = CommonTypes_ResourceType_ResourceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommonTypes_ResourceType_descriptor();
inline const ::std::string& CommonTypes_ResourceType_Name(CommonTypes_ResourceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonTypes_ResourceType_descriptor(), value);
}
inline bool CommonTypes_ResourceType_Parse(
    const ::std::string& name, CommonTypes_ResourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonTypes_ResourceType>(
    CommonTypes_ResourceType_descriptor(), name, value);
}
enum CommonTypes_CSEType {
  CommonTypes_CSEType_CSE_TYPE_NONE = 0,
  CommonTypes_CSEType_IN_CSE = 1,
  CommonTypes_CSEType_MN_CSE = 2,
  CommonTypes_CSEType_ASN_CSE = 3,
  CommonTypes_CSEType_CommonTypes_CSEType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommonTypes_CSEType_CommonTypes_CSEType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommonTypes_CSEType_IsValid(int value);
const CommonTypes_CSEType CommonTypes_CSEType_CSEType_MIN = CommonTypes_CSEType_CSE_TYPE_NONE;
const CommonTypes_CSEType CommonTypes_CSEType_CSEType_MAX = CommonTypes_CSEType_ASN_CSE;
const int CommonTypes_CSEType_CSEType_ARRAYSIZE = CommonTypes_CSEType_CSEType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommonTypes_CSEType_descriptor();
inline const ::std::string& CommonTypes_CSEType_Name(CommonTypes_CSEType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonTypes_CSEType_descriptor(), value);
}
inline bool CommonTypes_CSEType_Parse(
    const ::std::string& name, CommonTypes_CSEType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonTypes_CSEType>(
    CommonTypes_CSEType_descriptor(), name, value);
}
enum CommonTypes_SupportedResourceType {
  CommonTypes_SupportedResourceType_SUPPORTED_RESOURCE_TYPE_NONE = 0,
  CommonTypes_SupportedResourceType_ACCESS_CONTROL_POLICY = 1,
  CommonTypes_SupportedResourceType_AE = 2,
  CommonTypes_SupportedResourceType_CONTAINER = 3,
  CommonTypes_SupportedResourceType_CONTENT_INSTANCE = 4,
  CommonTypes_SupportedResourceType_CSE_BASE = 5,
  CommonTypes_SupportedResourceType_DELIVERY = 6,
  CommonTypes_SupportedResourceType_EVENT_CONFIG = 7,
  CommonTypes_SupportedResourceType_EXEC_INSTANCE = 8,
  CommonTypes_SupportedResourceType_GROUP = 9,
  CommonTypes_SupportedResourceType_LOCATION_POLICY = 10,
  CommonTypes_SupportedResourceType_MGMT_CMD = 11,
  CommonTypes_SupportedResourceType_MGMT_OBJ = 12,
  CommonTypes_SupportedResourceType_SERVICE_SUB_PROFILE = 13,
  CommonTypes_SupportedResourceType_NODE = 14,
  CommonTypes_SupportedResourceType_POLLING_CHANNEL = 15,
  CommonTypes_SupportedResourceType_REMOTE_CSE = 16,
  CommonTypes_SupportedResourceType_REQUEST = 17,
  CommonTypes_SupportedResourceType_SCHEDULE = 18,
  CommonTypes_SupportedResourceType_SERVICE_SUB_NODE = 19,
  CommonTypes_SupportedResourceType_STATS_COLLECT = 20,
  CommonTypes_SupportedResourceType_STATS_CONFIG = 21,
  CommonTypes_SupportedResourceType_SUBSCRIPTION = 22,
  CommonTypes_SupportedResourceType_SERVICE_SUB_APP_RULE = 23,
  CommonTypes_SupportedResourceType_MEMBER_MIXED = 24,
  CommonTypes_SupportedResourceType_ACCESS_CONTROL_POLICY_ANNC = 10001,
  CommonTypes_SupportedResourceType_AE_ANNC = 10002,
  CommonTypes_SupportedResourceType_CONTAINER_ANNC = 10003,
  CommonTypes_SupportedResourceType_CONTENT_INSTANCE_ANNC = 10004,
  CommonTypes_SupportedResourceType_GROUP_ANNC = 10005,
  CommonTypes_SupportedResourceType_LOCATION_POLICY_ANNC = 10006,
  CommonTypes_SupportedResourceType_MGMT_OBJ_ANNC = 10007,
  CommonTypes_SupportedResourceType_NODE_ANNC = 10008,
  CommonTypes_SupportedResourceType_REMOTE_CSE_ANNC = 10009,
  CommonTypes_SupportedResourceType_SCHEDULE_ANNC = 10010,
  CommonTypes_SupportedResourceType_LATEST = 90001,
  CommonTypes_SupportedResourceType_OLDEST = 90002,
  CommonTypes_SupportedResourceType_FAN_OUT_POINT = 90003,
  CommonTypes_SupportedResourceType_POLLING_CHANNEL_URI = 90004,
  CommonTypes_SupportedResourceType_CommonTypes_SupportedResourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommonTypes_SupportedResourceType_CommonTypes_SupportedResourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommonTypes_SupportedResourceType_IsValid(int value);
const CommonTypes_SupportedResourceType CommonTypes_SupportedResourceType_SupportedResourceType_MIN = CommonTypes_SupportedResourceType_SUPPORTED_RESOURCE_TYPE_NONE;
const CommonTypes_SupportedResourceType CommonTypes_SupportedResourceType_SupportedResourceType_MAX = CommonTypes_SupportedResourceType_POLLING_CHANNEL_URI;
const int CommonTypes_SupportedResourceType_SupportedResourceType_ARRAYSIZE = CommonTypes_SupportedResourceType_SupportedResourceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommonTypes_SupportedResourceType_descriptor();
inline const ::std::string& CommonTypes_SupportedResourceType_Name(CommonTypes_SupportedResourceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonTypes_SupportedResourceType_descriptor(), value);
}
inline bool CommonTypes_SupportedResourceType_Parse(
    const ::std::string& name, CommonTypes_SupportedResourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonTypes_SupportedResourceType>(
    CommonTypes_SupportedResourceType_descriptor(), name, value);
}
enum CommonTypes_LocationSource {
  CommonTypes_LocationSource_LOCATION_SOURCE_NONE = 0,
  CommonTypes_LocationSource_NETWORK_BASED = 1,
  CommonTypes_LocationSource_DEVICE_BASED = 2,
  CommonTypes_LocationSource_SHARING_BASED = 3,
  CommonTypes_LocationSource_CommonTypes_LocationSource_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommonTypes_LocationSource_CommonTypes_LocationSource_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommonTypes_LocationSource_IsValid(int value);
const CommonTypes_LocationSource CommonTypes_LocationSource_LocationSource_MIN = CommonTypes_LocationSource_LOCATION_SOURCE_NONE;
const CommonTypes_LocationSource CommonTypes_LocationSource_LocationSource_MAX = CommonTypes_LocationSource_SHARING_BASED;
const int CommonTypes_LocationSource_LocationSource_ARRAYSIZE = CommonTypes_LocationSource_LocationSource_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommonTypes_LocationSource_descriptor();
inline const ::std::string& CommonTypes_LocationSource_Name(CommonTypes_LocationSource value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonTypes_LocationSource_descriptor(), value);
}
inline bool CommonTypes_LocationSource_Parse(
    const ::std::string& name, CommonTypes_LocationSource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonTypes_LocationSource>(
    CommonTypes_LocationSource_descriptor(), name, value);
}
enum CommonTypes_EventCat {
  CommonTypes_EventCat_EVENT_CATS_NONE = 0,
  CommonTypes_EventCat_STD_EVENT_CATS_DEFAULT = 1,
  CommonTypes_EventCat_STD_EVENT_CATS_IMMEDIATE = 2,
  CommonTypes_EventCat_STD_EVENT_CATS_BEST_EFFORT = 3,
  CommonTypes_EventCat_STD_EVENT_CATS_LATEST = 4,
  CommonTypes_EventCat_CommonTypes_EventCat_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommonTypes_EventCat_CommonTypes_EventCat_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommonTypes_EventCat_IsValid(int value);
const CommonTypes_EventCat CommonTypes_EventCat_EventCat_MIN = CommonTypes_EventCat_EVENT_CATS_NONE;
const CommonTypes_EventCat CommonTypes_EventCat_EventCat_MAX = CommonTypes_EventCat_STD_EVENT_CATS_LATEST;
const int CommonTypes_EventCat_EventCat_ARRAYSIZE = CommonTypes_EventCat_EventCat_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommonTypes_EventCat_descriptor();
inline const ::std::string& CommonTypes_EventCat_Name(CommonTypes_EventCat value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonTypes_EventCat_descriptor(), value);
}
inline bool CommonTypes_EventCat_Parse(
    const ::std::string& name, CommonTypes_EventCat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonTypes_EventCat>(
    CommonTypes_EventCat_descriptor(), name, value);
}
enum CommonTypes_ContentType {
  CommonTypes_ContentType_CONTENT_TYPE_NONE = 0,
  CommonTypes_ContentType_APPLICATION_XML = 1,
  CommonTypes_ContentType_APPLICATION_JSON = 2,
  CommonTypes_ContentType_CommonTypes_ContentType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommonTypes_ContentType_CommonTypes_ContentType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommonTypes_ContentType_IsValid(int value);
const CommonTypes_ContentType CommonTypes_ContentType_ContentType_MIN = CommonTypes_ContentType_CONTENT_TYPE_NONE;
const CommonTypes_ContentType CommonTypes_ContentType_ContentType_MAX = CommonTypes_ContentType_APPLICATION_JSON;
const int CommonTypes_ContentType_ContentType_ARRAYSIZE = CommonTypes_ContentType_ContentType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommonTypes_ContentType_descriptor();
inline const ::std::string& CommonTypes_ContentType_Name(CommonTypes_ContentType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonTypes_ContentType_descriptor(), value);
}
inline bool CommonTypes_ContentType_Parse(
    const ::std::string& name, CommonTypes_ContentType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonTypes_ContentType>(
    CommonTypes_ContentType_descriptor(), name, value);
}
enum CommonTypes_FilterUsage {
  CommonTypes_FilterUsage_FILTER_USAGE_NONE = 0,
  CommonTypes_FilterUsage_DISCOVERY_CRITERIA = 1,
  CommonTypes_FilterUsage_EVENT_NOTIFICATION_CRITERIA = 2,
  CommonTypes_FilterUsage_CommonTypes_FilterUsage_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommonTypes_FilterUsage_CommonTypes_FilterUsage_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommonTypes_FilterUsage_IsValid(int value);
const CommonTypes_FilterUsage CommonTypes_FilterUsage_FilterUsage_MIN = CommonTypes_FilterUsage_FILTER_USAGE_NONE;
const CommonTypes_FilterUsage CommonTypes_FilterUsage_FilterUsage_MAX = CommonTypes_FilterUsage_EVENT_NOTIFICATION_CRITERIA;
const int CommonTypes_FilterUsage_FilterUsage_ARRAYSIZE = CommonTypes_FilterUsage_FilterUsage_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommonTypes_FilterUsage_descriptor();
inline const ::std::string& CommonTypes_FilterUsage_Name(CommonTypes_FilterUsage value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonTypes_FilterUsage_descriptor(), value);
}
inline bool CommonTypes_FilterUsage_Parse(
    const ::std::string& name, CommonTypes_FilterUsage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonTypes_FilterUsage>(
    CommonTypes_FilterUsage_descriptor(), name, value);
}
enum CommonTypes_DiscoveryResultType {
  CommonTypes_DiscoveryResultType_DISC_RES_TYPE_NONE = 0,
  CommonTypes_DiscoveryResultType_DISC_RES_TYPE_HIERARCHICAL = 1,
  CommonTypes_DiscoveryResultType_DISC_RES_TYPE_NON_HIERARCHICAL = 2,
  CommonTypes_DiscoveryResultType_DISC_RES_TYPE_CSEID_RESOURCEID = 3,
  CommonTypes_DiscoveryResultType_CommonTypes_DiscoveryResultType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommonTypes_DiscoveryResultType_CommonTypes_DiscoveryResultType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommonTypes_DiscoveryResultType_IsValid(int value);
const CommonTypes_DiscoveryResultType CommonTypes_DiscoveryResultType_DiscoveryResultType_MIN = CommonTypes_DiscoveryResultType_DISC_RES_TYPE_NONE;
const CommonTypes_DiscoveryResultType CommonTypes_DiscoveryResultType_DiscoveryResultType_MAX = CommonTypes_DiscoveryResultType_DISC_RES_TYPE_CSEID_RESOURCEID;
const int CommonTypes_DiscoveryResultType_DiscoveryResultType_ARRAYSIZE = CommonTypes_DiscoveryResultType_DiscoveryResultType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommonTypes_DiscoveryResultType_descriptor();
inline const ::std::string& CommonTypes_DiscoveryResultType_Name(CommonTypes_DiscoveryResultType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonTypes_DiscoveryResultType_descriptor(), value);
}
inline bool CommonTypes_DiscoveryResultType_Parse(
    const ::std::string& name, CommonTypes_DiscoveryResultType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonTypes_DiscoveryResultType>(
    CommonTypes_DiscoveryResultType_descriptor(), name, value);
}
enum CommonTypes_Operation {
  CommonTypes_Operation_OPERATION_NONE = 0,
  CommonTypes_Operation_OPERATION_CREATE = 1,
  CommonTypes_Operation_OPERATION_RETRIEVE = 2,
  CommonTypes_Operation_OPERATION_UPDATE = 3,
  CommonTypes_Operation_OPERATION_DELETE = 4,
  CommonTypes_Operation_OPERATION_NOTIFY = 5,
  CommonTypes_Operation_CommonTypes_Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommonTypes_Operation_CommonTypes_Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommonTypes_Operation_IsValid(int value);
const CommonTypes_Operation CommonTypes_Operation_Operation_MIN = CommonTypes_Operation_OPERATION_NONE;
const CommonTypes_Operation CommonTypes_Operation_Operation_MAX = CommonTypes_Operation_OPERATION_NOTIFY;
const int CommonTypes_Operation_Operation_ARRAYSIZE = CommonTypes_Operation_Operation_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommonTypes_Operation_descriptor();
inline const ::std::string& CommonTypes_Operation_Name(CommonTypes_Operation value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonTypes_Operation_descriptor(), value);
}
inline bool CommonTypes_Operation_Parse(
    const ::std::string& name, CommonTypes_Operation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonTypes_Operation>(
    CommonTypes_Operation_descriptor(), name, value);
}
enum CommonTypes_ResponseType {
  CommonTypes_ResponseType_RESPONSE_TYPE_NONE = 0,
  CommonTypes_ResponseType_NON_BLOCKING_REQUEST_SYNC = 1,
  CommonTypes_ResponseType_NON_BLOCKING_REQUEST_ASYNC = 2,
  CommonTypes_ResponseType_BLOCKING_REQUEST = 3,
  CommonTypes_ResponseType_CommonTypes_ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommonTypes_ResponseType_CommonTypes_ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommonTypes_ResponseType_IsValid(int value);
const CommonTypes_ResponseType CommonTypes_ResponseType_ResponseType_MIN = CommonTypes_ResponseType_RESPONSE_TYPE_NONE;
const CommonTypes_ResponseType CommonTypes_ResponseType_ResponseType_MAX = CommonTypes_ResponseType_BLOCKING_REQUEST;
const int CommonTypes_ResponseType_ResponseType_ARRAYSIZE = CommonTypes_ResponseType_ResponseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommonTypes_ResponseType_descriptor();
inline const ::std::string& CommonTypes_ResponseType_Name(CommonTypes_ResponseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonTypes_ResponseType_descriptor(), value);
}
inline bool CommonTypes_ResponseType_Parse(
    const ::std::string& name, CommonTypes_ResponseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonTypes_ResponseType>(
    CommonTypes_ResponseType_descriptor(), name, value);
}
enum CommonTypes_ResultContent {
  CommonTypes_ResultContent_RESULT_CONTENT_NOTHING = 0,
  CommonTypes_ResultContent_RESULT_CONTENT_ATTRIBUTES = 1,
  CommonTypes_ResultContent_RESULT_CONTENT_HADDR = 2,
  CommonTypes_ResultContent_RESULT_CONTENT_HADDR_ATTR = 3,
  CommonTypes_ResultContent_RESULT_CONTENT_ATTR_CHILD = 4,
  CommonTypes_ResultContent_RESULT_CONTENT_ATTR_CHILD_REF = 5,
  CommonTypes_ResultContent_RESULT_CONTENT_CHILD = 6,
  CommonTypes_ResultContent_RESULT_CONTENT_ORIGINAL = 7,
  CommonTypes_ResultContent_CommonTypes_ResultContent_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommonTypes_ResultContent_CommonTypes_ResultContent_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommonTypes_ResultContent_IsValid(int value);
const CommonTypes_ResultContent CommonTypes_ResultContent_ResultContent_MIN = CommonTypes_ResultContent_RESULT_CONTENT_NOTHING;
const CommonTypes_ResultContent CommonTypes_ResultContent_ResultContent_MAX = CommonTypes_ResultContent_RESULT_CONTENT_ORIGINAL;
const int CommonTypes_ResultContent_ResultContent_ARRAYSIZE = CommonTypes_ResultContent_ResultContent_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommonTypes_ResultContent_descriptor();
inline const ::std::string& CommonTypes_ResultContent_Name(CommonTypes_ResultContent value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonTypes_ResultContent_descriptor(), value);
}
inline bool CommonTypes_ResultContent_Parse(
    const ::std::string& name, CommonTypes_ResultContent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonTypes_ResultContent>(
    CommonTypes_ResultContent_descriptor(), name, value);
}
enum CommonTypes_RequestStatus {
  CommonTypes_RequestStatus_REQUEST_STATUS_NONE = 0,
  CommonTypes_RequestStatus_REQUEST_STATUS_COMPLETED = 1,
  CommonTypes_RequestStatus_REQUEST_STATUS_FAILED = 2,
  CommonTypes_RequestStatus_REQUEST_STATUS_PENDING = 3,
  CommonTypes_RequestStatus_REQUEST_STATUS_FORWARDED = 4,
  CommonTypes_RequestStatus_CommonTypes_RequestStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommonTypes_RequestStatus_CommonTypes_RequestStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommonTypes_RequestStatus_IsValid(int value);
const CommonTypes_RequestStatus CommonTypes_RequestStatus_RequestStatus_MIN = CommonTypes_RequestStatus_REQUEST_STATUS_NONE;
const CommonTypes_RequestStatus CommonTypes_RequestStatus_RequestStatus_MAX = CommonTypes_RequestStatus_REQUEST_STATUS_FORWARDED;
const int CommonTypes_RequestStatus_RequestStatus_ARRAYSIZE = CommonTypes_RequestStatus_RequestStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommonTypes_RequestStatus_descriptor();
inline const ::std::string& CommonTypes_RequestStatus_Name(CommonTypes_RequestStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonTypes_RequestStatus_descriptor(), value);
}
inline bool CommonTypes_RequestStatus_Parse(
    const ::std::string& name, CommonTypes_RequestStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonTypes_RequestStatus>(
    CommonTypes_RequestStatus_descriptor(), name, value);
}
enum CommonTypes_ConsistencyStrategy {
  CommonTypes_ConsistencyStrategy_CONSISTENCY_STRATEGY_NONE = 0,
  CommonTypes_ConsistencyStrategy_ABONDON_MEMBER = 1,
  CommonTypes_ConsistencyStrategy_ABONDON_GROUP = 2,
  CommonTypes_ConsistencyStrategy_SET_MIXED = 3,
  CommonTypes_ConsistencyStrategy_CommonTypes_ConsistencyStrategy_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommonTypes_ConsistencyStrategy_CommonTypes_ConsistencyStrategy_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommonTypes_ConsistencyStrategy_IsValid(int value);
const CommonTypes_ConsistencyStrategy CommonTypes_ConsistencyStrategy_ConsistencyStrategy_MIN = CommonTypes_ConsistencyStrategy_CONSISTENCY_STRATEGY_NONE;
const CommonTypes_ConsistencyStrategy CommonTypes_ConsistencyStrategy_ConsistencyStrategy_MAX = CommonTypes_ConsistencyStrategy_SET_MIXED;
const int CommonTypes_ConsistencyStrategy_ConsistencyStrategy_ARRAYSIZE = CommonTypes_ConsistencyStrategy_ConsistencyStrategy_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommonTypes_ConsistencyStrategy_descriptor();
inline const ::std::string& CommonTypes_ConsistencyStrategy_Name(CommonTypes_ConsistencyStrategy value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonTypes_ConsistencyStrategy_descriptor(), value);
}
inline bool CommonTypes_ConsistencyStrategy_Parse(
    const ::std::string& name, CommonTypes_ConsistencyStrategy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonTypes_ConsistencyStrategy>(
    CommonTypes_ConsistencyStrategy_descriptor(), name, value);
}
enum CommonTypes_CmdType {
  CommonTypes_CmdType_CMD_TYPE_NONE = 0,
  CommonTypes_CmdType_CMD_TYPE_RESET = 1,
  CommonTypes_CmdType_CMD_TYPE_REBOOT = 2,
  CommonTypes_CmdType_CMD_TYPE_UPLOAD = 3,
  CommonTypes_CmdType_CMD_TYPE_DOWNLOAD = 4,
  CommonTypes_CmdType_CMD_TYPE_SW_INSTALL = 5,
  CommonTypes_CmdType_CMD_TYPE_SW_UNINSTALL = 6,
  CommonTypes_CmdType_CMD_TYPE_SW_UPDATE = 7,
  CommonTypes_CmdType_CommonTypes_CmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommonTypes_CmdType_CommonTypes_CmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommonTypes_CmdType_IsValid(int value);
const CommonTypes_CmdType CommonTypes_CmdType_CmdType_MIN = CommonTypes_CmdType_CMD_TYPE_NONE;
const CommonTypes_CmdType CommonTypes_CmdType_CmdType_MAX = CommonTypes_CmdType_CMD_TYPE_SW_UPDATE;
const int CommonTypes_CmdType_CmdType_ARRAYSIZE = CommonTypes_CmdType_CmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommonTypes_CmdType_descriptor();
inline const ::std::string& CommonTypes_CmdType_Name(CommonTypes_CmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonTypes_CmdType_descriptor(), value);
}
inline bool CommonTypes_CmdType_Parse(
    const ::std::string& name, CommonTypes_CmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonTypes_CmdType>(
    CommonTypes_CmdType_descriptor(), name, value);
}
enum CommonTypes_ExecModeType {
  CommonTypes_ExecModeType_EXEC_MODE_TYPE_NONE = 0,
  CommonTypes_ExecModeType_IMMEDIATE_ONCE = 1,
  CommonTypes_ExecModeType_IMMEDIATE_REPEAT = 2,
  CommonTypes_ExecModeType_RANDOM_ONCE = 3,
  CommonTypes_ExecModeType_RANDOM_REPEAT = 4,
  CommonTypes_ExecModeType_CommonTypes_ExecModeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommonTypes_ExecModeType_CommonTypes_ExecModeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommonTypes_ExecModeType_IsValid(int value);
const CommonTypes_ExecModeType CommonTypes_ExecModeType_ExecModeType_MIN = CommonTypes_ExecModeType_EXEC_MODE_TYPE_NONE;
const CommonTypes_ExecModeType CommonTypes_ExecModeType_ExecModeType_MAX = CommonTypes_ExecModeType_RANDOM_REPEAT;
const int CommonTypes_ExecModeType_ExecModeType_ARRAYSIZE = CommonTypes_ExecModeType_ExecModeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommonTypes_ExecModeType_descriptor();
inline const ::std::string& CommonTypes_ExecModeType_Name(CommonTypes_ExecModeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonTypes_ExecModeType_descriptor(), value);
}
inline bool CommonTypes_ExecModeType_Parse(
    const ::std::string& name, CommonTypes_ExecModeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonTypes_ExecModeType>(
    CommonTypes_ExecModeType_descriptor(), name, value);
}
enum CommonTypes_ExecStatusType {
  CommonTypes_ExecStatusType_EXEC_STATUS_TYPE_NONE = 0,
  CommonTypes_ExecStatusType_EXEC_STATUS_INITIATED = 1,
  CommonTypes_ExecStatusType_EXEC_STATUS_PENDING = 2,
  CommonTypes_ExecStatusType_EXEC_STATUS_FINISHED = 3,
  CommonTypes_ExecStatusType_EXEC_STATUS_CANCELLING = 4,
  CommonTypes_ExecStatusType_EXEC_STATUS_CANCELLED = 5,
  CommonTypes_ExecStatusType_EXEC_STATUS_UNCANCELLABLE = 6,
  CommonTypes_ExecStatusType_CommonTypes_ExecStatusType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommonTypes_ExecStatusType_CommonTypes_ExecStatusType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommonTypes_ExecStatusType_IsValid(int value);
const CommonTypes_ExecStatusType CommonTypes_ExecStatusType_ExecStatusType_MIN = CommonTypes_ExecStatusType_EXEC_STATUS_TYPE_NONE;
const CommonTypes_ExecStatusType CommonTypes_ExecStatusType_ExecStatusType_MAX = CommonTypes_ExecStatusType_EXEC_STATUS_UNCANCELLABLE;
const int CommonTypes_ExecStatusType_ExecStatusType_ARRAYSIZE = CommonTypes_ExecStatusType_ExecStatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommonTypes_ExecStatusType_descriptor();
inline const ::std::string& CommonTypes_ExecStatusType_Name(CommonTypes_ExecStatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonTypes_ExecStatusType_descriptor(), value);
}
inline bool CommonTypes_ExecStatusType_Parse(
    const ::std::string& name, CommonTypes_ExecStatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonTypes_ExecStatusType>(
    CommonTypes_ExecStatusType_descriptor(), name, value);
}
enum CommonTypes_ExecResultType {
  CommonTypes_ExecResultType_EXEC_RESULT_TYPE_NONE = 0,
  CommonTypes_ExecResultType_CommonTypes_ExecResultType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommonTypes_ExecResultType_CommonTypes_ExecResultType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommonTypes_ExecResultType_IsValid(int value);
const CommonTypes_ExecResultType CommonTypes_ExecResultType_ExecResultType_MIN = CommonTypes_ExecResultType_EXEC_RESULT_TYPE_NONE;
const CommonTypes_ExecResultType CommonTypes_ExecResultType_ExecResultType_MAX = CommonTypes_ExecResultType_EXEC_RESULT_TYPE_NONE;
const int CommonTypes_ExecResultType_ExecResultType_ARRAYSIZE = CommonTypes_ExecResultType_ExecResultType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommonTypes_ExecResultType_descriptor();
inline const ::std::string& CommonTypes_ExecResultType_Name(CommonTypes_ExecResultType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonTypes_ExecResultType_descriptor(), value);
}
inline bool CommonTypes_ExecResultType_Parse(
    const ::std::string& name, CommonTypes_ExecResultType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonTypes_ExecResultType>(
    CommonTypes_ExecResultType_descriptor(), name, value);
}
enum CommonTypes_PointOfAccess {
  CommonTypes_PointOfAccess_POINT_OF_ACCESS_NONE = 0,
  CommonTypes_PointOfAccess_IPV4 = 1,
  CommonTypes_PointOfAccess_IPV6 = 2,
  CommonTypes_PointOfAccess_FQDN = 3,
  CommonTypes_PointOfAccess_CommonTypes_PointOfAccess_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommonTypes_PointOfAccess_CommonTypes_PointOfAccess_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommonTypes_PointOfAccess_IsValid(int value);
const CommonTypes_PointOfAccess CommonTypes_PointOfAccess_PointOfAccess_MIN = CommonTypes_PointOfAccess_POINT_OF_ACCESS_NONE;
const CommonTypes_PointOfAccess CommonTypes_PointOfAccess_PointOfAccess_MAX = CommonTypes_PointOfAccess_FQDN;
const int CommonTypes_PointOfAccess_PointOfAccess_ARRAYSIZE = CommonTypes_PointOfAccess_PointOfAccess_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommonTypes_PointOfAccess_descriptor();
inline const ::std::string& CommonTypes_PointOfAccess_Name(CommonTypes_PointOfAccess value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonTypes_PointOfAccess_descriptor(), value);
}
inline bool CommonTypes_PointOfAccess_Parse(
    const ::std::string& name, CommonTypes_PointOfAccess* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonTypes_PointOfAccess>(
    CommonTypes_PointOfAccess_descriptor(), name, value);
}
enum CommonTypes_ResponseStatusCode {
  CommonTypes_ResponseStatusCode_RSC_NONE = 0,
  CommonTypes_ResponseStatusCode_RSC_ACCEPTED = 1000,
  CommonTypes_ResponseStatusCode_RSC_OK = 2000,
  CommonTypes_ResponseStatusCode_RSC_CREATED = 2001,
  CommonTypes_ResponseStatusCode_RSC_DELETED = 2002,
  CommonTypes_ResponseStatusCode_RSC_CHANGED = 2003,
  CommonTypes_ResponseStatusCode_RSC_BAD_REQUEST = 4000,
  CommonTypes_ResponseStatusCode_RSC_NOT_FOUND = 4004,
  CommonTypes_ResponseStatusCode_RSC_OPERATION_NOT_ALLOWED = 4005,
  CommonTypes_ResponseStatusCode_RSC_REQUEST_TIMEOUT = 4008,
  CommonTypes_ResponseStatusCode_RSC_SUB_CREATOR_HAS_NO_PRIVILEGE = 4101,
  CommonTypes_ResponseStatusCode_RSC_CONTENTS_UNACCEPTED = 4102,
  CommonTypes_ResponseStatusCode_RSC_ACCESS_DENIED = 4103,
  CommonTypes_ResponseStatusCode_RSC_GROUP_REQUEST_ID_EXISTS = 4104,
  CommonTypes_ResponseStatusCode_RSC_CONFLICT = 4105,
  CommonTypes_ResponseStatusCode_RSC_INTERNAL_SERVER_ERROR = 5000,
  CommonTypes_ResponseStatusCode_RSC_NOT_IMPLEMENTED = 5001,
  CommonTypes_ResponseStatusCode_RSC_TARGET_NOT_REACHABLE = 5103,
  CommonTypes_ResponseStatusCode_RSC_NO_PREVILEGE = 5105,
  CommonTypes_ResponseStatusCode_RSC_ALREADY_EXISTS = 5106,
  CommonTypes_ResponseStatusCode_RSC_TAGET_NOT_SUBSCIBABLE = 5203,
  CommonTypes_ResponseStatusCode_RSC_SUB_VERIFICATION_INIT_FAILED = 5204,
  CommonTypes_ResponseStatusCode_RSC_SUB_HOST_HAS_NO_PRIVILEGE = 5205,
  CommonTypes_ResponseStatusCode_RSC_NON_BLOCKING_REQUEST_NOT_SUPPORTED = 5206,
  CommonTypes_ResponseStatusCode_RSC_EXT_OBJ_NOT_REACHABLE = 6003,
  CommonTypes_ResponseStatusCode_RSC_EXT_OBJ_NOT_FOUND = 6005,
  CommonTypes_ResponseStatusCode_RSC_MAX_MEMBER_EXCEEDED = 6010,
  CommonTypes_ResponseStatusCode_RSC_MEMBER_TYPE_INCONSISTENT = 6011,
  CommonTypes_ResponseStatusCode_RSC_MGMT_SESSION_CANNOT_ESTABLISH = 6020,
  CommonTypes_ResponseStatusCode_RSC_MGMT_SESSION_ESTABLISHMENT_TIMEOUT = 6021,
  CommonTypes_ResponseStatusCode_RSC_INVALID_CMDTYPE = 6022,
  CommonTypes_ResponseStatusCode_RSC_INVALID_ARGUMENTS = 6023,
  CommonTypes_ResponseStatusCode_RSC_INSUFFICIENT_ARGUMENTS = 6024,
  CommonTypes_ResponseStatusCode_RSC_MGMT_CONVERSION_ERROR = 6025,
  CommonTypes_ResponseStatusCode_RSC_MGMT_CANCELATION_FAILURE = 6026,
  CommonTypes_ResponseStatusCode_RSC_ALREADY_COMPLETE = 6028,
  CommonTypes_ResponseStatusCode_RSC_COMMAND_NOT_CANCALLABLE = 6029,
  CommonTypes_ResponseStatusCode_CommonTypes_ResponseStatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommonTypes_ResponseStatusCode_CommonTypes_ResponseStatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommonTypes_ResponseStatusCode_IsValid(int value);
const CommonTypes_ResponseStatusCode CommonTypes_ResponseStatusCode_ResponseStatusCode_MIN = CommonTypes_ResponseStatusCode_RSC_NONE;
const CommonTypes_ResponseStatusCode CommonTypes_ResponseStatusCode_ResponseStatusCode_MAX = CommonTypes_ResponseStatusCode_RSC_COMMAND_NOT_CANCALLABLE;
const int CommonTypes_ResponseStatusCode_ResponseStatusCode_ARRAYSIZE = CommonTypes_ResponseStatusCode_ResponseStatusCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommonTypes_ResponseStatusCode_descriptor();
inline const ::std::string& CommonTypes_ResponseStatusCode_Name(CommonTypes_ResponseStatusCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonTypes_ResponseStatusCode_descriptor(), value);
}
inline bool CommonTypes_ResponseStatusCode_Parse(
    const ::std::string& name, CommonTypes_ResponseStatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonTypes_ResponseStatusCode>(
    CommonTypes_ResponseStatusCode_descriptor(), name, value);
}
// ===================================================================

class CommonTypes : public ::google::protobuf::Message {
 public:
  CommonTypes();
  virtual ~CommonTypes();

  CommonTypes(const CommonTypes& from);

  inline CommonTypes& operator=(const CommonTypes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonTypes& default_instance();

  void Swap(CommonTypes* other);

  // implements Message ----------------------------------------------

  inline CommonTypes* New() const { return New(NULL); }

  CommonTypes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommonTypes& from);
  void MergeFrom(const CommonTypes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommonTypes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CommonTypes_ResourceType ResourceType;
  static const ResourceType RESOURCE_TYPE_NONE = CommonTypes_ResourceType_RESOURCE_TYPE_NONE;
  static const ResourceType NORMAL = CommonTypes_ResourceType_NORMAL;
  static const ResourceType VIRTUAL = CommonTypes_ResourceType_VIRTUAL;
  static const ResourceType ANNOUNCED = CommonTypes_ResourceType_ANNOUNCED;
  static inline bool ResourceType_IsValid(int value) {
    return CommonTypes_ResourceType_IsValid(value);
  }
  static const ResourceType ResourceType_MIN =
    CommonTypes_ResourceType_ResourceType_MIN;
  static const ResourceType ResourceType_MAX =
    CommonTypes_ResourceType_ResourceType_MAX;
  static const int ResourceType_ARRAYSIZE =
    CommonTypes_ResourceType_ResourceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResourceType_descriptor() {
    return CommonTypes_ResourceType_descriptor();
  }
  static inline const ::std::string& ResourceType_Name(ResourceType value) {
    return CommonTypes_ResourceType_Name(value);
  }
  static inline bool ResourceType_Parse(const ::std::string& name,
      ResourceType* value) {
    return CommonTypes_ResourceType_Parse(name, value);
  }

  typedef CommonTypes_CSEType CSEType;
  static const CSEType CSE_TYPE_NONE = CommonTypes_CSEType_CSE_TYPE_NONE;
  static const CSEType IN_CSE = CommonTypes_CSEType_IN_CSE;
  static const CSEType MN_CSE = CommonTypes_CSEType_MN_CSE;
  static const CSEType ASN_CSE = CommonTypes_CSEType_ASN_CSE;
  static inline bool CSEType_IsValid(int value) {
    return CommonTypes_CSEType_IsValid(value);
  }
  static const CSEType CSEType_MIN =
    CommonTypes_CSEType_CSEType_MIN;
  static const CSEType CSEType_MAX =
    CommonTypes_CSEType_CSEType_MAX;
  static const int CSEType_ARRAYSIZE =
    CommonTypes_CSEType_CSEType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CSEType_descriptor() {
    return CommonTypes_CSEType_descriptor();
  }
  static inline const ::std::string& CSEType_Name(CSEType value) {
    return CommonTypes_CSEType_Name(value);
  }
  static inline bool CSEType_Parse(const ::std::string& name,
      CSEType* value) {
    return CommonTypes_CSEType_Parse(name, value);
  }

  typedef CommonTypes_SupportedResourceType SupportedResourceType;
  static const SupportedResourceType SUPPORTED_RESOURCE_TYPE_NONE = CommonTypes_SupportedResourceType_SUPPORTED_RESOURCE_TYPE_NONE;
  static const SupportedResourceType ACCESS_CONTROL_POLICY = CommonTypes_SupportedResourceType_ACCESS_CONTROL_POLICY;
  static const SupportedResourceType AE = CommonTypes_SupportedResourceType_AE;
  static const SupportedResourceType CONTAINER = CommonTypes_SupportedResourceType_CONTAINER;
  static const SupportedResourceType CONTENT_INSTANCE = CommonTypes_SupportedResourceType_CONTENT_INSTANCE;
  static const SupportedResourceType CSE_BASE = CommonTypes_SupportedResourceType_CSE_BASE;
  static const SupportedResourceType DELIVERY = CommonTypes_SupportedResourceType_DELIVERY;
  static const SupportedResourceType EVENT_CONFIG = CommonTypes_SupportedResourceType_EVENT_CONFIG;
  static const SupportedResourceType EXEC_INSTANCE = CommonTypes_SupportedResourceType_EXEC_INSTANCE;
  static const SupportedResourceType GROUP = CommonTypes_SupportedResourceType_GROUP;
  static const SupportedResourceType LOCATION_POLICY = CommonTypes_SupportedResourceType_LOCATION_POLICY;
  static const SupportedResourceType MGMT_CMD = CommonTypes_SupportedResourceType_MGMT_CMD;
  static const SupportedResourceType MGMT_OBJ = CommonTypes_SupportedResourceType_MGMT_OBJ;
  static const SupportedResourceType SERVICE_SUB_PROFILE = CommonTypes_SupportedResourceType_SERVICE_SUB_PROFILE;
  static const SupportedResourceType NODE = CommonTypes_SupportedResourceType_NODE;
  static const SupportedResourceType POLLING_CHANNEL = CommonTypes_SupportedResourceType_POLLING_CHANNEL;
  static const SupportedResourceType REMOTE_CSE = CommonTypes_SupportedResourceType_REMOTE_CSE;
  static const SupportedResourceType REQUEST = CommonTypes_SupportedResourceType_REQUEST;
  static const SupportedResourceType SCHEDULE = CommonTypes_SupportedResourceType_SCHEDULE;
  static const SupportedResourceType SERVICE_SUB_NODE = CommonTypes_SupportedResourceType_SERVICE_SUB_NODE;
  static const SupportedResourceType STATS_COLLECT = CommonTypes_SupportedResourceType_STATS_COLLECT;
  static const SupportedResourceType STATS_CONFIG = CommonTypes_SupportedResourceType_STATS_CONFIG;
  static const SupportedResourceType SUBSCRIPTION = CommonTypes_SupportedResourceType_SUBSCRIPTION;
  static const SupportedResourceType SERVICE_SUB_APP_RULE = CommonTypes_SupportedResourceType_SERVICE_SUB_APP_RULE;
  static const SupportedResourceType MEMBER_MIXED = CommonTypes_SupportedResourceType_MEMBER_MIXED;
  static const SupportedResourceType ACCESS_CONTROL_POLICY_ANNC = CommonTypes_SupportedResourceType_ACCESS_CONTROL_POLICY_ANNC;
  static const SupportedResourceType AE_ANNC = CommonTypes_SupportedResourceType_AE_ANNC;
  static const SupportedResourceType CONTAINER_ANNC = CommonTypes_SupportedResourceType_CONTAINER_ANNC;
  static const SupportedResourceType CONTENT_INSTANCE_ANNC = CommonTypes_SupportedResourceType_CONTENT_INSTANCE_ANNC;
  static const SupportedResourceType GROUP_ANNC = CommonTypes_SupportedResourceType_GROUP_ANNC;
  static const SupportedResourceType LOCATION_POLICY_ANNC = CommonTypes_SupportedResourceType_LOCATION_POLICY_ANNC;
  static const SupportedResourceType MGMT_OBJ_ANNC = CommonTypes_SupportedResourceType_MGMT_OBJ_ANNC;
  static const SupportedResourceType NODE_ANNC = CommonTypes_SupportedResourceType_NODE_ANNC;
  static const SupportedResourceType REMOTE_CSE_ANNC = CommonTypes_SupportedResourceType_REMOTE_CSE_ANNC;
  static const SupportedResourceType SCHEDULE_ANNC = CommonTypes_SupportedResourceType_SCHEDULE_ANNC;
  static const SupportedResourceType LATEST = CommonTypes_SupportedResourceType_LATEST;
  static const SupportedResourceType OLDEST = CommonTypes_SupportedResourceType_OLDEST;
  static const SupportedResourceType FAN_OUT_POINT = CommonTypes_SupportedResourceType_FAN_OUT_POINT;
  static const SupportedResourceType POLLING_CHANNEL_URI = CommonTypes_SupportedResourceType_POLLING_CHANNEL_URI;
  static inline bool SupportedResourceType_IsValid(int value) {
    return CommonTypes_SupportedResourceType_IsValid(value);
  }
  static const SupportedResourceType SupportedResourceType_MIN =
    CommonTypes_SupportedResourceType_SupportedResourceType_MIN;
  static const SupportedResourceType SupportedResourceType_MAX =
    CommonTypes_SupportedResourceType_SupportedResourceType_MAX;
  static const int SupportedResourceType_ARRAYSIZE =
    CommonTypes_SupportedResourceType_SupportedResourceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SupportedResourceType_descriptor() {
    return CommonTypes_SupportedResourceType_descriptor();
  }
  static inline const ::std::string& SupportedResourceType_Name(SupportedResourceType value) {
    return CommonTypes_SupportedResourceType_Name(value);
  }
  static inline bool SupportedResourceType_Parse(const ::std::string& name,
      SupportedResourceType* value) {
    return CommonTypes_SupportedResourceType_Parse(name, value);
  }

  typedef CommonTypes_LocationSource LocationSource;
  static const LocationSource LOCATION_SOURCE_NONE = CommonTypes_LocationSource_LOCATION_SOURCE_NONE;
  static const LocationSource NETWORK_BASED = CommonTypes_LocationSource_NETWORK_BASED;
  static const LocationSource DEVICE_BASED = CommonTypes_LocationSource_DEVICE_BASED;
  static const LocationSource SHARING_BASED = CommonTypes_LocationSource_SHARING_BASED;
  static inline bool LocationSource_IsValid(int value) {
    return CommonTypes_LocationSource_IsValid(value);
  }
  static const LocationSource LocationSource_MIN =
    CommonTypes_LocationSource_LocationSource_MIN;
  static const LocationSource LocationSource_MAX =
    CommonTypes_LocationSource_LocationSource_MAX;
  static const int LocationSource_ARRAYSIZE =
    CommonTypes_LocationSource_LocationSource_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LocationSource_descriptor() {
    return CommonTypes_LocationSource_descriptor();
  }
  static inline const ::std::string& LocationSource_Name(LocationSource value) {
    return CommonTypes_LocationSource_Name(value);
  }
  static inline bool LocationSource_Parse(const ::std::string& name,
      LocationSource* value) {
    return CommonTypes_LocationSource_Parse(name, value);
  }

  typedef CommonTypes_EventCat EventCat;
  static const EventCat EVENT_CATS_NONE = CommonTypes_EventCat_EVENT_CATS_NONE;
  static const EventCat STD_EVENT_CATS_DEFAULT = CommonTypes_EventCat_STD_EVENT_CATS_DEFAULT;
  static const EventCat STD_EVENT_CATS_IMMEDIATE = CommonTypes_EventCat_STD_EVENT_CATS_IMMEDIATE;
  static const EventCat STD_EVENT_CATS_BEST_EFFORT = CommonTypes_EventCat_STD_EVENT_CATS_BEST_EFFORT;
  static const EventCat STD_EVENT_CATS_LATEST = CommonTypes_EventCat_STD_EVENT_CATS_LATEST;
  static inline bool EventCat_IsValid(int value) {
    return CommonTypes_EventCat_IsValid(value);
  }
  static const EventCat EventCat_MIN =
    CommonTypes_EventCat_EventCat_MIN;
  static const EventCat EventCat_MAX =
    CommonTypes_EventCat_EventCat_MAX;
  static const int EventCat_ARRAYSIZE =
    CommonTypes_EventCat_EventCat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventCat_descriptor() {
    return CommonTypes_EventCat_descriptor();
  }
  static inline const ::std::string& EventCat_Name(EventCat value) {
    return CommonTypes_EventCat_Name(value);
  }
  static inline bool EventCat_Parse(const ::std::string& name,
      EventCat* value) {
    return CommonTypes_EventCat_Parse(name, value);
  }

  typedef CommonTypes_ContentType ContentType;
  static const ContentType CONTENT_TYPE_NONE = CommonTypes_ContentType_CONTENT_TYPE_NONE;
  static const ContentType APPLICATION_XML = CommonTypes_ContentType_APPLICATION_XML;
  static const ContentType APPLICATION_JSON = CommonTypes_ContentType_APPLICATION_JSON;
  static inline bool ContentType_IsValid(int value) {
    return CommonTypes_ContentType_IsValid(value);
  }
  static const ContentType ContentType_MIN =
    CommonTypes_ContentType_ContentType_MIN;
  static const ContentType ContentType_MAX =
    CommonTypes_ContentType_ContentType_MAX;
  static const int ContentType_ARRAYSIZE =
    CommonTypes_ContentType_ContentType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ContentType_descriptor() {
    return CommonTypes_ContentType_descriptor();
  }
  static inline const ::std::string& ContentType_Name(ContentType value) {
    return CommonTypes_ContentType_Name(value);
  }
  static inline bool ContentType_Parse(const ::std::string& name,
      ContentType* value) {
    return CommonTypes_ContentType_Parse(name, value);
  }

  typedef CommonTypes_FilterUsage FilterUsage;
  static const FilterUsage FILTER_USAGE_NONE = CommonTypes_FilterUsage_FILTER_USAGE_NONE;
  static const FilterUsage DISCOVERY_CRITERIA = CommonTypes_FilterUsage_DISCOVERY_CRITERIA;
  static const FilterUsage EVENT_NOTIFICATION_CRITERIA = CommonTypes_FilterUsage_EVENT_NOTIFICATION_CRITERIA;
  static inline bool FilterUsage_IsValid(int value) {
    return CommonTypes_FilterUsage_IsValid(value);
  }
  static const FilterUsage FilterUsage_MIN =
    CommonTypes_FilterUsage_FilterUsage_MIN;
  static const FilterUsage FilterUsage_MAX =
    CommonTypes_FilterUsage_FilterUsage_MAX;
  static const int FilterUsage_ARRAYSIZE =
    CommonTypes_FilterUsage_FilterUsage_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FilterUsage_descriptor() {
    return CommonTypes_FilterUsage_descriptor();
  }
  static inline const ::std::string& FilterUsage_Name(FilterUsage value) {
    return CommonTypes_FilterUsage_Name(value);
  }
  static inline bool FilterUsage_Parse(const ::std::string& name,
      FilterUsage* value) {
    return CommonTypes_FilterUsage_Parse(name, value);
  }

  typedef CommonTypes_DiscoveryResultType DiscoveryResultType;
  static const DiscoveryResultType DISC_RES_TYPE_NONE = CommonTypes_DiscoveryResultType_DISC_RES_TYPE_NONE;
  static const DiscoveryResultType DISC_RES_TYPE_HIERARCHICAL = CommonTypes_DiscoveryResultType_DISC_RES_TYPE_HIERARCHICAL;
  static const DiscoveryResultType DISC_RES_TYPE_NON_HIERARCHICAL = CommonTypes_DiscoveryResultType_DISC_RES_TYPE_NON_HIERARCHICAL;
  static const DiscoveryResultType DISC_RES_TYPE_CSEID_RESOURCEID = CommonTypes_DiscoveryResultType_DISC_RES_TYPE_CSEID_RESOURCEID;
  static inline bool DiscoveryResultType_IsValid(int value) {
    return CommonTypes_DiscoveryResultType_IsValid(value);
  }
  static const DiscoveryResultType DiscoveryResultType_MIN =
    CommonTypes_DiscoveryResultType_DiscoveryResultType_MIN;
  static const DiscoveryResultType DiscoveryResultType_MAX =
    CommonTypes_DiscoveryResultType_DiscoveryResultType_MAX;
  static const int DiscoveryResultType_ARRAYSIZE =
    CommonTypes_DiscoveryResultType_DiscoveryResultType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DiscoveryResultType_descriptor() {
    return CommonTypes_DiscoveryResultType_descriptor();
  }
  static inline const ::std::string& DiscoveryResultType_Name(DiscoveryResultType value) {
    return CommonTypes_DiscoveryResultType_Name(value);
  }
  static inline bool DiscoveryResultType_Parse(const ::std::string& name,
      DiscoveryResultType* value) {
    return CommonTypes_DiscoveryResultType_Parse(name, value);
  }

  typedef CommonTypes_Operation Operation;
  static const Operation OPERATION_NONE = CommonTypes_Operation_OPERATION_NONE;
  static const Operation OPERATION_CREATE = CommonTypes_Operation_OPERATION_CREATE;
  static const Operation OPERATION_RETRIEVE = CommonTypes_Operation_OPERATION_RETRIEVE;
  static const Operation OPERATION_UPDATE = CommonTypes_Operation_OPERATION_UPDATE;
  static const Operation OPERATION_DELETE = CommonTypes_Operation_OPERATION_DELETE;
  static const Operation OPERATION_NOTIFY = CommonTypes_Operation_OPERATION_NOTIFY;
  static inline bool Operation_IsValid(int value) {
    return CommonTypes_Operation_IsValid(value);
  }
  static const Operation Operation_MIN =
    CommonTypes_Operation_Operation_MIN;
  static const Operation Operation_MAX =
    CommonTypes_Operation_Operation_MAX;
  static const int Operation_ARRAYSIZE =
    CommonTypes_Operation_Operation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Operation_descriptor() {
    return CommonTypes_Operation_descriptor();
  }
  static inline const ::std::string& Operation_Name(Operation value) {
    return CommonTypes_Operation_Name(value);
  }
  static inline bool Operation_Parse(const ::std::string& name,
      Operation* value) {
    return CommonTypes_Operation_Parse(name, value);
  }

  typedef CommonTypes_ResponseType ResponseType;
  static const ResponseType RESPONSE_TYPE_NONE = CommonTypes_ResponseType_RESPONSE_TYPE_NONE;
  static const ResponseType NON_BLOCKING_REQUEST_SYNC = CommonTypes_ResponseType_NON_BLOCKING_REQUEST_SYNC;
  static const ResponseType NON_BLOCKING_REQUEST_ASYNC = CommonTypes_ResponseType_NON_BLOCKING_REQUEST_ASYNC;
  static const ResponseType BLOCKING_REQUEST = CommonTypes_ResponseType_BLOCKING_REQUEST;
  static inline bool ResponseType_IsValid(int value) {
    return CommonTypes_ResponseType_IsValid(value);
  }
  static const ResponseType ResponseType_MIN =
    CommonTypes_ResponseType_ResponseType_MIN;
  static const ResponseType ResponseType_MAX =
    CommonTypes_ResponseType_ResponseType_MAX;
  static const int ResponseType_ARRAYSIZE =
    CommonTypes_ResponseType_ResponseType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResponseType_descriptor() {
    return CommonTypes_ResponseType_descriptor();
  }
  static inline const ::std::string& ResponseType_Name(ResponseType value) {
    return CommonTypes_ResponseType_Name(value);
  }
  static inline bool ResponseType_Parse(const ::std::string& name,
      ResponseType* value) {
    return CommonTypes_ResponseType_Parse(name, value);
  }

  typedef CommonTypes_ResultContent ResultContent;
  static const ResultContent RESULT_CONTENT_NOTHING = CommonTypes_ResultContent_RESULT_CONTENT_NOTHING;
  static const ResultContent RESULT_CONTENT_ATTRIBUTES = CommonTypes_ResultContent_RESULT_CONTENT_ATTRIBUTES;
  static const ResultContent RESULT_CONTENT_HADDR = CommonTypes_ResultContent_RESULT_CONTENT_HADDR;
  static const ResultContent RESULT_CONTENT_HADDR_ATTR = CommonTypes_ResultContent_RESULT_CONTENT_HADDR_ATTR;
  static const ResultContent RESULT_CONTENT_ATTR_CHILD = CommonTypes_ResultContent_RESULT_CONTENT_ATTR_CHILD;
  static const ResultContent RESULT_CONTENT_ATTR_CHILD_REF = CommonTypes_ResultContent_RESULT_CONTENT_ATTR_CHILD_REF;
  static const ResultContent RESULT_CONTENT_CHILD = CommonTypes_ResultContent_RESULT_CONTENT_CHILD;
  static const ResultContent RESULT_CONTENT_ORIGINAL = CommonTypes_ResultContent_RESULT_CONTENT_ORIGINAL;
  static inline bool ResultContent_IsValid(int value) {
    return CommonTypes_ResultContent_IsValid(value);
  }
  static const ResultContent ResultContent_MIN =
    CommonTypes_ResultContent_ResultContent_MIN;
  static const ResultContent ResultContent_MAX =
    CommonTypes_ResultContent_ResultContent_MAX;
  static const int ResultContent_ARRAYSIZE =
    CommonTypes_ResultContent_ResultContent_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResultContent_descriptor() {
    return CommonTypes_ResultContent_descriptor();
  }
  static inline const ::std::string& ResultContent_Name(ResultContent value) {
    return CommonTypes_ResultContent_Name(value);
  }
  static inline bool ResultContent_Parse(const ::std::string& name,
      ResultContent* value) {
    return CommonTypes_ResultContent_Parse(name, value);
  }

  typedef CommonTypes_RequestStatus RequestStatus;
  static const RequestStatus REQUEST_STATUS_NONE = CommonTypes_RequestStatus_REQUEST_STATUS_NONE;
  static const RequestStatus REQUEST_STATUS_COMPLETED = CommonTypes_RequestStatus_REQUEST_STATUS_COMPLETED;
  static const RequestStatus REQUEST_STATUS_FAILED = CommonTypes_RequestStatus_REQUEST_STATUS_FAILED;
  static const RequestStatus REQUEST_STATUS_PENDING = CommonTypes_RequestStatus_REQUEST_STATUS_PENDING;
  static const RequestStatus REQUEST_STATUS_FORWARDED = CommonTypes_RequestStatus_REQUEST_STATUS_FORWARDED;
  static inline bool RequestStatus_IsValid(int value) {
    return CommonTypes_RequestStatus_IsValid(value);
  }
  static const RequestStatus RequestStatus_MIN =
    CommonTypes_RequestStatus_RequestStatus_MIN;
  static const RequestStatus RequestStatus_MAX =
    CommonTypes_RequestStatus_RequestStatus_MAX;
  static const int RequestStatus_ARRAYSIZE =
    CommonTypes_RequestStatus_RequestStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RequestStatus_descriptor() {
    return CommonTypes_RequestStatus_descriptor();
  }
  static inline const ::std::string& RequestStatus_Name(RequestStatus value) {
    return CommonTypes_RequestStatus_Name(value);
  }
  static inline bool RequestStatus_Parse(const ::std::string& name,
      RequestStatus* value) {
    return CommonTypes_RequestStatus_Parse(name, value);
  }

  typedef CommonTypes_ConsistencyStrategy ConsistencyStrategy;
  static const ConsistencyStrategy CONSISTENCY_STRATEGY_NONE = CommonTypes_ConsistencyStrategy_CONSISTENCY_STRATEGY_NONE;
  static const ConsistencyStrategy ABONDON_MEMBER = CommonTypes_ConsistencyStrategy_ABONDON_MEMBER;
  static const ConsistencyStrategy ABONDON_GROUP = CommonTypes_ConsistencyStrategy_ABONDON_GROUP;
  static const ConsistencyStrategy SET_MIXED = CommonTypes_ConsistencyStrategy_SET_MIXED;
  static inline bool ConsistencyStrategy_IsValid(int value) {
    return CommonTypes_ConsistencyStrategy_IsValid(value);
  }
  static const ConsistencyStrategy ConsistencyStrategy_MIN =
    CommonTypes_ConsistencyStrategy_ConsistencyStrategy_MIN;
  static const ConsistencyStrategy ConsistencyStrategy_MAX =
    CommonTypes_ConsistencyStrategy_ConsistencyStrategy_MAX;
  static const int ConsistencyStrategy_ARRAYSIZE =
    CommonTypes_ConsistencyStrategy_ConsistencyStrategy_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConsistencyStrategy_descriptor() {
    return CommonTypes_ConsistencyStrategy_descriptor();
  }
  static inline const ::std::string& ConsistencyStrategy_Name(ConsistencyStrategy value) {
    return CommonTypes_ConsistencyStrategy_Name(value);
  }
  static inline bool ConsistencyStrategy_Parse(const ::std::string& name,
      ConsistencyStrategy* value) {
    return CommonTypes_ConsistencyStrategy_Parse(name, value);
  }

  typedef CommonTypes_CmdType CmdType;
  static const CmdType CMD_TYPE_NONE = CommonTypes_CmdType_CMD_TYPE_NONE;
  static const CmdType CMD_TYPE_RESET = CommonTypes_CmdType_CMD_TYPE_RESET;
  static const CmdType CMD_TYPE_REBOOT = CommonTypes_CmdType_CMD_TYPE_REBOOT;
  static const CmdType CMD_TYPE_UPLOAD = CommonTypes_CmdType_CMD_TYPE_UPLOAD;
  static const CmdType CMD_TYPE_DOWNLOAD = CommonTypes_CmdType_CMD_TYPE_DOWNLOAD;
  static const CmdType CMD_TYPE_SW_INSTALL = CommonTypes_CmdType_CMD_TYPE_SW_INSTALL;
  static const CmdType CMD_TYPE_SW_UNINSTALL = CommonTypes_CmdType_CMD_TYPE_SW_UNINSTALL;
  static const CmdType CMD_TYPE_SW_UPDATE = CommonTypes_CmdType_CMD_TYPE_SW_UPDATE;
  static inline bool CmdType_IsValid(int value) {
    return CommonTypes_CmdType_IsValid(value);
  }
  static const CmdType CmdType_MIN =
    CommonTypes_CmdType_CmdType_MIN;
  static const CmdType CmdType_MAX =
    CommonTypes_CmdType_CmdType_MAX;
  static const int CmdType_ARRAYSIZE =
    CommonTypes_CmdType_CmdType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdType_descriptor() {
    return CommonTypes_CmdType_descriptor();
  }
  static inline const ::std::string& CmdType_Name(CmdType value) {
    return CommonTypes_CmdType_Name(value);
  }
  static inline bool CmdType_Parse(const ::std::string& name,
      CmdType* value) {
    return CommonTypes_CmdType_Parse(name, value);
  }

  typedef CommonTypes_ExecModeType ExecModeType;
  static const ExecModeType EXEC_MODE_TYPE_NONE = CommonTypes_ExecModeType_EXEC_MODE_TYPE_NONE;
  static const ExecModeType IMMEDIATE_ONCE = CommonTypes_ExecModeType_IMMEDIATE_ONCE;
  static const ExecModeType IMMEDIATE_REPEAT = CommonTypes_ExecModeType_IMMEDIATE_REPEAT;
  static const ExecModeType RANDOM_ONCE = CommonTypes_ExecModeType_RANDOM_ONCE;
  static const ExecModeType RANDOM_REPEAT = CommonTypes_ExecModeType_RANDOM_REPEAT;
  static inline bool ExecModeType_IsValid(int value) {
    return CommonTypes_ExecModeType_IsValid(value);
  }
  static const ExecModeType ExecModeType_MIN =
    CommonTypes_ExecModeType_ExecModeType_MIN;
  static const ExecModeType ExecModeType_MAX =
    CommonTypes_ExecModeType_ExecModeType_MAX;
  static const int ExecModeType_ARRAYSIZE =
    CommonTypes_ExecModeType_ExecModeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ExecModeType_descriptor() {
    return CommonTypes_ExecModeType_descriptor();
  }
  static inline const ::std::string& ExecModeType_Name(ExecModeType value) {
    return CommonTypes_ExecModeType_Name(value);
  }
  static inline bool ExecModeType_Parse(const ::std::string& name,
      ExecModeType* value) {
    return CommonTypes_ExecModeType_Parse(name, value);
  }

  typedef CommonTypes_ExecStatusType ExecStatusType;
  static const ExecStatusType EXEC_STATUS_TYPE_NONE = CommonTypes_ExecStatusType_EXEC_STATUS_TYPE_NONE;
  static const ExecStatusType EXEC_STATUS_INITIATED = CommonTypes_ExecStatusType_EXEC_STATUS_INITIATED;
  static const ExecStatusType EXEC_STATUS_PENDING = CommonTypes_ExecStatusType_EXEC_STATUS_PENDING;
  static const ExecStatusType EXEC_STATUS_FINISHED = CommonTypes_ExecStatusType_EXEC_STATUS_FINISHED;
  static const ExecStatusType EXEC_STATUS_CANCELLING = CommonTypes_ExecStatusType_EXEC_STATUS_CANCELLING;
  static const ExecStatusType EXEC_STATUS_CANCELLED = CommonTypes_ExecStatusType_EXEC_STATUS_CANCELLED;
  static const ExecStatusType EXEC_STATUS_UNCANCELLABLE = CommonTypes_ExecStatusType_EXEC_STATUS_UNCANCELLABLE;
  static inline bool ExecStatusType_IsValid(int value) {
    return CommonTypes_ExecStatusType_IsValid(value);
  }
  static const ExecStatusType ExecStatusType_MIN =
    CommonTypes_ExecStatusType_ExecStatusType_MIN;
  static const ExecStatusType ExecStatusType_MAX =
    CommonTypes_ExecStatusType_ExecStatusType_MAX;
  static const int ExecStatusType_ARRAYSIZE =
    CommonTypes_ExecStatusType_ExecStatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ExecStatusType_descriptor() {
    return CommonTypes_ExecStatusType_descriptor();
  }
  static inline const ::std::string& ExecStatusType_Name(ExecStatusType value) {
    return CommonTypes_ExecStatusType_Name(value);
  }
  static inline bool ExecStatusType_Parse(const ::std::string& name,
      ExecStatusType* value) {
    return CommonTypes_ExecStatusType_Parse(name, value);
  }

  typedef CommonTypes_ExecResultType ExecResultType;
  static const ExecResultType EXEC_RESULT_TYPE_NONE = CommonTypes_ExecResultType_EXEC_RESULT_TYPE_NONE;
  static inline bool ExecResultType_IsValid(int value) {
    return CommonTypes_ExecResultType_IsValid(value);
  }
  static const ExecResultType ExecResultType_MIN =
    CommonTypes_ExecResultType_ExecResultType_MIN;
  static const ExecResultType ExecResultType_MAX =
    CommonTypes_ExecResultType_ExecResultType_MAX;
  static const int ExecResultType_ARRAYSIZE =
    CommonTypes_ExecResultType_ExecResultType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ExecResultType_descriptor() {
    return CommonTypes_ExecResultType_descriptor();
  }
  static inline const ::std::string& ExecResultType_Name(ExecResultType value) {
    return CommonTypes_ExecResultType_Name(value);
  }
  static inline bool ExecResultType_Parse(const ::std::string& name,
      ExecResultType* value) {
    return CommonTypes_ExecResultType_Parse(name, value);
  }

  typedef CommonTypes_PointOfAccess PointOfAccess;
  static const PointOfAccess POINT_OF_ACCESS_NONE = CommonTypes_PointOfAccess_POINT_OF_ACCESS_NONE;
  static const PointOfAccess IPV4 = CommonTypes_PointOfAccess_IPV4;
  static const PointOfAccess IPV6 = CommonTypes_PointOfAccess_IPV6;
  static const PointOfAccess FQDN = CommonTypes_PointOfAccess_FQDN;
  static inline bool PointOfAccess_IsValid(int value) {
    return CommonTypes_PointOfAccess_IsValid(value);
  }
  static const PointOfAccess PointOfAccess_MIN =
    CommonTypes_PointOfAccess_PointOfAccess_MIN;
  static const PointOfAccess PointOfAccess_MAX =
    CommonTypes_PointOfAccess_PointOfAccess_MAX;
  static const int PointOfAccess_ARRAYSIZE =
    CommonTypes_PointOfAccess_PointOfAccess_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PointOfAccess_descriptor() {
    return CommonTypes_PointOfAccess_descriptor();
  }
  static inline const ::std::string& PointOfAccess_Name(PointOfAccess value) {
    return CommonTypes_PointOfAccess_Name(value);
  }
  static inline bool PointOfAccess_Parse(const ::std::string& name,
      PointOfAccess* value) {
    return CommonTypes_PointOfAccess_Parse(name, value);
  }

  typedef CommonTypes_ResponseStatusCode ResponseStatusCode;
  static const ResponseStatusCode RSC_NONE = CommonTypes_ResponseStatusCode_RSC_NONE;
  static const ResponseStatusCode RSC_ACCEPTED = CommonTypes_ResponseStatusCode_RSC_ACCEPTED;
  static const ResponseStatusCode RSC_OK = CommonTypes_ResponseStatusCode_RSC_OK;
  static const ResponseStatusCode RSC_CREATED = CommonTypes_ResponseStatusCode_RSC_CREATED;
  static const ResponseStatusCode RSC_DELETED = CommonTypes_ResponseStatusCode_RSC_DELETED;
  static const ResponseStatusCode RSC_CHANGED = CommonTypes_ResponseStatusCode_RSC_CHANGED;
  static const ResponseStatusCode RSC_BAD_REQUEST = CommonTypes_ResponseStatusCode_RSC_BAD_REQUEST;
  static const ResponseStatusCode RSC_NOT_FOUND = CommonTypes_ResponseStatusCode_RSC_NOT_FOUND;
  static const ResponseStatusCode RSC_OPERATION_NOT_ALLOWED = CommonTypes_ResponseStatusCode_RSC_OPERATION_NOT_ALLOWED;
  static const ResponseStatusCode RSC_REQUEST_TIMEOUT = CommonTypes_ResponseStatusCode_RSC_REQUEST_TIMEOUT;
  static const ResponseStatusCode RSC_SUB_CREATOR_HAS_NO_PRIVILEGE = CommonTypes_ResponseStatusCode_RSC_SUB_CREATOR_HAS_NO_PRIVILEGE;
  static const ResponseStatusCode RSC_CONTENTS_UNACCEPTED = CommonTypes_ResponseStatusCode_RSC_CONTENTS_UNACCEPTED;
  static const ResponseStatusCode RSC_ACCESS_DENIED = CommonTypes_ResponseStatusCode_RSC_ACCESS_DENIED;
  static const ResponseStatusCode RSC_GROUP_REQUEST_ID_EXISTS = CommonTypes_ResponseStatusCode_RSC_GROUP_REQUEST_ID_EXISTS;
  static const ResponseStatusCode RSC_CONFLICT = CommonTypes_ResponseStatusCode_RSC_CONFLICT;
  static const ResponseStatusCode RSC_INTERNAL_SERVER_ERROR = CommonTypes_ResponseStatusCode_RSC_INTERNAL_SERVER_ERROR;
  static const ResponseStatusCode RSC_NOT_IMPLEMENTED = CommonTypes_ResponseStatusCode_RSC_NOT_IMPLEMENTED;
  static const ResponseStatusCode RSC_TARGET_NOT_REACHABLE = CommonTypes_ResponseStatusCode_RSC_TARGET_NOT_REACHABLE;
  static const ResponseStatusCode RSC_NO_PREVILEGE = CommonTypes_ResponseStatusCode_RSC_NO_PREVILEGE;
  static const ResponseStatusCode RSC_ALREADY_EXISTS = CommonTypes_ResponseStatusCode_RSC_ALREADY_EXISTS;
  static const ResponseStatusCode RSC_TAGET_NOT_SUBSCIBABLE = CommonTypes_ResponseStatusCode_RSC_TAGET_NOT_SUBSCIBABLE;
  static const ResponseStatusCode RSC_SUB_VERIFICATION_INIT_FAILED = CommonTypes_ResponseStatusCode_RSC_SUB_VERIFICATION_INIT_FAILED;
  static const ResponseStatusCode RSC_SUB_HOST_HAS_NO_PRIVILEGE = CommonTypes_ResponseStatusCode_RSC_SUB_HOST_HAS_NO_PRIVILEGE;
  static const ResponseStatusCode RSC_NON_BLOCKING_REQUEST_NOT_SUPPORTED = CommonTypes_ResponseStatusCode_RSC_NON_BLOCKING_REQUEST_NOT_SUPPORTED;
  static const ResponseStatusCode RSC_EXT_OBJ_NOT_REACHABLE = CommonTypes_ResponseStatusCode_RSC_EXT_OBJ_NOT_REACHABLE;
  static const ResponseStatusCode RSC_EXT_OBJ_NOT_FOUND = CommonTypes_ResponseStatusCode_RSC_EXT_OBJ_NOT_FOUND;
  static const ResponseStatusCode RSC_MAX_MEMBER_EXCEEDED = CommonTypes_ResponseStatusCode_RSC_MAX_MEMBER_EXCEEDED;
  static const ResponseStatusCode RSC_MEMBER_TYPE_INCONSISTENT = CommonTypes_ResponseStatusCode_RSC_MEMBER_TYPE_INCONSISTENT;
  static const ResponseStatusCode RSC_MGMT_SESSION_CANNOT_ESTABLISH = CommonTypes_ResponseStatusCode_RSC_MGMT_SESSION_CANNOT_ESTABLISH;
  static const ResponseStatusCode RSC_MGMT_SESSION_ESTABLISHMENT_TIMEOUT = CommonTypes_ResponseStatusCode_RSC_MGMT_SESSION_ESTABLISHMENT_TIMEOUT;
  static const ResponseStatusCode RSC_INVALID_CMDTYPE = CommonTypes_ResponseStatusCode_RSC_INVALID_CMDTYPE;
  static const ResponseStatusCode RSC_INVALID_ARGUMENTS = CommonTypes_ResponseStatusCode_RSC_INVALID_ARGUMENTS;
  static const ResponseStatusCode RSC_INSUFFICIENT_ARGUMENTS = CommonTypes_ResponseStatusCode_RSC_INSUFFICIENT_ARGUMENTS;
  static const ResponseStatusCode RSC_MGMT_CONVERSION_ERROR = CommonTypes_ResponseStatusCode_RSC_MGMT_CONVERSION_ERROR;
  static const ResponseStatusCode RSC_MGMT_CANCELATION_FAILURE = CommonTypes_ResponseStatusCode_RSC_MGMT_CANCELATION_FAILURE;
  static const ResponseStatusCode RSC_ALREADY_COMPLETE = CommonTypes_ResponseStatusCode_RSC_ALREADY_COMPLETE;
  static const ResponseStatusCode RSC_COMMAND_NOT_CANCALLABLE = CommonTypes_ResponseStatusCode_RSC_COMMAND_NOT_CANCALLABLE;
  static inline bool ResponseStatusCode_IsValid(int value) {
    return CommonTypes_ResponseStatusCode_IsValid(value);
  }
  static const ResponseStatusCode ResponseStatusCode_MIN =
    CommonTypes_ResponseStatusCode_ResponseStatusCode_MIN;
  static const ResponseStatusCode ResponseStatusCode_MAX =
    CommonTypes_ResponseStatusCode_ResponseStatusCode_MAX;
  static const int ResponseStatusCode_ARRAYSIZE =
    CommonTypes_ResponseStatusCode_ResponseStatusCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResponseStatusCode_descriptor() {
    return CommonTypes_ResponseStatusCode_descriptor();
  }
  static inline const ::std::string& ResponseStatusCode_Name(ResponseStatusCode value) {
    return CommonTypes_ResponseStatusCode_Name(value);
  }
  static inline bool ResponseStatusCode_Parse(const ::std::string& name,
      ResponseStatusCode* value) {
    return CommonTypes_ResponseStatusCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MicroWireless.OneM2M.pb.CommonTypes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_CommonTypes_2eproto();
  friend void protobuf_AssignDesc_CommonTypes_2eproto();
  friend void protobuf_ShutdownFile_CommonTypes_2eproto();

  void InitAsDefaultInstance();
  static CommonTypes* default_instance_;
};
// -------------------------------------------------------------------

class Attribute : public ::google::protobuf::Message {
 public:
  Attribute();
  virtual ~Attribute();

  Attribute(const Attribute& from);

  inline Attribute& operator=(const Attribute& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attribute& default_instance();

  void Swap(Attribute* other);

  // implements Message ----------------------------------------------

  inline Attribute* New() const { return New(NULL); }

  Attribute* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attribute& from);
  void MergeFrom(const Attribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Attribute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 atr = 1;
  void clear_atr();
  static const int kAtrFieldNumber = 1;
  ::google::protobuf::uint32 atr() const;
  void set_atr(::google::protobuf::uint32 value);

  // optional .google.protobuf.Any vl = 2;
  bool has_vl() const;
  void clear_vl();
  static const int kVlFieldNumber = 2;
  const ::google::protobuf::Any& vl() const;
  ::google::protobuf::Any* mutable_vl();
  ::google::protobuf::Any* release_vl();
  void set_allocated_vl(::google::protobuf::Any* vl);

  // @@protoc_insertion_point(class_scope:MicroWireless.OneM2M.pb.Attribute)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::Any* vl_;
  ::google::protobuf::uint32 atr_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_CommonTypes_2eproto();
  friend void protobuf_AssignDesc_CommonTypes_2eproto();
  friend void protobuf_ShutdownFile_CommonTypes_2eproto();

  void InitAsDefaultInstance();
  static Attribute* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CommonTypes

// -------------------------------------------------------------------

// Attribute

// optional uint32 atr = 1;
inline void Attribute::clear_atr() {
  atr_ = 0u;
}
inline ::google::protobuf::uint32 Attribute::atr() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.Attribute.atr)
  return atr_;
}
inline void Attribute::set_atr(::google::protobuf::uint32 value) {
  
  atr_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.Attribute.atr)
}

// optional .google.protobuf.Any vl = 2;
inline bool Attribute::has_vl() const {
  return !_is_default_instance_ && vl_ != NULL;
}
inline void Attribute::clear_vl() {
  if (GetArenaNoVirtual() == NULL && vl_ != NULL) delete vl_;
  vl_ = NULL;
}
inline const ::google::protobuf::Any& Attribute::vl() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.Attribute.vl)
  return vl_ != NULL ? *vl_ : *default_instance_->vl_;
}
inline ::google::protobuf::Any* Attribute::mutable_vl() {
  
  if (vl_ == NULL) {
    vl_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.Attribute.vl)
  return vl_;
}
inline ::google::protobuf::Any* Attribute::release_vl() {
  
  ::google::protobuf::Any* temp = vl_;
  vl_ = NULL;
  return temp;
}
inline void Attribute::set_allocated_vl(::google::protobuf::Any* vl) {
  delete vl_;
  vl_ = vl;
  if (vl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.Attribute.vl)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace OneM2M
}  // namespace MicroWireless

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::MicroWireless::OneM2M::pb::CommonTypes_ResourceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MicroWireless::OneM2M::pb::CommonTypes_ResourceType>() {
  return ::MicroWireless::OneM2M::pb::CommonTypes_ResourceType_descriptor();
}
template <> struct is_proto_enum< ::MicroWireless::OneM2M::pb::CommonTypes_CSEType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MicroWireless::OneM2M::pb::CommonTypes_CSEType>() {
  return ::MicroWireless::OneM2M::pb::CommonTypes_CSEType_descriptor();
}
template <> struct is_proto_enum< ::MicroWireless::OneM2M::pb::CommonTypes_SupportedResourceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MicroWireless::OneM2M::pb::CommonTypes_SupportedResourceType>() {
  return ::MicroWireless::OneM2M::pb::CommonTypes_SupportedResourceType_descriptor();
}
template <> struct is_proto_enum< ::MicroWireless::OneM2M::pb::CommonTypes_LocationSource> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MicroWireless::OneM2M::pb::CommonTypes_LocationSource>() {
  return ::MicroWireless::OneM2M::pb::CommonTypes_LocationSource_descriptor();
}
template <> struct is_proto_enum< ::MicroWireless::OneM2M::pb::CommonTypes_EventCat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MicroWireless::OneM2M::pb::CommonTypes_EventCat>() {
  return ::MicroWireless::OneM2M::pb::CommonTypes_EventCat_descriptor();
}
template <> struct is_proto_enum< ::MicroWireless::OneM2M::pb::CommonTypes_ContentType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MicroWireless::OneM2M::pb::CommonTypes_ContentType>() {
  return ::MicroWireless::OneM2M::pb::CommonTypes_ContentType_descriptor();
}
template <> struct is_proto_enum< ::MicroWireless::OneM2M::pb::CommonTypes_FilterUsage> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MicroWireless::OneM2M::pb::CommonTypes_FilterUsage>() {
  return ::MicroWireless::OneM2M::pb::CommonTypes_FilterUsage_descriptor();
}
template <> struct is_proto_enum< ::MicroWireless::OneM2M::pb::CommonTypes_DiscoveryResultType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MicroWireless::OneM2M::pb::CommonTypes_DiscoveryResultType>() {
  return ::MicroWireless::OneM2M::pb::CommonTypes_DiscoveryResultType_descriptor();
}
template <> struct is_proto_enum< ::MicroWireless::OneM2M::pb::CommonTypes_Operation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MicroWireless::OneM2M::pb::CommonTypes_Operation>() {
  return ::MicroWireless::OneM2M::pb::CommonTypes_Operation_descriptor();
}
template <> struct is_proto_enum< ::MicroWireless::OneM2M::pb::CommonTypes_ResponseType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MicroWireless::OneM2M::pb::CommonTypes_ResponseType>() {
  return ::MicroWireless::OneM2M::pb::CommonTypes_ResponseType_descriptor();
}
template <> struct is_proto_enum< ::MicroWireless::OneM2M::pb::CommonTypes_ResultContent> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MicroWireless::OneM2M::pb::CommonTypes_ResultContent>() {
  return ::MicroWireless::OneM2M::pb::CommonTypes_ResultContent_descriptor();
}
template <> struct is_proto_enum< ::MicroWireless::OneM2M::pb::CommonTypes_RequestStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MicroWireless::OneM2M::pb::CommonTypes_RequestStatus>() {
  return ::MicroWireless::OneM2M::pb::CommonTypes_RequestStatus_descriptor();
}
template <> struct is_proto_enum< ::MicroWireless::OneM2M::pb::CommonTypes_ConsistencyStrategy> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MicroWireless::OneM2M::pb::CommonTypes_ConsistencyStrategy>() {
  return ::MicroWireless::OneM2M::pb::CommonTypes_ConsistencyStrategy_descriptor();
}
template <> struct is_proto_enum< ::MicroWireless::OneM2M::pb::CommonTypes_CmdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MicroWireless::OneM2M::pb::CommonTypes_CmdType>() {
  return ::MicroWireless::OneM2M::pb::CommonTypes_CmdType_descriptor();
}
template <> struct is_proto_enum< ::MicroWireless::OneM2M::pb::CommonTypes_ExecModeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MicroWireless::OneM2M::pb::CommonTypes_ExecModeType>() {
  return ::MicroWireless::OneM2M::pb::CommonTypes_ExecModeType_descriptor();
}
template <> struct is_proto_enum< ::MicroWireless::OneM2M::pb::CommonTypes_ExecStatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MicroWireless::OneM2M::pb::CommonTypes_ExecStatusType>() {
  return ::MicroWireless::OneM2M::pb::CommonTypes_ExecStatusType_descriptor();
}
template <> struct is_proto_enum< ::MicroWireless::OneM2M::pb::CommonTypes_ExecResultType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MicroWireless::OneM2M::pb::CommonTypes_ExecResultType>() {
  return ::MicroWireless::OneM2M::pb::CommonTypes_ExecResultType_descriptor();
}
template <> struct is_proto_enum< ::MicroWireless::OneM2M::pb::CommonTypes_PointOfAccess> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MicroWireless::OneM2M::pb::CommonTypes_PointOfAccess>() {
  return ::MicroWireless::OneM2M::pb::CommonTypes_PointOfAccess_descriptor();
}
template <> struct is_proto_enum< ::MicroWireless::OneM2M::pb::CommonTypes_ResponseStatusCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MicroWireless::OneM2M::pb::CommonTypes_ResponseStatusCode>() {
  return ::MicroWireless::OneM2M::pb::CommonTypes_ResponseStatusCode_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CommonTypes_2eproto__INCLUDED
