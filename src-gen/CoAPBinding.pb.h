// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CoAPBinding.proto

#ifndef PROTOBUF_CoAPBinding_2eproto__INCLUDED
#define PROTOBUF_CoAPBinding_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace MicroWireless {
namespace OneM2M {
namespace pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_CoAPBinding_2eproto();
void protobuf_AssignDesc_CoAPBinding_2eproto();
void protobuf_ShutdownFile_CoAPBinding_2eproto();

class CoAPTypes;
class CoAPOption;
class CoAPBinding;

enum CoAPTypes_MethodType {
  CoAPTypes_MethodType_CoAP_METHOD_NONE = 0,
  CoAPTypes_MethodType_CoAP_GET = 1,
  CoAPTypes_MethodType_CoAP_POST = 2,
  CoAPTypes_MethodType_CoAP_PUT = 3,
  CoAPTypes_MethodType_CoAP_DELETE = 4,
  CoAPTypes_MethodType_CoAPTypes_MethodType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CoAPTypes_MethodType_CoAPTypes_MethodType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CoAPTypes_MethodType_IsValid(int value);
const CoAPTypes_MethodType CoAPTypes_MethodType_MethodType_MIN = CoAPTypes_MethodType_CoAP_METHOD_NONE;
const CoAPTypes_MethodType CoAPTypes_MethodType_MethodType_MAX = CoAPTypes_MethodType_CoAP_DELETE;
const int CoAPTypes_MethodType_MethodType_ARRAYSIZE = CoAPTypes_MethodType_MethodType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CoAPTypes_MethodType_descriptor();
inline const ::std::string& CoAPTypes_MethodType_Name(CoAPTypes_MethodType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CoAPTypes_MethodType_descriptor(), value);
}
inline bool CoAPTypes_MethodType_Parse(
    const ::std::string& name, CoAPTypes_MethodType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CoAPTypes_MethodType>(
    CoAPTypes_MethodType_descriptor(), name, value);
}
enum CoAPTypes_MessageType {
  CoAPTypes_MessageType_CoAP_CON = 0,
  CoAPTypes_MessageType_CoAP_NON = 1,
  CoAPTypes_MessageType_CoAP_ACK = 2,
  CoAPTypes_MessageType_CoAP_RST = 3,
  CoAPTypes_MessageType_CoAPTypes_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CoAPTypes_MessageType_CoAPTypes_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CoAPTypes_MessageType_IsValid(int value);
const CoAPTypes_MessageType CoAPTypes_MessageType_MessageType_MIN = CoAPTypes_MessageType_CoAP_CON;
const CoAPTypes_MessageType CoAPTypes_MessageType_MessageType_MAX = CoAPTypes_MessageType_CoAP_RST;
const int CoAPTypes_MessageType_MessageType_ARRAYSIZE = CoAPTypes_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CoAPTypes_MessageType_descriptor();
inline const ::std::string& CoAPTypes_MessageType_Name(CoAPTypes_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CoAPTypes_MessageType_descriptor(), value);
}
inline bool CoAPTypes_MessageType_Parse(
    const ::std::string& name, CoAPTypes_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CoAPTypes_MessageType>(
    CoAPTypes_MessageType_descriptor(), name, value);
}
enum CoAPTypes_ResponseCode {
  CoAPTypes_ResponseCode_CoAP_Code_None = 0,
  CoAPTypes_ResponseCode_CoAP_Created = 201,
  CoAPTypes_ResponseCode_CoAP_Deleted = 202,
  CoAPTypes_ResponseCode_CoAP_Valid = 203,
  CoAPTypes_ResponseCode_CoAP_Changed = 204,
  CoAPTypes_ResponseCode_CoAP_Content = 205,
  CoAPTypes_ResponseCode_CoAP_Bad_Request = 400,
  CoAPTypes_ResponseCode_CoAP_Unauthorized = 401,
  CoAPTypes_ResponseCode_CoAP_Bad_Option = 402,
  CoAPTypes_ResponseCode_CoAP_Forbidden = 403,
  CoAPTypes_ResponseCode_CoAP_Not_Found = 404,
  CoAPTypes_ResponseCode_CoAP_Method_Not_Allowed = 405,
  CoAPTypes_ResponseCode_CoAP_Not_Acceptable = 406,
  CoAPTypes_ResponseCode_CoAP_Precondition_Failed = 412,
  CoAPTypes_ResponseCode_CoAP_Request_Entity_Too_Large = 413,
  CoAPTypes_ResponseCode_CoAP_Unsupported_Content_Format = 415,
  CoAPTypes_ResponseCode_CoAP_Internal_Server_Error = 500,
  CoAPTypes_ResponseCode_CoAP_Not_Implemented = 501,
  CoAPTypes_ResponseCode_CoAP_Bad_Gateway = 502,
  CoAPTypes_ResponseCode_CoAP_Service_Unavailable = 503,
  CoAPTypes_ResponseCode_CoAP_Gateway_Timeout = 504,
  CoAPTypes_ResponseCode_CoAP_Proxying_Not_Supported = 505,
  CoAPTypes_ResponseCode_CoAPTypes_ResponseCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CoAPTypes_ResponseCode_CoAPTypes_ResponseCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CoAPTypes_ResponseCode_IsValid(int value);
const CoAPTypes_ResponseCode CoAPTypes_ResponseCode_ResponseCode_MIN = CoAPTypes_ResponseCode_CoAP_Code_None;
const CoAPTypes_ResponseCode CoAPTypes_ResponseCode_ResponseCode_MAX = CoAPTypes_ResponseCode_CoAP_Proxying_Not_Supported;
const int CoAPTypes_ResponseCode_ResponseCode_ARRAYSIZE = CoAPTypes_ResponseCode_ResponseCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CoAPTypes_ResponseCode_descriptor();
inline const ::std::string& CoAPTypes_ResponseCode_Name(CoAPTypes_ResponseCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CoAPTypes_ResponseCode_descriptor(), value);
}
inline bool CoAPTypes_ResponseCode_Parse(
    const ::std::string& name, CoAPTypes_ResponseCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CoAPTypes_ResponseCode>(
    CoAPTypes_ResponseCode_descriptor(), name, value);
}
enum CoAPTypes_OptionType {
  CoAPTypes_OptionType_CoAP_Option_None = 0,
  CoAPTypes_OptionType_CoAP_If_Match = 1,
  CoAPTypes_OptionType_CoAP_Uri_Host = 3,
  CoAPTypes_OptionType_CoAP_ETag = 4,
  CoAPTypes_OptionType_CoAP_If_None_Match = 5,
  CoAPTypes_OptionType_CoAP_Uri_Port = 7,
  CoAPTypes_OptionType_CoAP_Location_Path = 8,
  CoAPTypes_OptionType_CoAP_Uri_Path = 11,
  CoAPTypes_OptionType_CoAP_Content_Format = 12,
  CoAPTypes_OptionType_CoAP_Max_Age = 14,
  CoAPTypes_OptionType_CoAP_Uri_Query = 15,
  CoAPTypes_OptionType_CoAP_Accept = 17,
  CoAPTypes_OptionType_CoAP_Location_Query = 20,
  CoAPTypes_OptionType_CoAP_Proxy_Uri = 35,
  CoAPTypes_OptionType_CoAP_Proxy_Scheme = 39,
  CoAPTypes_OptionType_CoAP_Size1 = 60,
  CoAPTypes_OptionType_ONEM2M_FR = 256,
  CoAPTypes_OptionType_ONEM2M_RQI = 257,
  CoAPTypes_OptionType_ONEM2M_NM = 258,
  CoAPTypes_OptionType_ONEM2M_OT = 259,
  CoAPTypes_OptionType_ONEM2M_RQET = 260,
  CoAPTypes_OptionType_ONEM2M_RSET = 261,
  CoAPTypes_OptionType_ONEM2M_OET = 262,
  CoAPTypes_OptionType_ONEM2M_RTURI = 263,
  CoAPTypes_OptionType_ONEM2M_EC = 264,
  CoAPTypes_OptionType_ONEM2M_RSC = 265,
  CoAPTypes_OptionType_ONEM2M_GID = 266,
  CoAPTypes_OptionType_CoAPTypes_OptionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CoAPTypes_OptionType_CoAPTypes_OptionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CoAPTypes_OptionType_IsValid(int value);
const CoAPTypes_OptionType CoAPTypes_OptionType_OptionType_MIN = CoAPTypes_OptionType_CoAP_Option_None;
const CoAPTypes_OptionType CoAPTypes_OptionType_OptionType_MAX = CoAPTypes_OptionType_ONEM2M_GID;
const int CoAPTypes_OptionType_OptionType_ARRAYSIZE = CoAPTypes_OptionType_OptionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CoAPTypes_OptionType_descriptor();
inline const ::std::string& CoAPTypes_OptionType_Name(CoAPTypes_OptionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CoAPTypes_OptionType_descriptor(), value);
}
inline bool CoAPTypes_OptionType_Parse(
    const ::std::string& name, CoAPTypes_OptionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CoAPTypes_OptionType>(
    CoAPTypes_OptionType_descriptor(), name, value);
}
// ===================================================================

class CoAPTypes : public ::google::protobuf::Message {
 public:
  CoAPTypes();
  virtual ~CoAPTypes();

  CoAPTypes(const CoAPTypes& from);

  inline CoAPTypes& operator=(const CoAPTypes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CoAPTypes& default_instance();

  void Swap(CoAPTypes* other);

  // implements Message ----------------------------------------------

  inline CoAPTypes* New() const { return New(NULL); }

  CoAPTypes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CoAPTypes& from);
  void MergeFrom(const CoAPTypes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CoAPTypes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CoAPTypes_MethodType MethodType;
  static const MethodType CoAP_METHOD_NONE = CoAPTypes_MethodType_CoAP_METHOD_NONE;
  static const MethodType CoAP_GET = CoAPTypes_MethodType_CoAP_GET;
  static const MethodType CoAP_POST = CoAPTypes_MethodType_CoAP_POST;
  static const MethodType CoAP_PUT = CoAPTypes_MethodType_CoAP_PUT;
  static const MethodType CoAP_DELETE = CoAPTypes_MethodType_CoAP_DELETE;
  static inline bool MethodType_IsValid(int value) {
    return CoAPTypes_MethodType_IsValid(value);
  }
  static const MethodType MethodType_MIN =
    CoAPTypes_MethodType_MethodType_MIN;
  static const MethodType MethodType_MAX =
    CoAPTypes_MethodType_MethodType_MAX;
  static const int MethodType_ARRAYSIZE =
    CoAPTypes_MethodType_MethodType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MethodType_descriptor() {
    return CoAPTypes_MethodType_descriptor();
  }
  static inline const ::std::string& MethodType_Name(MethodType value) {
    return CoAPTypes_MethodType_Name(value);
  }
  static inline bool MethodType_Parse(const ::std::string& name,
      MethodType* value) {
    return CoAPTypes_MethodType_Parse(name, value);
  }

  typedef CoAPTypes_MessageType MessageType;
  static const MessageType CoAP_CON = CoAPTypes_MessageType_CoAP_CON;
  static const MessageType CoAP_NON = CoAPTypes_MessageType_CoAP_NON;
  static const MessageType CoAP_ACK = CoAPTypes_MessageType_CoAP_ACK;
  static const MessageType CoAP_RST = CoAPTypes_MessageType_CoAP_RST;
  static inline bool MessageType_IsValid(int value) {
    return CoAPTypes_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    CoAPTypes_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    CoAPTypes_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    CoAPTypes_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return CoAPTypes_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return CoAPTypes_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return CoAPTypes_MessageType_Parse(name, value);
  }

  typedef CoAPTypes_ResponseCode ResponseCode;
  static const ResponseCode CoAP_Code_None = CoAPTypes_ResponseCode_CoAP_Code_None;
  static const ResponseCode CoAP_Created = CoAPTypes_ResponseCode_CoAP_Created;
  static const ResponseCode CoAP_Deleted = CoAPTypes_ResponseCode_CoAP_Deleted;
  static const ResponseCode CoAP_Valid = CoAPTypes_ResponseCode_CoAP_Valid;
  static const ResponseCode CoAP_Changed = CoAPTypes_ResponseCode_CoAP_Changed;
  static const ResponseCode CoAP_Content = CoAPTypes_ResponseCode_CoAP_Content;
  static const ResponseCode CoAP_Bad_Request = CoAPTypes_ResponseCode_CoAP_Bad_Request;
  static const ResponseCode CoAP_Unauthorized = CoAPTypes_ResponseCode_CoAP_Unauthorized;
  static const ResponseCode CoAP_Bad_Option = CoAPTypes_ResponseCode_CoAP_Bad_Option;
  static const ResponseCode CoAP_Forbidden = CoAPTypes_ResponseCode_CoAP_Forbidden;
  static const ResponseCode CoAP_Not_Found = CoAPTypes_ResponseCode_CoAP_Not_Found;
  static const ResponseCode CoAP_Method_Not_Allowed = CoAPTypes_ResponseCode_CoAP_Method_Not_Allowed;
  static const ResponseCode CoAP_Not_Acceptable = CoAPTypes_ResponseCode_CoAP_Not_Acceptable;
  static const ResponseCode CoAP_Precondition_Failed = CoAPTypes_ResponseCode_CoAP_Precondition_Failed;
  static const ResponseCode CoAP_Request_Entity_Too_Large = CoAPTypes_ResponseCode_CoAP_Request_Entity_Too_Large;
  static const ResponseCode CoAP_Unsupported_Content_Format = CoAPTypes_ResponseCode_CoAP_Unsupported_Content_Format;
  static const ResponseCode CoAP_Internal_Server_Error = CoAPTypes_ResponseCode_CoAP_Internal_Server_Error;
  static const ResponseCode CoAP_Not_Implemented = CoAPTypes_ResponseCode_CoAP_Not_Implemented;
  static const ResponseCode CoAP_Bad_Gateway = CoAPTypes_ResponseCode_CoAP_Bad_Gateway;
  static const ResponseCode CoAP_Service_Unavailable = CoAPTypes_ResponseCode_CoAP_Service_Unavailable;
  static const ResponseCode CoAP_Gateway_Timeout = CoAPTypes_ResponseCode_CoAP_Gateway_Timeout;
  static const ResponseCode CoAP_Proxying_Not_Supported = CoAPTypes_ResponseCode_CoAP_Proxying_Not_Supported;
  static inline bool ResponseCode_IsValid(int value) {
    return CoAPTypes_ResponseCode_IsValid(value);
  }
  static const ResponseCode ResponseCode_MIN =
    CoAPTypes_ResponseCode_ResponseCode_MIN;
  static const ResponseCode ResponseCode_MAX =
    CoAPTypes_ResponseCode_ResponseCode_MAX;
  static const int ResponseCode_ARRAYSIZE =
    CoAPTypes_ResponseCode_ResponseCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResponseCode_descriptor() {
    return CoAPTypes_ResponseCode_descriptor();
  }
  static inline const ::std::string& ResponseCode_Name(ResponseCode value) {
    return CoAPTypes_ResponseCode_Name(value);
  }
  static inline bool ResponseCode_Parse(const ::std::string& name,
      ResponseCode* value) {
    return CoAPTypes_ResponseCode_Parse(name, value);
  }

  typedef CoAPTypes_OptionType OptionType;
  static const OptionType CoAP_Option_None = CoAPTypes_OptionType_CoAP_Option_None;
  static const OptionType CoAP_If_Match = CoAPTypes_OptionType_CoAP_If_Match;
  static const OptionType CoAP_Uri_Host = CoAPTypes_OptionType_CoAP_Uri_Host;
  static const OptionType CoAP_ETag = CoAPTypes_OptionType_CoAP_ETag;
  static const OptionType CoAP_If_None_Match = CoAPTypes_OptionType_CoAP_If_None_Match;
  static const OptionType CoAP_Uri_Port = CoAPTypes_OptionType_CoAP_Uri_Port;
  static const OptionType CoAP_Location_Path = CoAPTypes_OptionType_CoAP_Location_Path;
  static const OptionType CoAP_Uri_Path = CoAPTypes_OptionType_CoAP_Uri_Path;
  static const OptionType CoAP_Content_Format = CoAPTypes_OptionType_CoAP_Content_Format;
  static const OptionType CoAP_Max_Age = CoAPTypes_OptionType_CoAP_Max_Age;
  static const OptionType CoAP_Uri_Query = CoAPTypes_OptionType_CoAP_Uri_Query;
  static const OptionType CoAP_Accept = CoAPTypes_OptionType_CoAP_Accept;
  static const OptionType CoAP_Location_Query = CoAPTypes_OptionType_CoAP_Location_Query;
  static const OptionType CoAP_Proxy_Uri = CoAPTypes_OptionType_CoAP_Proxy_Uri;
  static const OptionType CoAP_Proxy_Scheme = CoAPTypes_OptionType_CoAP_Proxy_Scheme;
  static const OptionType CoAP_Size1 = CoAPTypes_OptionType_CoAP_Size1;
  static const OptionType ONEM2M_FR = CoAPTypes_OptionType_ONEM2M_FR;
  static const OptionType ONEM2M_RQI = CoAPTypes_OptionType_ONEM2M_RQI;
  static const OptionType ONEM2M_NM = CoAPTypes_OptionType_ONEM2M_NM;
  static const OptionType ONEM2M_OT = CoAPTypes_OptionType_ONEM2M_OT;
  static const OptionType ONEM2M_RQET = CoAPTypes_OptionType_ONEM2M_RQET;
  static const OptionType ONEM2M_RSET = CoAPTypes_OptionType_ONEM2M_RSET;
  static const OptionType ONEM2M_OET = CoAPTypes_OptionType_ONEM2M_OET;
  static const OptionType ONEM2M_RTURI = CoAPTypes_OptionType_ONEM2M_RTURI;
  static const OptionType ONEM2M_EC = CoAPTypes_OptionType_ONEM2M_EC;
  static const OptionType ONEM2M_RSC = CoAPTypes_OptionType_ONEM2M_RSC;
  static const OptionType ONEM2M_GID = CoAPTypes_OptionType_ONEM2M_GID;
  static inline bool OptionType_IsValid(int value) {
    return CoAPTypes_OptionType_IsValid(value);
  }
  static const OptionType OptionType_MIN =
    CoAPTypes_OptionType_OptionType_MIN;
  static const OptionType OptionType_MAX =
    CoAPTypes_OptionType_OptionType_MAX;
  static const int OptionType_ARRAYSIZE =
    CoAPTypes_OptionType_OptionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OptionType_descriptor() {
    return CoAPTypes_OptionType_descriptor();
  }
  static inline const ::std::string& OptionType_Name(OptionType value) {
    return CoAPTypes_OptionType_Name(value);
  }
  static inline bool OptionType_Parse(const ::std::string& name,
      OptionType* value) {
    return CoAPTypes_OptionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MicroWireless.OneM2M.pb.CoAPTypes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_CoAPBinding_2eproto();
  friend void protobuf_AssignDesc_CoAPBinding_2eproto();
  friend void protobuf_ShutdownFile_CoAPBinding_2eproto();

  void InitAsDefaultInstance();
  static CoAPTypes* default_instance_;
};
// -------------------------------------------------------------------

class CoAPOption : public ::google::protobuf::Message {
 public:
  CoAPOption();
  virtual ~CoAPOption();

  CoAPOption(const CoAPOption& from);

  inline CoAPOption& operator=(const CoAPOption& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CoAPOption& default_instance();

  void Swap(CoAPOption* other);

  // implements Message ----------------------------------------------

  inline CoAPOption* New() const { return New(NULL); }

  CoAPOption* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CoAPOption& from);
  void MergeFrom(const CoAPOption& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CoAPOption* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MicroWireless.OneM2M.pb.CoAPTypes.OptionType num = 1;
  void clear_num();
  static const int kNumFieldNumber = 1;
  ::MicroWireless::OneM2M::pb::CoAPTypes_OptionType num() const;
  void set_num(::MicroWireless::OneM2M::pb::CoAPTypes_OptionType value);

  // optional string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:MicroWireless.OneM2M.pb.CoAPOption)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  int num_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_CoAPBinding_2eproto();
  friend void protobuf_AssignDesc_CoAPBinding_2eproto();
  friend void protobuf_ShutdownFile_CoAPBinding_2eproto();

  void InitAsDefaultInstance();
  static CoAPOption* default_instance_;
};
// -------------------------------------------------------------------

class CoAPBinding : public ::google::protobuf::Message {
 public:
  CoAPBinding();
  virtual ~CoAPBinding();

  CoAPBinding(const CoAPBinding& from);

  inline CoAPBinding& operator=(const CoAPBinding& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CoAPBinding& default_instance();

  void Swap(CoAPBinding* other);

  // implements Message ----------------------------------------------

  inline CoAPBinding* New() const { return New(NULL); }

  CoAPBinding* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CoAPBinding& from);
  void MergeFrom(const CoAPBinding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CoAPBinding* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ver = 1;
  void clear_ver();
  static const int kVerFieldNumber = 1;
  ::google::protobuf::uint32 ver() const;
  void set_ver(::google::protobuf::uint32 value);

  // optional .MicroWireless.OneM2M.pb.CoAPTypes.MessageType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::MicroWireless::OneM2M::pb::CoAPTypes_MessageType type() const;
  void set_type(::MicroWireless::OneM2M::pb::CoAPTypes_MessageType value);

  // optional .MicroWireless.OneM2M.pb.CoAPTypes.ResponseCode code = 3;
  void clear_code();
  static const int kCodeFieldNumber = 3;
  ::MicroWireless::OneM2M::pb::CoAPTypes_ResponseCode code() const;
  void set_code(::MicroWireless::OneM2M::pb::CoAPTypes_ResponseCode value);

  // repeated .MicroWireless.OneM2M.pb.CoAPOption opt = 4;
  int opt_size() const;
  void clear_opt();
  static const int kOptFieldNumber = 4;
  const ::MicroWireless::OneM2M::pb::CoAPOption& opt(int index) const;
  ::MicroWireless::OneM2M::pb::CoAPOption* mutable_opt(int index);
  ::MicroWireless::OneM2M::pb::CoAPOption* add_opt();
  const ::google::protobuf::RepeatedPtrField< ::MicroWireless::OneM2M::pb::CoAPOption >&
      opt() const;
  ::google::protobuf::RepeatedPtrField< ::MicroWireless::OneM2M::pb::CoAPOption >*
      mutable_opt();

  // optional string payload = 5;
  void clear_payload();
  static const int kPayloadFieldNumber = 5;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  void set_payload(const char* value);
  void set_payload(const char* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // @@protoc_insertion_point(class_scope:MicroWireless.OneM2M.pb.CoAPBinding)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 ver_;
  int type_;
  ::google::protobuf::RepeatedPtrField< ::MicroWireless::OneM2M::pb::CoAPOption > opt_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  int code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_CoAPBinding_2eproto();
  friend void protobuf_AssignDesc_CoAPBinding_2eproto();
  friend void protobuf_ShutdownFile_CoAPBinding_2eproto();

  void InitAsDefaultInstance();
  static CoAPBinding* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CoAPTypes

// -------------------------------------------------------------------

// CoAPOption

// optional .MicroWireless.OneM2M.pb.CoAPTypes.OptionType num = 1;
inline void CoAPOption::clear_num() {
  num_ = 0;
}
inline ::MicroWireless::OneM2M::pb::CoAPTypes_OptionType CoAPOption::num() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.CoAPOption.num)
  return static_cast< ::MicroWireless::OneM2M::pb::CoAPTypes_OptionType >(num_);
}
inline void CoAPOption::set_num(::MicroWireless::OneM2M::pb::CoAPTypes_OptionType value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.CoAPOption.num)
}

// optional string value = 2;
inline void CoAPOption::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CoAPOption::value() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.CoAPOption.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CoAPOption::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.CoAPOption.value)
}
inline void CoAPOption::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.CoAPOption.value)
}
inline void CoAPOption::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.CoAPOption.value)
}
inline ::std::string* CoAPOption::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.CoAPOption.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CoAPOption::release_value() {
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CoAPOption::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.CoAPOption.value)
}

// -------------------------------------------------------------------

// CoAPBinding

// optional uint32 ver = 1;
inline void CoAPBinding::clear_ver() {
  ver_ = 0u;
}
inline ::google::protobuf::uint32 CoAPBinding::ver() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.CoAPBinding.ver)
  return ver_;
}
inline void CoAPBinding::set_ver(::google::protobuf::uint32 value) {
  
  ver_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.CoAPBinding.ver)
}

// optional .MicroWireless.OneM2M.pb.CoAPTypes.MessageType type = 2;
inline void CoAPBinding::clear_type() {
  type_ = 0;
}
inline ::MicroWireless::OneM2M::pb::CoAPTypes_MessageType CoAPBinding::type() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.CoAPBinding.type)
  return static_cast< ::MicroWireless::OneM2M::pb::CoAPTypes_MessageType >(type_);
}
inline void CoAPBinding::set_type(::MicroWireless::OneM2M::pb::CoAPTypes_MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.CoAPBinding.type)
}

// optional .MicroWireless.OneM2M.pb.CoAPTypes.ResponseCode code = 3;
inline void CoAPBinding::clear_code() {
  code_ = 0;
}
inline ::MicroWireless::OneM2M::pb::CoAPTypes_ResponseCode CoAPBinding::code() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.CoAPBinding.code)
  return static_cast< ::MicroWireless::OneM2M::pb::CoAPTypes_ResponseCode >(code_);
}
inline void CoAPBinding::set_code(::MicroWireless::OneM2M::pb::CoAPTypes_ResponseCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.CoAPBinding.code)
}

// repeated .MicroWireless.OneM2M.pb.CoAPOption opt = 4;
inline int CoAPBinding::opt_size() const {
  return opt_.size();
}
inline void CoAPBinding::clear_opt() {
  opt_.Clear();
}
inline const ::MicroWireless::OneM2M::pb::CoAPOption& CoAPBinding::opt(int index) const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.CoAPBinding.opt)
  return opt_.Get(index);
}
inline ::MicroWireless::OneM2M::pb::CoAPOption* CoAPBinding::mutable_opt(int index) {
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.CoAPBinding.opt)
  return opt_.Mutable(index);
}
inline ::MicroWireless::OneM2M::pb::CoAPOption* CoAPBinding::add_opt() {
  // @@protoc_insertion_point(field_add:MicroWireless.OneM2M.pb.CoAPBinding.opt)
  return opt_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MicroWireless::OneM2M::pb::CoAPOption >&
CoAPBinding::opt() const {
  // @@protoc_insertion_point(field_list:MicroWireless.OneM2M.pb.CoAPBinding.opt)
  return opt_;
}
inline ::google::protobuf::RepeatedPtrField< ::MicroWireless::OneM2M::pb::CoAPOption >*
CoAPBinding::mutable_opt() {
  // @@protoc_insertion_point(field_mutable_list:MicroWireless.OneM2M.pb.CoAPBinding.opt)
  return &opt_;
}

// optional string payload = 5;
inline void CoAPBinding::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CoAPBinding::payload() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.CoAPBinding.payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CoAPBinding::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.CoAPBinding.payload)
}
inline void CoAPBinding::set_payload(const char* value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.CoAPBinding.payload)
}
inline void CoAPBinding::set_payload(const char* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.CoAPBinding.payload)
}
inline ::std::string* CoAPBinding::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.CoAPBinding.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CoAPBinding::release_payload() {
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CoAPBinding::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.CoAPBinding.payload)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace OneM2M
}  // namespace MicroWireless

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::MicroWireless::OneM2M::pb::CoAPTypes_MethodType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MicroWireless::OneM2M::pb::CoAPTypes_MethodType>() {
  return ::MicroWireless::OneM2M::pb::CoAPTypes_MethodType_descriptor();
}
template <> struct is_proto_enum< ::MicroWireless::OneM2M::pb::CoAPTypes_MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MicroWireless::OneM2M::pb::CoAPTypes_MessageType>() {
  return ::MicroWireless::OneM2M::pb::CoAPTypes_MessageType_descriptor();
}
template <> struct is_proto_enum< ::MicroWireless::OneM2M::pb::CoAPTypes_ResponseCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MicroWireless::OneM2M::pb::CoAPTypes_ResponseCode>() {
  return ::MicroWireless::OneM2M::pb::CoAPTypes_ResponseCode_descriptor();
}
template <> struct is_proto_enum< ::MicroWireless::OneM2M::pb::CoAPTypes_OptionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MicroWireless::OneM2M::pb::CoAPTypes_OptionType>() {
  return ::MicroWireless::OneM2M::pb::CoAPTypes_OptionType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CoAPBinding_2eproto__INCLUDED
