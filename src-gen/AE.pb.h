// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AE.proto

#ifndef PROTOBUF_AE_2eproto__INCLUDED
#define PROTOBUF_AE_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace MicroWireless {
namespace OneM2M {
namespace pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_AE_2eproto();
void protobuf_AssignDesc_AE_2eproto();
void protobuf_ShutdownFile_AE_2eproto();

class AE;

// ===================================================================

class AE : public ::google::protobuf::Message {
 public:
  AE();
  virtual ~AE();

  AE(const AE& from);

  inline AE& operator=(const AE& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AE& default_instance();

  void Swap(AE* other);

  // implements Message ----------------------------------------------

  inline AE* New() const { return New(NULL); }

  AE* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AE& from);
  void MergeFrom(const AE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AE* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string apn = 100;
  void clear_apn();
  static const int kApnFieldNumber = 100;
  const ::std::string& apn() const;
  void set_apn(const ::std::string& value);
  void set_apn(const char* value);
  void set_apn(const char* value, size_t size);
  ::std::string* mutable_apn();
  ::std::string* release_apn();
  void set_allocated_apn(::std::string* apn);

  // optional string api = 101;
  void clear_api();
  static const int kApiFieldNumber = 101;
  const ::std::string& api() const;
  void set_api(const ::std::string& value);
  void set_api(const char* value);
  void set_api(const char* value, size_t size);
  ::std::string* mutable_api();
  ::std::string* release_api();
  void set_allocated_api(::std::string* api);

  // optional string aei = 102;
  void clear_aei();
  static const int kAeiFieldNumber = 102;
  const ::std::string& aei() const;
  void set_aei(const ::std::string& value);
  void set_aei(const char* value);
  void set_aei(const char* value, size_t size);
  ::std::string* mutable_aei();
  ::std::string* release_aei();
  void set_allocated_aei(::std::string* aei);

  // repeated string poa = 103;
  int poa_size() const;
  void clear_poa();
  static const int kPoaFieldNumber = 103;
  const ::std::string& poa(int index) const;
  ::std::string* mutable_poa(int index);
  void set_poa(int index, const ::std::string& value);
  void set_poa(int index, const char* value);
  void set_poa(int index, const char* value, size_t size);
  ::std::string* add_poa();
  void add_poa(const ::std::string& value);
  void add_poa(const char* value);
  void add_poa(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& poa() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_poa();

  // optional string or = 104;
  void clear_or_();
  static const int kOrFieldNumber = 104;
  const ::std::string& or_() const;
  void set_or_(const ::std::string& value);
  void set_or_(const char* value);
  void set_or_(const char* value, size_t size);
  ::std::string* mutable_or_();
  ::std::string* release_or_();
  void set_allocated_or_(::std::string* or_);

  // optional string nl = 105;
  void clear_nl();
  static const int kNlFieldNumber = 105;
  const ::std::string& nl() const;
  void set_nl(const ::std::string& value);
  void set_nl(const char* value);
  void set_nl(const char* value, size_t size);
  ::std::string* mutable_nl();
  ::std::string* release_nl();
  void set_allocated_nl(::std::string* nl);

  // @@protoc_insertion_point(class_scope:MicroWireless.OneM2M.pb.AE)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr apn_;
  ::google::protobuf::internal::ArenaStringPtr api_;
  ::google::protobuf::internal::ArenaStringPtr aei_;
  ::google::protobuf::RepeatedPtrField< ::std::string> poa_;
  ::google::protobuf::internal::ArenaStringPtr or__;
  ::google::protobuf::internal::ArenaStringPtr nl_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_AE_2eproto();
  friend void protobuf_AssignDesc_AE_2eproto();
  friend void protobuf_ShutdownFile_AE_2eproto();

  void InitAsDefaultInstance();
  static AE* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// AE

// optional string apn = 100;
inline void AE::clear_apn() {
  apn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AE::apn() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.AE.apn)
  return apn_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AE::set_apn(const ::std::string& value) {
  
  apn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.AE.apn)
}
inline void AE::set_apn(const char* value) {
  
  apn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.AE.apn)
}
inline void AE::set_apn(const char* value, size_t size) {
  
  apn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.AE.apn)
}
inline ::std::string* AE::mutable_apn() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.AE.apn)
  return apn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AE::release_apn() {
  
  return apn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AE::set_allocated_apn(::std::string* apn) {
  if (apn != NULL) {
    
  } else {
    
  }
  apn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apn);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.AE.apn)
}

// optional string api = 101;
inline void AE::clear_api() {
  api_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AE::api() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.AE.api)
  return api_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AE::set_api(const ::std::string& value) {
  
  api_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.AE.api)
}
inline void AE::set_api(const char* value) {
  
  api_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.AE.api)
}
inline void AE::set_api(const char* value, size_t size) {
  
  api_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.AE.api)
}
inline ::std::string* AE::mutable_api() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.AE.api)
  return api_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AE::release_api() {
  
  return api_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AE::set_allocated_api(::std::string* api) {
  if (api != NULL) {
    
  } else {
    
  }
  api_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), api);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.AE.api)
}

// optional string aei = 102;
inline void AE::clear_aei() {
  aei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AE::aei() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.AE.aei)
  return aei_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AE::set_aei(const ::std::string& value) {
  
  aei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.AE.aei)
}
inline void AE::set_aei(const char* value) {
  
  aei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.AE.aei)
}
inline void AE::set_aei(const char* value, size_t size) {
  
  aei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.AE.aei)
}
inline ::std::string* AE::mutable_aei() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.AE.aei)
  return aei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AE::release_aei() {
  
  return aei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AE::set_allocated_aei(::std::string* aei) {
  if (aei != NULL) {
    
  } else {
    
  }
  aei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aei);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.AE.aei)
}

// repeated string poa = 103;
inline int AE::poa_size() const {
  return poa_.size();
}
inline void AE::clear_poa() {
  poa_.Clear();
}
inline const ::std::string& AE::poa(int index) const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.AE.poa)
  return poa_.Get(index);
}
inline ::std::string* AE::mutable_poa(int index) {
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.AE.poa)
  return poa_.Mutable(index);
}
inline void AE::set_poa(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.AE.poa)
  poa_.Mutable(index)->assign(value);
}
inline void AE::set_poa(int index, const char* value) {
  poa_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.AE.poa)
}
inline void AE::set_poa(int index, const char* value, size_t size) {
  poa_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.AE.poa)
}
inline ::std::string* AE::add_poa() {
  return poa_.Add();
}
inline void AE::add_poa(const ::std::string& value) {
  poa_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MicroWireless.OneM2M.pb.AE.poa)
}
inline void AE::add_poa(const char* value) {
  poa_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MicroWireless.OneM2M.pb.AE.poa)
}
inline void AE::add_poa(const char* value, size_t size) {
  poa_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MicroWireless.OneM2M.pb.AE.poa)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AE::poa() const {
  // @@protoc_insertion_point(field_list:MicroWireless.OneM2M.pb.AE.poa)
  return poa_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AE::mutable_poa() {
  // @@protoc_insertion_point(field_mutable_list:MicroWireless.OneM2M.pb.AE.poa)
  return &poa_;
}

// optional string or = 104;
inline void AE::clear_or_() {
  or__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AE::or_() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.AE.or)
  return or__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AE::set_or_(const ::std::string& value) {
  
  or__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.AE.or)
}
inline void AE::set_or_(const char* value) {
  
  or__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.AE.or)
}
inline void AE::set_or_(const char* value, size_t size) {
  
  or__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.AE.or)
}
inline ::std::string* AE::mutable_or_() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.AE.or)
  return or__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AE::release_or_() {
  
  return or__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AE::set_allocated_or_(::std::string* or_) {
  if (or_ != NULL) {
    
  } else {
    
  }
  or__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), or_);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.AE.or)
}

// optional string nl = 105;
inline void AE::clear_nl() {
  nl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AE::nl() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.AE.nl)
  return nl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AE::set_nl(const ::std::string& value) {
  
  nl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.AE.nl)
}
inline void AE::set_nl(const char* value) {
  
  nl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.AE.nl)
}
inline void AE::set_nl(const char* value, size_t size) {
  
  nl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.AE.nl)
}
inline ::std::string* AE::mutable_nl() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.AE.nl)
  return nl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AE::release_nl() {
  
  return nl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AE::set_allocated_nl(::std::string* nl) {
  if (nl != NULL) {
    
  } else {
    
  }
  nl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nl);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.AE.nl)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace OneM2M
}  // namespace MicroWireless

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AE_2eproto__INCLUDED
