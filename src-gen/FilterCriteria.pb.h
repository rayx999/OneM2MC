// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FilterCriteria.proto

#ifndef PROTOBUF_FilterCriteria_2eproto__INCLUDED
#define PROTOBUF_FilterCriteria_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/protobuf/timestamp.pb.h"
#include "CommonTypes.pb.h"
// @@protoc_insertion_point(includes)

namespace MicroWireless {
namespace OneM2M {
namespace pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_FilterCriteria_2eproto();
void protobuf_AssignDesc_FilterCriteria_2eproto();
void protobuf_ShutdownFile_FilterCriteria_2eproto();

class FilterCriteria;

// ===================================================================

class FilterCriteria : public ::google::protobuf::Message {
 public:
  FilterCriteria();
  virtual ~FilterCriteria();

  FilterCriteria(const FilterCriteria& from);

  inline FilterCriteria& operator=(const FilterCriteria& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FilterCriteria& default_instance();

  void Swap(FilterCriteria* other);

  // implements Message ----------------------------------------------

  inline FilterCriteria* New() const { return New(NULL); }

  FilterCriteria* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FilterCriteria& from);
  void MergeFrom(const FilterCriteria& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FilterCriteria* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.protobuf.Timestamp crb = 1;
  bool has_crb() const;
  void clear_crb();
  static const int kCrbFieldNumber = 1;
  const ::google::protobuf::Timestamp& crb() const;
  ::google::protobuf::Timestamp* mutable_crb();
  ::google::protobuf::Timestamp* release_crb();
  void set_allocated_crb(::google::protobuf::Timestamp* crb);

  // optional .google.protobuf.Timestamp cra = 2;
  bool has_cra() const;
  void clear_cra();
  static const int kCraFieldNumber = 2;
  const ::google::protobuf::Timestamp& cra() const;
  ::google::protobuf::Timestamp* mutable_cra();
  ::google::protobuf::Timestamp* release_cra();
  void set_allocated_cra(::google::protobuf::Timestamp* cra);

  // optional .google.protobuf.Timestamp ms = 3;
  bool has_ms() const;
  void clear_ms();
  static const int kMsFieldNumber = 3;
  const ::google::protobuf::Timestamp& ms() const;
  ::google::protobuf::Timestamp* mutable_ms();
  ::google::protobuf::Timestamp* release_ms();
  void set_allocated_ms(::google::protobuf::Timestamp* ms);

  // optional .google.protobuf.Timestamp us = 4;
  bool has_us() const;
  void clear_us();
  static const int kUsFieldNumber = 4;
  const ::google::protobuf::Timestamp& us() const;
  ::google::protobuf::Timestamp* mutable_us();
  ::google::protobuf::Timestamp* release_us();
  void set_allocated_us(::google::protobuf::Timestamp* us);

  // optional uint32 sts = 5;
  void clear_sts();
  static const int kStsFieldNumber = 5;
  ::google::protobuf::uint32 sts() const;
  void set_sts(::google::protobuf::uint32 value);

  // optional uint32 stb = 6;
  void clear_stb();
  static const int kStbFieldNumber = 6;
  ::google::protobuf::uint32 stb() const;
  void set_stb(::google::protobuf::uint32 value);

  // optional .google.protobuf.Timestamp exb = 7;
  bool has_exb() const;
  void clear_exb();
  static const int kExbFieldNumber = 7;
  const ::google::protobuf::Timestamp& exb() const;
  ::google::protobuf::Timestamp* mutable_exb();
  ::google::protobuf::Timestamp* release_exb();
  void set_allocated_exb(::google::protobuf::Timestamp* exb);

  // optional .google.protobuf.Timestamp exa = 8;
  bool has_exa() const;
  void clear_exa();
  static const int kExaFieldNumber = 8;
  const ::google::protobuf::Timestamp& exa() const;
  ::google::protobuf::Timestamp* mutable_exa();
  ::google::protobuf::Timestamp* release_exa();
  void set_allocated_exa(::google::protobuf::Timestamp* exa);

  // repeated string lbl = 9;
  int lbl_size() const;
  void clear_lbl();
  static const int kLblFieldNumber = 9;
  const ::std::string& lbl(int index) const;
  ::std::string* mutable_lbl(int index);
  void set_lbl(int index, const ::std::string& value);
  void set_lbl(int index, const char* value);
  void set_lbl(int index, const char* value, size_t size);
  ::std::string* add_lbl();
  void add_lbl(const ::std::string& value);
  void add_lbl(const char* value);
  void add_lbl(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& lbl() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_lbl();

  // repeated .MicroWireless.OneM2M.pb.CommonTypes.ResourceType rty = 10;
  int rty_size() const;
  void clear_rty();
  static const int kRtyFieldNumber = 10;
  ::MicroWireless::OneM2M::pb::CommonTypes_ResourceType rty(int index) const;
  void set_rty(int index, ::MicroWireless::OneM2M::pb::CommonTypes_ResourceType value);
  void add_rty(::MicroWireless::OneM2M::pb::CommonTypes_ResourceType value);
  const ::google::protobuf::RepeatedField<int>& rty() const;
  ::google::protobuf::RepeatedField<int>* mutable_rty();

  // optional uint64 sza = 11;
  void clear_sza();
  static const int kSzaFieldNumber = 11;
  ::google::protobuf::uint64 sza() const;
  void set_sza(::google::protobuf::uint64 value);

  // optional uint64 szb = 12;
  void clear_szb();
  static const int kSzbFieldNumber = 12;
  ::google::protobuf::uint64 szb() const;
  void set_szb(::google::protobuf::uint64 value);

  // repeated .MicroWireless.OneM2M.pb.CommonTypes.ContentType cty = 13;
  int cty_size() const;
  void clear_cty();
  static const int kCtyFieldNumber = 13;
  ::MicroWireless::OneM2M::pb::CommonTypes_ContentType cty(int index) const;
  void set_cty(int index, ::MicroWireless::OneM2M::pb::CommonTypes_ContentType value);
  void add_cty(::MicroWireless::OneM2M::pb::CommonTypes_ContentType value);
  const ::google::protobuf::RepeatedField<int>& cty() const;
  ::google::protobuf::RepeatedField<int>* mutable_cty();

  // repeated .MicroWireless.OneM2M.pb.Attribute atr = 14;
  int atr_size() const;
  void clear_atr();
  static const int kAtrFieldNumber = 14;
  const ::MicroWireless::OneM2M::pb::Attribute& atr(int index) const;
  ::MicroWireless::OneM2M::pb::Attribute* mutable_atr(int index);
  ::MicroWireless::OneM2M::pb::Attribute* add_atr();
  const ::google::protobuf::RepeatedPtrField< ::MicroWireless::OneM2M::pb::Attribute >&
      atr() const;
  ::google::protobuf::RepeatedPtrField< ::MicroWireless::OneM2M::pb::Attribute >*
      mutable_atr();

  // optional .MicroWireless.OneM2M.pb.CommonTypes.FilterUsage fu = 15;
  void clear_fu();
  static const int kFuFieldNumber = 15;
  ::MicroWireless::OneM2M::pb::CommonTypes_FilterUsage fu() const;
  void set_fu(::MicroWireless::OneM2M::pb::CommonTypes_FilterUsage value);

  // optional uint32 lim = 16;
  void clear_lim();
  static const int kLimFieldNumber = 16;
  ::google::protobuf::uint32 lim() const;
  void set_lim(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MicroWireless.OneM2M.pb.FilterCriteria)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::Timestamp* crb_;
  ::google::protobuf::Timestamp* cra_;
  ::google::protobuf::Timestamp* ms_;
  ::google::protobuf::Timestamp* us_;
  ::google::protobuf::uint32 sts_;
  ::google::protobuf::uint32 stb_;
  ::google::protobuf::Timestamp* exb_;
  ::google::protobuf::Timestamp* exa_;
  ::google::protobuf::RepeatedPtrField< ::std::string> lbl_;
  ::google::protobuf::RepeatedField<int> rty_;
  mutable int _rty_cached_byte_size_;
  ::google::protobuf::uint64 sza_;
  ::google::protobuf::uint64 szb_;
  ::google::protobuf::RepeatedField<int> cty_;
  mutable int _cty_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::MicroWireless::OneM2M::pb::Attribute > atr_;
  int fu_;
  ::google::protobuf::uint32 lim_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_FilterCriteria_2eproto();
  friend void protobuf_AssignDesc_FilterCriteria_2eproto();
  friend void protobuf_ShutdownFile_FilterCriteria_2eproto();

  void InitAsDefaultInstance();
  static FilterCriteria* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FilterCriteria

// optional .google.protobuf.Timestamp crb = 1;
inline bool FilterCriteria::has_crb() const {
  return !_is_default_instance_ && crb_ != NULL;
}
inline void FilterCriteria::clear_crb() {
  if (GetArenaNoVirtual() == NULL && crb_ != NULL) delete crb_;
  crb_ = NULL;
}
inline const ::google::protobuf::Timestamp& FilterCriteria::crb() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.crb)
  return crb_ != NULL ? *crb_ : *default_instance_->crb_;
}
inline ::google::protobuf::Timestamp* FilterCriteria::mutable_crb() {
  
  if (crb_ == NULL) {
    crb_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.FilterCriteria.crb)
  return crb_;
}
inline ::google::protobuf::Timestamp* FilterCriteria::release_crb() {
  
  ::google::protobuf::Timestamp* temp = crb_;
  crb_ = NULL;
  return temp;
}
inline void FilterCriteria::set_allocated_crb(::google::protobuf::Timestamp* crb) {
  delete crb_;
  crb_ = crb;
  if (crb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.FilterCriteria.crb)
}

// optional .google.protobuf.Timestamp cra = 2;
inline bool FilterCriteria::has_cra() const {
  return !_is_default_instance_ && cra_ != NULL;
}
inline void FilterCriteria::clear_cra() {
  if (GetArenaNoVirtual() == NULL && cra_ != NULL) delete cra_;
  cra_ = NULL;
}
inline const ::google::protobuf::Timestamp& FilterCriteria::cra() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.cra)
  return cra_ != NULL ? *cra_ : *default_instance_->cra_;
}
inline ::google::protobuf::Timestamp* FilterCriteria::mutable_cra() {
  
  if (cra_ == NULL) {
    cra_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.FilterCriteria.cra)
  return cra_;
}
inline ::google::protobuf::Timestamp* FilterCriteria::release_cra() {
  
  ::google::protobuf::Timestamp* temp = cra_;
  cra_ = NULL;
  return temp;
}
inline void FilterCriteria::set_allocated_cra(::google::protobuf::Timestamp* cra) {
  delete cra_;
  cra_ = cra;
  if (cra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.FilterCriteria.cra)
}

// optional .google.protobuf.Timestamp ms = 3;
inline bool FilterCriteria::has_ms() const {
  return !_is_default_instance_ && ms_ != NULL;
}
inline void FilterCriteria::clear_ms() {
  if (GetArenaNoVirtual() == NULL && ms_ != NULL) delete ms_;
  ms_ = NULL;
}
inline const ::google::protobuf::Timestamp& FilterCriteria::ms() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.ms)
  return ms_ != NULL ? *ms_ : *default_instance_->ms_;
}
inline ::google::protobuf::Timestamp* FilterCriteria::mutable_ms() {
  
  if (ms_ == NULL) {
    ms_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.FilterCriteria.ms)
  return ms_;
}
inline ::google::protobuf::Timestamp* FilterCriteria::release_ms() {
  
  ::google::protobuf::Timestamp* temp = ms_;
  ms_ = NULL;
  return temp;
}
inline void FilterCriteria::set_allocated_ms(::google::protobuf::Timestamp* ms) {
  delete ms_;
  ms_ = ms;
  if (ms) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.FilterCriteria.ms)
}

// optional .google.protobuf.Timestamp us = 4;
inline bool FilterCriteria::has_us() const {
  return !_is_default_instance_ && us_ != NULL;
}
inline void FilterCriteria::clear_us() {
  if (GetArenaNoVirtual() == NULL && us_ != NULL) delete us_;
  us_ = NULL;
}
inline const ::google::protobuf::Timestamp& FilterCriteria::us() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.us)
  return us_ != NULL ? *us_ : *default_instance_->us_;
}
inline ::google::protobuf::Timestamp* FilterCriteria::mutable_us() {
  
  if (us_ == NULL) {
    us_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.FilterCriteria.us)
  return us_;
}
inline ::google::protobuf::Timestamp* FilterCriteria::release_us() {
  
  ::google::protobuf::Timestamp* temp = us_;
  us_ = NULL;
  return temp;
}
inline void FilterCriteria::set_allocated_us(::google::protobuf::Timestamp* us) {
  delete us_;
  us_ = us;
  if (us) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.FilterCriteria.us)
}

// optional uint32 sts = 5;
inline void FilterCriteria::clear_sts() {
  sts_ = 0u;
}
inline ::google::protobuf::uint32 FilterCriteria::sts() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.sts)
  return sts_;
}
inline void FilterCriteria::set_sts(::google::protobuf::uint32 value) {
  
  sts_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.FilterCriteria.sts)
}

// optional uint32 stb = 6;
inline void FilterCriteria::clear_stb() {
  stb_ = 0u;
}
inline ::google::protobuf::uint32 FilterCriteria::stb() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.stb)
  return stb_;
}
inline void FilterCriteria::set_stb(::google::protobuf::uint32 value) {
  
  stb_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.FilterCriteria.stb)
}

// optional .google.protobuf.Timestamp exb = 7;
inline bool FilterCriteria::has_exb() const {
  return !_is_default_instance_ && exb_ != NULL;
}
inline void FilterCriteria::clear_exb() {
  if (GetArenaNoVirtual() == NULL && exb_ != NULL) delete exb_;
  exb_ = NULL;
}
inline const ::google::protobuf::Timestamp& FilterCriteria::exb() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.exb)
  return exb_ != NULL ? *exb_ : *default_instance_->exb_;
}
inline ::google::protobuf::Timestamp* FilterCriteria::mutable_exb() {
  
  if (exb_ == NULL) {
    exb_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.FilterCriteria.exb)
  return exb_;
}
inline ::google::protobuf::Timestamp* FilterCriteria::release_exb() {
  
  ::google::protobuf::Timestamp* temp = exb_;
  exb_ = NULL;
  return temp;
}
inline void FilterCriteria::set_allocated_exb(::google::protobuf::Timestamp* exb) {
  delete exb_;
  exb_ = exb;
  if (exb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.FilterCriteria.exb)
}

// optional .google.protobuf.Timestamp exa = 8;
inline bool FilterCriteria::has_exa() const {
  return !_is_default_instance_ && exa_ != NULL;
}
inline void FilterCriteria::clear_exa() {
  if (GetArenaNoVirtual() == NULL && exa_ != NULL) delete exa_;
  exa_ = NULL;
}
inline const ::google::protobuf::Timestamp& FilterCriteria::exa() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.exa)
  return exa_ != NULL ? *exa_ : *default_instance_->exa_;
}
inline ::google::protobuf::Timestamp* FilterCriteria::mutable_exa() {
  
  if (exa_ == NULL) {
    exa_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.FilterCriteria.exa)
  return exa_;
}
inline ::google::protobuf::Timestamp* FilterCriteria::release_exa() {
  
  ::google::protobuf::Timestamp* temp = exa_;
  exa_ = NULL;
  return temp;
}
inline void FilterCriteria::set_allocated_exa(::google::protobuf::Timestamp* exa) {
  delete exa_;
  exa_ = exa;
  if (exa) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.FilterCriteria.exa)
}

// repeated string lbl = 9;
inline int FilterCriteria::lbl_size() const {
  return lbl_.size();
}
inline void FilterCriteria::clear_lbl() {
  lbl_.Clear();
}
inline const ::std::string& FilterCriteria::lbl(int index) const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.lbl)
  return lbl_.Get(index);
}
inline ::std::string* FilterCriteria::mutable_lbl(int index) {
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.FilterCriteria.lbl)
  return lbl_.Mutable(index);
}
inline void FilterCriteria::set_lbl(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.FilterCriteria.lbl)
  lbl_.Mutable(index)->assign(value);
}
inline void FilterCriteria::set_lbl(int index, const char* value) {
  lbl_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.FilterCriteria.lbl)
}
inline void FilterCriteria::set_lbl(int index, const char* value, size_t size) {
  lbl_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.FilterCriteria.lbl)
}
inline ::std::string* FilterCriteria::add_lbl() {
  return lbl_.Add();
}
inline void FilterCriteria::add_lbl(const ::std::string& value) {
  lbl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MicroWireless.OneM2M.pb.FilterCriteria.lbl)
}
inline void FilterCriteria::add_lbl(const char* value) {
  lbl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MicroWireless.OneM2M.pb.FilterCriteria.lbl)
}
inline void FilterCriteria::add_lbl(const char* value, size_t size) {
  lbl_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MicroWireless.OneM2M.pb.FilterCriteria.lbl)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FilterCriteria::lbl() const {
  // @@protoc_insertion_point(field_list:MicroWireless.OneM2M.pb.FilterCriteria.lbl)
  return lbl_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FilterCriteria::mutable_lbl() {
  // @@protoc_insertion_point(field_mutable_list:MicroWireless.OneM2M.pb.FilterCriteria.lbl)
  return &lbl_;
}

// repeated .MicroWireless.OneM2M.pb.CommonTypes.ResourceType rty = 10;
inline int FilterCriteria::rty_size() const {
  return rty_.size();
}
inline void FilterCriteria::clear_rty() {
  rty_.Clear();
}
inline ::MicroWireless::OneM2M::pb::CommonTypes_ResourceType FilterCriteria::rty(int index) const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.rty)
  return static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_ResourceType >(rty_.Get(index));
}
inline void FilterCriteria::set_rty(int index, ::MicroWireless::OneM2M::pb::CommonTypes_ResourceType value) {
  rty_.Set(index, value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.FilterCriteria.rty)
}
inline void FilterCriteria::add_rty(::MicroWireless::OneM2M::pb::CommonTypes_ResourceType value) {
  rty_.Add(value);
  // @@protoc_insertion_point(field_add:MicroWireless.OneM2M.pb.FilterCriteria.rty)
}
inline const ::google::protobuf::RepeatedField<int>&
FilterCriteria::rty() const {
  // @@protoc_insertion_point(field_list:MicroWireless.OneM2M.pb.FilterCriteria.rty)
  return rty_;
}
inline ::google::protobuf::RepeatedField<int>*
FilterCriteria::mutable_rty() {
  // @@protoc_insertion_point(field_mutable_list:MicroWireless.OneM2M.pb.FilterCriteria.rty)
  return &rty_;
}

// optional uint64 sza = 11;
inline void FilterCriteria::clear_sza() {
  sza_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FilterCriteria::sza() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.sza)
  return sza_;
}
inline void FilterCriteria::set_sza(::google::protobuf::uint64 value) {
  
  sza_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.FilterCriteria.sza)
}

// optional uint64 szb = 12;
inline void FilterCriteria::clear_szb() {
  szb_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FilterCriteria::szb() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.szb)
  return szb_;
}
inline void FilterCriteria::set_szb(::google::protobuf::uint64 value) {
  
  szb_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.FilterCriteria.szb)
}

// repeated .MicroWireless.OneM2M.pb.CommonTypes.ContentType cty = 13;
inline int FilterCriteria::cty_size() const {
  return cty_.size();
}
inline void FilterCriteria::clear_cty() {
  cty_.Clear();
}
inline ::MicroWireless::OneM2M::pb::CommonTypes_ContentType FilterCriteria::cty(int index) const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.cty)
  return static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_ContentType >(cty_.Get(index));
}
inline void FilterCriteria::set_cty(int index, ::MicroWireless::OneM2M::pb::CommonTypes_ContentType value) {
  cty_.Set(index, value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.FilterCriteria.cty)
}
inline void FilterCriteria::add_cty(::MicroWireless::OneM2M::pb::CommonTypes_ContentType value) {
  cty_.Add(value);
  // @@protoc_insertion_point(field_add:MicroWireless.OneM2M.pb.FilterCriteria.cty)
}
inline const ::google::protobuf::RepeatedField<int>&
FilterCriteria::cty() const {
  // @@protoc_insertion_point(field_list:MicroWireless.OneM2M.pb.FilterCriteria.cty)
  return cty_;
}
inline ::google::protobuf::RepeatedField<int>*
FilterCriteria::mutable_cty() {
  // @@protoc_insertion_point(field_mutable_list:MicroWireless.OneM2M.pb.FilterCriteria.cty)
  return &cty_;
}

// repeated .MicroWireless.OneM2M.pb.Attribute atr = 14;
inline int FilterCriteria::atr_size() const {
  return atr_.size();
}
inline void FilterCriteria::clear_atr() {
  atr_.Clear();
}
inline const ::MicroWireless::OneM2M::pb::Attribute& FilterCriteria::atr(int index) const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.atr)
  return atr_.Get(index);
}
inline ::MicroWireless::OneM2M::pb::Attribute* FilterCriteria::mutable_atr(int index) {
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.FilterCriteria.atr)
  return atr_.Mutable(index);
}
inline ::MicroWireless::OneM2M::pb::Attribute* FilterCriteria::add_atr() {
  // @@protoc_insertion_point(field_add:MicroWireless.OneM2M.pb.FilterCriteria.atr)
  return atr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MicroWireless::OneM2M::pb::Attribute >&
FilterCriteria::atr() const {
  // @@protoc_insertion_point(field_list:MicroWireless.OneM2M.pb.FilterCriteria.atr)
  return atr_;
}
inline ::google::protobuf::RepeatedPtrField< ::MicroWireless::OneM2M::pb::Attribute >*
FilterCriteria::mutable_atr() {
  // @@protoc_insertion_point(field_mutable_list:MicroWireless.OneM2M.pb.FilterCriteria.atr)
  return &atr_;
}

// optional .MicroWireless.OneM2M.pb.CommonTypes.FilterUsage fu = 15;
inline void FilterCriteria::clear_fu() {
  fu_ = 0;
}
inline ::MicroWireless::OneM2M::pb::CommonTypes_FilterUsage FilterCriteria::fu() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.fu)
  return static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_FilterUsage >(fu_);
}
inline void FilterCriteria::set_fu(::MicroWireless::OneM2M::pb::CommonTypes_FilterUsage value) {
  
  fu_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.FilterCriteria.fu)
}

// optional uint32 lim = 16;
inline void FilterCriteria::clear_lim() {
  lim_ = 0u;
}
inline ::google::protobuf::uint32 FilterCriteria::lim() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.lim)
  return lim_;
}
inline void FilterCriteria::set_lim(::google::protobuf::uint32 value) {
  
  lim_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.FilterCriteria.lim)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace OneM2M
}  // namespace MicroWireless

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FilterCriteria_2eproto__INCLUDED
