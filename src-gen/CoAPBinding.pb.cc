// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CoAPBinding.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CoAPBinding.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MicroWireless {
namespace OneM2M {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* CoAPTypes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoAPTypes_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CoAPTypes_MethodType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CoAPTypes_MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CoAPTypes_ResponseCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CoAPTypes_OptionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CoAPOption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoAPOption_reflection_ = NULL;
const ::google::protobuf::Descriptor* CoAPBinding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoAPBinding_reflection_ = NULL;
struct CoAPBindingOneofInstance {
  int method_;
  int code_;
}* CoAPBinding_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_CoAPBinding_2eproto() {
  protobuf_AddDesc_CoAPBinding_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CoAPBinding.proto");
  GOOGLE_CHECK(file != NULL);
  CoAPTypes_descriptor_ = file->message_type(0);
  static const int CoAPTypes_offsets_[1] = {
  };
  CoAPTypes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CoAPTypes_descriptor_,
      CoAPTypes::default_instance_,
      CoAPTypes_offsets_,
      -1,
      -1,
      -1,
      sizeof(CoAPTypes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoAPTypes, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoAPTypes, _is_default_instance_));
  CoAPTypes_MethodType_descriptor_ = CoAPTypes_descriptor_->enum_type(0);
  CoAPTypes_MessageType_descriptor_ = CoAPTypes_descriptor_->enum_type(1);
  CoAPTypes_ResponseCode_descriptor_ = CoAPTypes_descriptor_->enum_type(2);
  CoAPTypes_OptionType_descriptor_ = CoAPTypes_descriptor_->enum_type(3);
  CoAPOption_descriptor_ = file->message_type(1);
  static const int CoAPOption_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoAPOption, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoAPOption, value_),
  };
  CoAPOption_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CoAPOption_descriptor_,
      CoAPOption::default_instance_,
      CoAPOption_offsets_,
      -1,
      -1,
      -1,
      sizeof(CoAPOption),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoAPOption, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoAPOption, _is_default_instance_));
  CoAPBinding_descriptor_ = file->message_type(2);
  static const int CoAPBinding_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoAPBinding, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoAPBinding, type_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CoAPBinding_default_oneof_instance_, method_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CoAPBinding_default_oneof_instance_, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoAPBinding, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoAPBinding, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoAPBinding, MethodOrCode_),
  };
  CoAPBinding_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CoAPBinding_descriptor_,
      CoAPBinding::default_instance_,
      CoAPBinding_offsets_,
      -1,
      -1,
      -1,
      CoAPBinding_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoAPBinding, _oneof_case_[0]),
      sizeof(CoAPBinding),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoAPBinding, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoAPBinding, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CoAPBinding_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CoAPTypes_descriptor_, &CoAPTypes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CoAPOption_descriptor_, &CoAPOption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CoAPBinding_descriptor_, &CoAPBinding::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CoAPBinding_2eproto() {
  delete CoAPTypes::default_instance_;
  delete CoAPTypes_reflection_;
  delete CoAPOption::default_instance_;
  delete CoAPOption_reflection_;
  delete CoAPBinding::default_instance_;
  delete CoAPBinding_default_oneof_instance_;
  delete CoAPBinding_reflection_;
}

void protobuf_AddDesc_CoAPBinding_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021CoAPBinding.proto\022\027MicroWireless.OneM2"
    "M.pb\"\202\n\n\tCoAPTypes\"^\n\nMethodType\022\024\n\020CoAP"
    "_METHOD_NONE\020\000\022\014\n\010CoAP_GET\020\001\022\r\n\tCoAP_POS"
    "T\020\002\022\014\n\010CoAP_PUT\020\003\022\017\n\013CoAP_DELETE\020\004\"E\n\013Me"
    "ssageType\022\014\n\010CoAP_CON\020\000\022\014\n\010CoAP_NON\020\001\022\014\n"
    "\010CoAP_ACK\020\002\022\014\n\010CoAP_RST\020\003\"\276\004\n\014ResponseCo"
    "de\022\022\n\016CoAP_Code_None\020\000\022\021\n\014CoAP_Created\020\311"
    "\001\022\021\n\014CoAP_Deleted\020\312\001\022\017\n\nCoAP_Valid\020\313\001\022\021\n"
    "\014CoAP_Changed\020\314\001\022\021\n\014CoAP_Content\020\315\001\022\025\n\020C"
    "oAP_Bad_Request\020\220\003\022\026\n\021CoAP_Unauthorized\020"
    "\221\003\022\024\n\017CoAP_Bad_Option\020\222\003\022\023\n\016CoAP_Forbidd"
    "en\020\223\003\022\023\n\016CoAP_Not_Found\020\224\003\022\034\n\027CoAP_Metho"
    "d_Not_Allowed\020\225\003\022\030\n\023CoAP_Not_Acceptable\020"
    "\226\003\022\035\n\030CoAP_Precondition_Failed\020\234\003\022\"\n\035CoA"
    "P_Request_Entity_Too_Large\020\235\003\022$\n\037CoAP_Un"
    "supported_Content_Format\020\237\003\022\037\n\032CoAP_Inte"
    "rnal_Server_Error\020\364\003\022\031\n\024CoAP_Not_Impleme"
    "nted\020\365\003\022\025\n\020CoAP_Bad_Gateway\020\366\003\022\035\n\030CoAP_S"
    "ervice_Unavailable\020\367\003\022\031\n\024CoAP_Gateway_Ti"
    "meout\020\370\003\022 \n\033CoAP_Proxying_Not_Supported\020"
    "\371\003\"\214\004\n\nOptionType\022\024\n\020CoAP_Option_None\020\000\022"
    "\021\n\rCoAP_If_Match\020\001\022\021\n\rCoAP_Uri_Host\020\003\022\r\n"
    "\tCoAP_ETag\020\004\022\026\n\022CoAP_If_None_Match\020\005\022\021\n\r"
    "CoAP_Uri_Port\020\007\022\026\n\022CoAP_Location_Path\020\010\022"
    "\021\n\rCoAP_Uri_Path\020\013\022\027\n\023CoAP_Content_Forma"
    "t\020\014\022\020\n\014CoAP_Max_Age\020\016\022\022\n\016CoAP_Uri_Query\020"
    "\017\022\017\n\013CoAP_Accept\020\021\022\027\n\023CoAP_Location_Quer"
    "y\020\024\022\022\n\016CoAP_Proxy_Uri\020#\022\025\n\021CoAP_Proxy_Sc"
    "heme\020\'\022\016\n\nCoAP_Size1\020<\022\016\n\tONEM2M_FR\020\200\002\022\017"
    "\n\nONEM2M_RQI\020\201\002\022\016\n\tONEM2M_NM\020\202\002\022\016\n\tONEM2"
    "M_OT\020\203\002\022\020\n\013ONEM2M_RQET\020\204\002\022\020\n\013ONEM2M_RSET"
    "\020\205\002\022\017\n\nONEM2M_OET\020\206\002\022\021\n\014ONEM2M_RTURI\020\207\002\022"
    "\016\n\tONEM2M_EC\020\210\002\022\017\n\nONEM2M_RSC\020\211\002\022\017\n\nONEM"
    "2M_GID\020\212\002\"W\n\nCoAPOption\022:\n\003num\030\001 \001(\0162-.M"
    "icroWireless.OneM2M.pb.CoAPTypes.OptionT"
    "ype\022\r\n\005value\030\002 \001(\t\"\255\002\n\013CoAPBinding\022\013\n\003ve"
    "r\030\001 \001(\r\022<\n\004type\030\002 \001(\0162..MicroWireless.On"
    "eM2M.pb.CoAPTypes.MessageType\022\?\n\006method\030"
    "\003 \001(\0162-.MicroWireless.OneM2M.pb.CoAPType"
    "s.MethodTypeH\000\022\?\n\004code\030\004 \001(\0162/.MicroWire"
    "less.OneM2M.pb.CoAPTypes.ResponseCodeH\000\022"
    "0\n\003opt\030\005 \003(\0132#.MicroWireless.OneM2M.pb.C"
    "oAPOption\022\017\n\007payload\030\006 \001(\tB\016\n\014MethodOrCo"
    "deb\006proto3", 1730);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CoAPBinding.proto", &protobuf_RegisterTypes);
  CoAPTypes::default_instance_ = new CoAPTypes();
  CoAPOption::default_instance_ = new CoAPOption();
  CoAPBinding::default_instance_ = new CoAPBinding();
  CoAPBinding_default_oneof_instance_ = new CoAPBindingOneofInstance();
  CoAPTypes::default_instance_->InitAsDefaultInstance();
  CoAPOption::default_instance_->InitAsDefaultInstance();
  CoAPBinding::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CoAPBinding_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CoAPBinding_2eproto {
  StaticDescriptorInitializer_CoAPBinding_2eproto() {
    protobuf_AddDesc_CoAPBinding_2eproto();
  }
} static_descriptor_initializer_CoAPBinding_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* CoAPTypes_MethodType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoAPTypes_MethodType_descriptor_;
}
bool CoAPTypes_MethodType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CoAPTypes_MethodType CoAPTypes::CoAP_METHOD_NONE;
const CoAPTypes_MethodType CoAPTypes::CoAP_GET;
const CoAPTypes_MethodType CoAPTypes::CoAP_POST;
const CoAPTypes_MethodType CoAPTypes::CoAP_PUT;
const CoAPTypes_MethodType CoAPTypes::CoAP_DELETE;
const CoAPTypes_MethodType CoAPTypes::MethodType_MIN;
const CoAPTypes_MethodType CoAPTypes::MethodType_MAX;
const int CoAPTypes::MethodType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CoAPTypes_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoAPTypes_MessageType_descriptor_;
}
bool CoAPTypes_MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CoAPTypes_MessageType CoAPTypes::CoAP_CON;
const CoAPTypes_MessageType CoAPTypes::CoAP_NON;
const CoAPTypes_MessageType CoAPTypes::CoAP_ACK;
const CoAPTypes_MessageType CoAPTypes::CoAP_RST;
const CoAPTypes_MessageType CoAPTypes::MessageType_MIN;
const CoAPTypes_MessageType CoAPTypes::MessageType_MAX;
const int CoAPTypes::MessageType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CoAPTypes_ResponseCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoAPTypes_ResponseCode_descriptor_;
}
bool CoAPTypes_ResponseCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 412:
    case 413:
    case 415:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CoAPTypes_ResponseCode CoAPTypes::CoAP_Code_None;
const CoAPTypes_ResponseCode CoAPTypes::CoAP_Created;
const CoAPTypes_ResponseCode CoAPTypes::CoAP_Deleted;
const CoAPTypes_ResponseCode CoAPTypes::CoAP_Valid;
const CoAPTypes_ResponseCode CoAPTypes::CoAP_Changed;
const CoAPTypes_ResponseCode CoAPTypes::CoAP_Content;
const CoAPTypes_ResponseCode CoAPTypes::CoAP_Bad_Request;
const CoAPTypes_ResponseCode CoAPTypes::CoAP_Unauthorized;
const CoAPTypes_ResponseCode CoAPTypes::CoAP_Bad_Option;
const CoAPTypes_ResponseCode CoAPTypes::CoAP_Forbidden;
const CoAPTypes_ResponseCode CoAPTypes::CoAP_Not_Found;
const CoAPTypes_ResponseCode CoAPTypes::CoAP_Method_Not_Allowed;
const CoAPTypes_ResponseCode CoAPTypes::CoAP_Not_Acceptable;
const CoAPTypes_ResponseCode CoAPTypes::CoAP_Precondition_Failed;
const CoAPTypes_ResponseCode CoAPTypes::CoAP_Request_Entity_Too_Large;
const CoAPTypes_ResponseCode CoAPTypes::CoAP_Unsupported_Content_Format;
const CoAPTypes_ResponseCode CoAPTypes::CoAP_Internal_Server_Error;
const CoAPTypes_ResponseCode CoAPTypes::CoAP_Not_Implemented;
const CoAPTypes_ResponseCode CoAPTypes::CoAP_Bad_Gateway;
const CoAPTypes_ResponseCode CoAPTypes::CoAP_Service_Unavailable;
const CoAPTypes_ResponseCode CoAPTypes::CoAP_Gateway_Timeout;
const CoAPTypes_ResponseCode CoAPTypes::CoAP_Proxying_Not_Supported;
const CoAPTypes_ResponseCode CoAPTypes::ResponseCode_MIN;
const CoAPTypes_ResponseCode CoAPTypes::ResponseCode_MAX;
const int CoAPTypes::ResponseCode_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CoAPTypes_OptionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoAPTypes_OptionType_descriptor_;
}
bool CoAPTypes_OptionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 11:
    case 12:
    case 14:
    case 15:
    case 17:
    case 20:
    case 35:
    case 39:
    case 60:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CoAPTypes_OptionType CoAPTypes::CoAP_Option_None;
const CoAPTypes_OptionType CoAPTypes::CoAP_If_Match;
const CoAPTypes_OptionType CoAPTypes::CoAP_Uri_Host;
const CoAPTypes_OptionType CoAPTypes::CoAP_ETag;
const CoAPTypes_OptionType CoAPTypes::CoAP_If_None_Match;
const CoAPTypes_OptionType CoAPTypes::CoAP_Uri_Port;
const CoAPTypes_OptionType CoAPTypes::CoAP_Location_Path;
const CoAPTypes_OptionType CoAPTypes::CoAP_Uri_Path;
const CoAPTypes_OptionType CoAPTypes::CoAP_Content_Format;
const CoAPTypes_OptionType CoAPTypes::CoAP_Max_Age;
const CoAPTypes_OptionType CoAPTypes::CoAP_Uri_Query;
const CoAPTypes_OptionType CoAPTypes::CoAP_Accept;
const CoAPTypes_OptionType CoAPTypes::CoAP_Location_Query;
const CoAPTypes_OptionType CoAPTypes::CoAP_Proxy_Uri;
const CoAPTypes_OptionType CoAPTypes::CoAP_Proxy_Scheme;
const CoAPTypes_OptionType CoAPTypes::CoAP_Size1;
const CoAPTypes_OptionType CoAPTypes::ONEM2M_FR;
const CoAPTypes_OptionType CoAPTypes::ONEM2M_RQI;
const CoAPTypes_OptionType CoAPTypes::ONEM2M_NM;
const CoAPTypes_OptionType CoAPTypes::ONEM2M_OT;
const CoAPTypes_OptionType CoAPTypes::ONEM2M_RQET;
const CoAPTypes_OptionType CoAPTypes::ONEM2M_RSET;
const CoAPTypes_OptionType CoAPTypes::ONEM2M_OET;
const CoAPTypes_OptionType CoAPTypes::ONEM2M_RTURI;
const CoAPTypes_OptionType CoAPTypes::ONEM2M_EC;
const CoAPTypes_OptionType CoAPTypes::ONEM2M_RSC;
const CoAPTypes_OptionType CoAPTypes::ONEM2M_GID;
const CoAPTypes_OptionType CoAPTypes::OptionType_MIN;
const CoAPTypes_OptionType CoAPTypes::OptionType_MAX;
const int CoAPTypes::OptionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

CoAPTypes::CoAPTypes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MicroWireless.OneM2M.pb.CoAPTypes)
}

void CoAPTypes::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CoAPTypes::CoAPTypes(const CoAPTypes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MicroWireless.OneM2M.pb.CoAPTypes)
}

void CoAPTypes::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CoAPTypes::~CoAPTypes() {
  // @@protoc_insertion_point(destructor:MicroWireless.OneM2M.pb.CoAPTypes)
  SharedDtor();
}

void CoAPTypes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CoAPTypes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoAPTypes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoAPTypes_descriptor_;
}

const CoAPTypes& CoAPTypes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CoAPBinding_2eproto();
  return *default_instance_;
}

CoAPTypes* CoAPTypes::default_instance_ = NULL;

CoAPTypes* CoAPTypes::New(::google::protobuf::Arena* arena) const {
  CoAPTypes* n = new CoAPTypes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CoAPTypes::Clear() {
}

bool CoAPTypes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MicroWireless.OneM2M.pb.CoAPTypes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:MicroWireless.OneM2M.pb.CoAPTypes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MicroWireless.OneM2M.pb.CoAPTypes)
  return false;
#undef DO_
}

void CoAPTypes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MicroWireless.OneM2M.pb.CoAPTypes)
  // @@protoc_insertion_point(serialize_end:MicroWireless.OneM2M.pb.CoAPTypes)
}

::google::protobuf::uint8* CoAPTypes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MicroWireless.OneM2M.pb.CoAPTypes)
  // @@protoc_insertion_point(serialize_to_array_end:MicroWireless.OneM2M.pb.CoAPTypes)
  return target;
}

int CoAPTypes::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoAPTypes::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CoAPTypes* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CoAPTypes>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CoAPTypes::MergeFrom(const CoAPTypes& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void CoAPTypes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoAPTypes::CopyFrom(const CoAPTypes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoAPTypes::IsInitialized() const {

  return true;
}

void CoAPTypes::Swap(CoAPTypes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoAPTypes::InternalSwap(CoAPTypes* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CoAPTypes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoAPTypes_descriptor_;
  metadata.reflection = CoAPTypes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CoAPTypes

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CoAPOption::kNumFieldNumber;
const int CoAPOption::kValueFieldNumber;
#endif  // !_MSC_VER

CoAPOption::CoAPOption()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MicroWireless.OneM2M.pb.CoAPOption)
}

void CoAPOption::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CoAPOption::CoAPOption(const CoAPOption& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MicroWireless.OneM2M.pb.CoAPOption)
}

void CoAPOption::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CoAPOption::~CoAPOption() {
  // @@protoc_insertion_point(destructor:MicroWireless.OneM2M.pb.CoAPOption)
  SharedDtor();
}

void CoAPOption::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CoAPOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoAPOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoAPOption_descriptor_;
}

const CoAPOption& CoAPOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CoAPBinding_2eproto();
  return *default_instance_;
}

CoAPOption* CoAPOption::default_instance_ = NULL;

CoAPOption* CoAPOption::New(::google::protobuf::Arena* arena) const {
  CoAPOption* n = new CoAPOption;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CoAPOption::Clear() {
  num_ = 0;
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CoAPOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MicroWireless.OneM2M.pb.CoAPOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MicroWireless.OneM2M.pb.CoAPTypes.OptionType num = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_num(static_cast< ::MicroWireless::OneM2M::pb::CoAPTypes_OptionType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.CoAPOption.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MicroWireless.OneM2M.pb.CoAPOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MicroWireless.OneM2M.pb.CoAPOption)
  return false;
#undef DO_
}

void CoAPOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MicroWireless.OneM2M.pb.CoAPOption)
  // optional .MicroWireless.OneM2M.pb.CoAPTypes.OptionType num = 1;
  if (this->num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->num(), output);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.CoAPOption.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:MicroWireless.OneM2M.pb.CoAPOption)
}

::google::protobuf::uint8* CoAPOption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MicroWireless.OneM2M.pb.CoAPOption)
  // optional .MicroWireless.OneM2M.pb.CoAPTypes.OptionType num = 1;
  if (this->num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->num(), target);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.CoAPOption.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MicroWireless.OneM2M.pb.CoAPOption)
  return target;
}

int CoAPOption::ByteSize() const {
  int total_size = 0;

  // optional .MicroWireless.OneM2M.pb.CoAPTypes.OptionType num = 1;
  if (this->num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->num());
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoAPOption::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CoAPOption* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CoAPOption>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CoAPOption::MergeFrom(const CoAPOption& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.num() != 0) {
    set_num(from.num());
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void CoAPOption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoAPOption::CopyFrom(const CoAPOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoAPOption::IsInitialized() const {

  return true;
}

void CoAPOption::Swap(CoAPOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoAPOption::InternalSwap(CoAPOption* other) {
  std::swap(num_, other->num_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CoAPOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoAPOption_descriptor_;
  metadata.reflection = CoAPOption_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CoAPOption

// optional .MicroWireless.OneM2M.pb.CoAPTypes.OptionType num = 1;
void CoAPOption::clear_num() {
  num_ = 0;
}
 ::MicroWireless::OneM2M::pb::CoAPTypes_OptionType CoAPOption::num() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.CoAPOption.num)
  return static_cast< ::MicroWireless::OneM2M::pb::CoAPTypes_OptionType >(num_);
}
 void CoAPOption::set_num(::MicroWireless::OneM2M::pb::CoAPTypes_OptionType value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.CoAPOption.num)
}

// optional string value = 2;
void CoAPOption::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CoAPOption::value() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.CoAPOption.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CoAPOption::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.CoAPOption.value)
}
 void CoAPOption::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.CoAPOption.value)
}
 void CoAPOption::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.CoAPOption.value)
}
 ::std::string* CoAPOption::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.CoAPOption.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CoAPOption::release_value() {
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CoAPOption::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.CoAPOption.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CoAPBinding::kVerFieldNumber;
const int CoAPBinding::kTypeFieldNumber;
const int CoAPBinding::kMethodFieldNumber;
const int CoAPBinding::kCodeFieldNumber;
const int CoAPBinding::kOptFieldNumber;
const int CoAPBinding::kPayloadFieldNumber;
#endif  // !_MSC_VER

CoAPBinding::CoAPBinding()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MicroWireless.OneM2M.pb.CoAPBinding)
}

void CoAPBinding::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  CoAPBinding_default_oneof_instance_->method_ = 0;
  CoAPBinding_default_oneof_instance_->code_ = 0;
}

CoAPBinding::CoAPBinding(const CoAPBinding& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MicroWireless.OneM2M.pb.CoAPBinding)
}

void CoAPBinding::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ver_ = 0u;
  type_ = 0;
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_MethodOrCode();
}

CoAPBinding::~CoAPBinding() {
  // @@protoc_insertion_point(destructor:MicroWireless.OneM2M.pb.CoAPBinding)
  SharedDtor();
}

void CoAPBinding::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_MethodOrCode()) {
    clear_MethodOrCode();
  }
  if (this != default_instance_) {
  }
}

void CoAPBinding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoAPBinding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoAPBinding_descriptor_;
}

const CoAPBinding& CoAPBinding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CoAPBinding_2eproto();
  return *default_instance_;
}

CoAPBinding* CoAPBinding::default_instance_ = NULL;

CoAPBinding* CoAPBinding::New(::google::protobuf::Arena* arena) const {
  CoAPBinding* n = new CoAPBinding;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CoAPBinding::clear_MethodOrCode() {
  switch(MethodOrCode_case()) {
    case kMethod: {
      // No need to clear
      break;
    }
    case kCode: {
      // No need to clear
      break;
    }
    case METHODORCODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = METHODORCODE_NOT_SET;
}


void CoAPBinding::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CoAPBinding*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ver_, type_);
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  opt_.Clear();
  clear_MethodOrCode();
}

bool CoAPBinding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MicroWireless.OneM2M.pb.CoAPBinding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ver = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .MicroWireless.OneM2M.pb.CoAPTypes.MessageType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::MicroWireless::OneM2M::pb::CoAPTypes_MessageType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_method;
        break;
      }

      // optional .MicroWireless.OneM2M.pb.CoAPTypes.MethodType method = 3;
      case 3: {
        if (tag == 24) {
         parse_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_method(static_cast< ::MicroWireless::OneM2M::pb::CoAPTypes_MethodType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_code;
        break;
      }

      // optional .MicroWireless.OneM2M.pb.CoAPTypes.ResponseCode code = 4;
      case 4: {
        if (tag == 32) {
         parse_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::MicroWireless::OneM2M::pb::CoAPTypes_ResponseCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_opt;
        break;
      }

      // repeated .MicroWireless.OneM2M.pb.CoAPOption opt = 5;
      case 5: {
        if (tag == 42) {
         parse_opt:
          DO_(input->IncrementRecursionDepth());
         parse_loop_opt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_opt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_opt;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_payload;
        break;
      }

      // optional string payload = 6;
      case 6: {
        if (tag == 50) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payload()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->payload().data(), this->payload().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.CoAPBinding.payload");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MicroWireless.OneM2M.pb.CoAPBinding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MicroWireless.OneM2M.pb.CoAPBinding)
  return false;
#undef DO_
}

void CoAPBinding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MicroWireless.OneM2M.pb.CoAPBinding)
  // optional uint32 ver = 1;
  if (this->ver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ver(), output);
  }

  // optional .MicroWireless.OneM2M.pb.CoAPTypes.MessageType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .MicroWireless.OneM2M.pb.CoAPTypes.MethodType method = 3;
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->method(), output);
  }

  // optional .MicroWireless.OneM2M.pb.CoAPTypes.ResponseCode code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->code(), output);
  }

  // repeated .MicroWireless.OneM2M.pb.CoAPOption opt = 5;
  for (unsigned int i = 0, n = this->opt_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->opt(i), output);
  }

  // optional string payload = 6;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->payload().data(), this->payload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.CoAPBinding.payload");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->payload(), output);
  }

  // @@protoc_insertion_point(serialize_end:MicroWireless.OneM2M.pb.CoAPBinding)
}

::google::protobuf::uint8* CoAPBinding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MicroWireless.OneM2M.pb.CoAPBinding)
  // optional uint32 ver = 1;
  if (this->ver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ver(), target);
  }

  // optional .MicroWireless.OneM2M.pb.CoAPTypes.MessageType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .MicroWireless.OneM2M.pb.CoAPTypes.MethodType method = 3;
  if (has_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->method(), target);
  }

  // optional .MicroWireless.OneM2M.pb.CoAPTypes.ResponseCode code = 4;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->code(), target);
  }

  // repeated .MicroWireless.OneM2M.pb.CoAPOption opt = 5;
  for (unsigned int i = 0, n = this->opt_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->opt(i), target);
  }

  // optional string payload = 6;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->payload().data(), this->payload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.CoAPBinding.payload");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->payload(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MicroWireless.OneM2M.pb.CoAPBinding)
  return target;
}

int CoAPBinding::ByteSize() const {
  int total_size = 0;

  // optional uint32 ver = 1;
  if (this->ver() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ver());
  }

  // optional .MicroWireless.OneM2M.pb.CoAPTypes.MessageType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string payload = 6;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->payload());
  }

  // repeated .MicroWireless.OneM2M.pb.CoAPOption opt = 5;
  total_size += 1 * this->opt_size();
  for (int i = 0; i < this->opt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opt(i));
  }

  switch (MethodOrCode_case()) {
    // optional .MicroWireless.OneM2M.pb.CoAPTypes.MethodType method = 3;
    case kMethod: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
      break;
    }
    // optional .MicroWireless.OneM2M.pb.CoAPTypes.ResponseCode code = 4;
    case kCode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
      break;
    }
    case METHODORCODE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoAPBinding::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CoAPBinding* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CoAPBinding>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CoAPBinding::MergeFrom(const CoAPBinding& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  opt_.MergeFrom(from.opt_);
  switch (from.MethodOrCode_case()) {
    case kMethod: {
      set_method(from.method());
      break;
    }
    case kCode: {
      set_code(from.code());
      break;
    }
    case METHODORCODE_NOT_SET: {
      break;
    }
  }
  if (from.ver() != 0) {
    set_ver(from.ver());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
}

void CoAPBinding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoAPBinding::CopyFrom(const CoAPBinding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoAPBinding::IsInitialized() const {

  return true;
}

void CoAPBinding::Swap(CoAPBinding* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoAPBinding::InternalSwap(CoAPBinding* other) {
  std::swap(ver_, other->ver_);
  std::swap(type_, other->type_);
  opt_.UnsafeArenaSwap(&other->opt_);
  payload_.Swap(&other->payload_);
  std::swap(MethodOrCode_, other->MethodOrCode_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CoAPBinding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoAPBinding_descriptor_;
  metadata.reflection = CoAPBinding_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CoAPBinding

// optional uint32 ver = 1;
void CoAPBinding::clear_ver() {
  ver_ = 0u;
}
 ::google::protobuf::uint32 CoAPBinding::ver() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.CoAPBinding.ver)
  return ver_;
}
 void CoAPBinding::set_ver(::google::protobuf::uint32 value) {
  
  ver_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.CoAPBinding.ver)
}

// optional .MicroWireless.OneM2M.pb.CoAPTypes.MessageType type = 2;
void CoAPBinding::clear_type() {
  type_ = 0;
}
 ::MicroWireless::OneM2M::pb::CoAPTypes_MessageType CoAPBinding::type() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.CoAPBinding.type)
  return static_cast< ::MicroWireless::OneM2M::pb::CoAPTypes_MessageType >(type_);
}
 void CoAPBinding::set_type(::MicroWireless::OneM2M::pb::CoAPTypes_MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.CoAPBinding.type)
}

// optional .MicroWireless.OneM2M.pb.CoAPTypes.MethodType method = 3;
bool CoAPBinding::has_method() const {
  return MethodOrCode_case() == kMethod;
}
void CoAPBinding::set_has_method() {
  _oneof_case_[0] = kMethod;
}
void CoAPBinding::clear_method() {
  if (has_method()) {
    MethodOrCode_.method_ = 0;
    clear_has_MethodOrCode();
  }
}
 ::MicroWireless::OneM2M::pb::CoAPTypes_MethodType CoAPBinding::method() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.CoAPBinding.method)
  if (has_method()) {
    return static_cast< ::MicroWireless::OneM2M::pb::CoAPTypes_MethodType >(MethodOrCode_.method_);
  }
  return static_cast< ::MicroWireless::OneM2M::pb::CoAPTypes_MethodType >(0);
}
 void CoAPBinding::set_method(::MicroWireless::OneM2M::pb::CoAPTypes_MethodType value) {
  if (!has_method()) {
    clear_MethodOrCode();
    set_has_method();
  }
  MethodOrCode_.method_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.CoAPBinding.method)
}

// optional .MicroWireless.OneM2M.pb.CoAPTypes.ResponseCode code = 4;
bool CoAPBinding::has_code() const {
  return MethodOrCode_case() == kCode;
}
void CoAPBinding::set_has_code() {
  _oneof_case_[0] = kCode;
}
void CoAPBinding::clear_code() {
  if (has_code()) {
    MethodOrCode_.code_ = 0;
    clear_has_MethodOrCode();
  }
}
 ::MicroWireless::OneM2M::pb::CoAPTypes_ResponseCode CoAPBinding::code() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.CoAPBinding.code)
  if (has_code()) {
    return static_cast< ::MicroWireless::OneM2M::pb::CoAPTypes_ResponseCode >(MethodOrCode_.code_);
  }
  return static_cast< ::MicroWireless::OneM2M::pb::CoAPTypes_ResponseCode >(0);
}
 void CoAPBinding::set_code(::MicroWireless::OneM2M::pb::CoAPTypes_ResponseCode value) {
  if (!has_code()) {
    clear_MethodOrCode();
    set_has_code();
  }
  MethodOrCode_.code_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.CoAPBinding.code)
}

// repeated .MicroWireless.OneM2M.pb.CoAPOption opt = 5;
int CoAPBinding::opt_size() const {
  return opt_.size();
}
void CoAPBinding::clear_opt() {
  opt_.Clear();
}
 const ::MicroWireless::OneM2M::pb::CoAPOption& CoAPBinding::opt(int index) const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.CoAPBinding.opt)
  return opt_.Get(index);
}
 ::MicroWireless::OneM2M::pb::CoAPOption* CoAPBinding::mutable_opt(int index) {
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.CoAPBinding.opt)
  return opt_.Mutable(index);
}
 ::MicroWireless::OneM2M::pb::CoAPOption* CoAPBinding::add_opt() {
  // @@protoc_insertion_point(field_add:MicroWireless.OneM2M.pb.CoAPBinding.opt)
  return opt_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::MicroWireless::OneM2M::pb::CoAPOption >&
CoAPBinding::opt() const {
  // @@protoc_insertion_point(field_list:MicroWireless.OneM2M.pb.CoAPBinding.opt)
  return opt_;
}
 ::google::protobuf::RepeatedPtrField< ::MicroWireless::OneM2M::pb::CoAPOption >*
CoAPBinding::mutable_opt() {
  // @@protoc_insertion_point(field_mutable_list:MicroWireless.OneM2M.pb.CoAPBinding.opt)
  return &opt_;
}

// optional string payload = 6;
void CoAPBinding::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CoAPBinding::payload() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.CoAPBinding.payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CoAPBinding::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.CoAPBinding.payload)
}
 void CoAPBinding::set_payload(const char* value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.CoAPBinding.payload)
}
 void CoAPBinding::set_payload(const char* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.CoAPBinding.payload)
}
 ::std::string* CoAPBinding::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.CoAPBinding.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CoAPBinding::release_payload() {
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CoAPBinding::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.CoAPBinding.payload)
}

bool CoAPBinding::has_MethodOrCode() const {
  return MethodOrCode_case() != METHODORCODE_NOT_SET;
}
void CoAPBinding::clear_has_MethodOrCode() {
  _oneof_case_[0] = METHODORCODE_NOT_SET;
}
CoAPBinding::MethodOrCodeCase CoAPBinding::MethodOrCode_case() const {
  return CoAPBinding::MethodOrCodeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace OneM2M
}  // namespace MicroWireless

// @@protoc_insertion_point(global_scope)
