// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RemoteCSE.proto

#ifndef PROTOBUF_RemoteCSE_2eproto__INCLUDED
#define PROTOBUF_RemoteCSE_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonTypes.pb.h"
// @@protoc_insertion_point(includes)

namespace MicroWireless {
namespace OneM2M {
namespace pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_RemoteCSE_2eproto();
void protobuf_AssignDesc_RemoteCSE_2eproto();
void protobuf_ShutdownFile_RemoteCSE_2eproto();

class RemoteCSE;

// ===================================================================

class RemoteCSE : public ::google::protobuf::Message {
 public:
  RemoteCSE();
  virtual ~RemoteCSE();

  RemoteCSE(const RemoteCSE& from);

  inline RemoteCSE& operator=(const RemoteCSE& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoteCSE& default_instance();

  void Swap(RemoteCSE* other);

  // implements Message ----------------------------------------------

  inline RemoteCSE* New() const { return New(NULL); }

  RemoteCSE* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoteCSE& from);
  void MergeFrom(const RemoteCSE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoteCSE* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MicroWireless.OneM2M.pb.CommonTypes.CSEType cst = 100;
  void clear_cst();
  static const int kCstFieldNumber = 100;
  ::MicroWireless::OneM2M::pb::CommonTypes_CSEType cst() const;
  void set_cst(::MicroWireless::OneM2M::pb::CommonTypes_CSEType value);

  // repeated string poa = 101;
  int poa_size() const;
  void clear_poa();
  static const int kPoaFieldNumber = 101;
  const ::std::string& poa(int index) const;
  ::std::string* mutable_poa(int index);
  void set_poa(int index, const ::std::string& value);
  void set_poa(int index, const char* value);
  void set_poa(int index, const char* value, size_t size);
  ::std::string* add_poa();
  void add_poa(const ::std::string& value);
  void add_poa(const char* value);
  void add_poa(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& poa() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_poa();

  // optional string cb = 102;
  void clear_cb();
  static const int kCbFieldNumber = 102;
  const ::std::string& cb() const;
  void set_cb(const ::std::string& value);
  void set_cb(const char* value);
  void set_cb(const char* value, size_t size);
  ::std::string* mutable_cb();
  ::std::string* release_cb();
  void set_allocated_cb(::std::string* cb);

  // optional string csi = 103;
  void clear_csi();
  static const int kCsiFieldNumber = 103;
  const ::std::string& csi() const;
  void set_csi(const ::std::string& value);
  void set_csi(const char* value);
  void set_csi(const char* value, size_t size);
  ::std::string* mutable_csi();
  ::std::string* release_csi();
  void set_allocated_csi(::std::string* csi);

  // optional string mei = 104;
  void clear_mei();
  static const int kMeiFieldNumber = 104;
  const ::std::string& mei() const;
  void set_mei(const ::std::string& value);
  void set_mei(const char* value);
  void set_mei(const char* value, size_t size);
  ::std::string* mutable_mei();
  ::std::string* release_mei();
  void set_allocated_mei(::std::string* mei);

  // optional string tri = 105;
  void clear_tri();
  static const int kTriFieldNumber = 105;
  const ::std::string& tri() const;
  void set_tri(const ::std::string& value);
  void set_tri(const char* value);
  void set_tri(const char* value, size_t size);
  ::std::string* mutable_tri();
  ::std::string* release_tri();
  void set_allocated_tri(::std::string* tri);

  // optional bool rr = 106;
  void clear_rr();
  static const int kRrFieldNumber = 106;
  bool rr() const;
  void set_rr(bool value);

  // optional string nl = 107;
  void clear_nl();
  static const int kNlFieldNumber = 107;
  const ::std::string& nl() const;
  void set_nl(const ::std::string& value);
  void set_nl(const char* value);
  void set_nl(const char* value, size_t size);
  ::std::string* mutable_nl();
  ::std::string* release_nl();
  void set_allocated_nl(::std::string* nl);

  // @@protoc_insertion_point(class_scope:MicroWireless.OneM2M.pb.RemoteCSE)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> poa_;
  ::google::protobuf::internal::ArenaStringPtr cb_;
  ::google::protobuf::internal::ArenaStringPtr csi_;
  int cst_;
  bool rr_;
  ::google::protobuf::internal::ArenaStringPtr mei_;
  ::google::protobuf::internal::ArenaStringPtr tri_;
  ::google::protobuf::internal::ArenaStringPtr nl_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RemoteCSE_2eproto();
  friend void protobuf_AssignDesc_RemoteCSE_2eproto();
  friend void protobuf_ShutdownFile_RemoteCSE_2eproto();

  void InitAsDefaultInstance();
  static RemoteCSE* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RemoteCSE

// optional .MicroWireless.OneM2M.pb.CommonTypes.CSEType cst = 100;
inline void RemoteCSE::clear_cst() {
  cst_ = 0;
}
inline ::MicroWireless::OneM2M::pb::CommonTypes_CSEType RemoteCSE::cst() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RemoteCSE.cst)
  return static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_CSEType >(cst_);
}
inline void RemoteCSE::set_cst(::MicroWireless::OneM2M::pb::CommonTypes_CSEType value) {
  
  cst_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RemoteCSE.cst)
}

// repeated string poa = 101;
inline int RemoteCSE::poa_size() const {
  return poa_.size();
}
inline void RemoteCSE::clear_poa() {
  poa_.Clear();
}
inline const ::std::string& RemoteCSE::poa(int index) const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RemoteCSE.poa)
  return poa_.Get(index);
}
inline ::std::string* RemoteCSE::mutable_poa(int index) {
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.RemoteCSE.poa)
  return poa_.Mutable(index);
}
inline void RemoteCSE::set_poa(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RemoteCSE.poa)
  poa_.Mutable(index)->assign(value);
}
inline void RemoteCSE::set_poa(int index, const char* value) {
  poa_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.RemoteCSE.poa)
}
inline void RemoteCSE::set_poa(int index, const char* value, size_t size) {
  poa_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.RemoteCSE.poa)
}
inline ::std::string* RemoteCSE::add_poa() {
  return poa_.Add();
}
inline void RemoteCSE::add_poa(const ::std::string& value) {
  poa_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MicroWireless.OneM2M.pb.RemoteCSE.poa)
}
inline void RemoteCSE::add_poa(const char* value) {
  poa_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MicroWireless.OneM2M.pb.RemoteCSE.poa)
}
inline void RemoteCSE::add_poa(const char* value, size_t size) {
  poa_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MicroWireless.OneM2M.pb.RemoteCSE.poa)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RemoteCSE::poa() const {
  // @@protoc_insertion_point(field_list:MicroWireless.OneM2M.pb.RemoteCSE.poa)
  return poa_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RemoteCSE::mutable_poa() {
  // @@protoc_insertion_point(field_mutable_list:MicroWireless.OneM2M.pb.RemoteCSE.poa)
  return &poa_;
}

// optional string cb = 102;
inline void RemoteCSE::clear_cb() {
  cb_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoteCSE::cb() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RemoteCSE.cb)
  return cb_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteCSE::set_cb(const ::std::string& value) {
  
  cb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RemoteCSE.cb)
}
inline void RemoteCSE::set_cb(const char* value) {
  
  cb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.RemoteCSE.cb)
}
inline void RemoteCSE::set_cb(const char* value, size_t size) {
  
  cb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.RemoteCSE.cb)
}
inline ::std::string* RemoteCSE::mutable_cb() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.RemoteCSE.cb)
  return cb_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoteCSE::release_cb() {
  
  return cb_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteCSE::set_allocated_cb(::std::string* cb) {
  if (cb != NULL) {
    
  } else {
    
  }
  cb_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cb);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.RemoteCSE.cb)
}

// optional string csi = 103;
inline void RemoteCSE::clear_csi() {
  csi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoteCSE::csi() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RemoteCSE.csi)
  return csi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteCSE::set_csi(const ::std::string& value) {
  
  csi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RemoteCSE.csi)
}
inline void RemoteCSE::set_csi(const char* value) {
  
  csi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.RemoteCSE.csi)
}
inline void RemoteCSE::set_csi(const char* value, size_t size) {
  
  csi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.RemoteCSE.csi)
}
inline ::std::string* RemoteCSE::mutable_csi() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.RemoteCSE.csi)
  return csi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoteCSE::release_csi() {
  
  return csi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteCSE::set_allocated_csi(::std::string* csi) {
  if (csi != NULL) {
    
  } else {
    
  }
  csi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), csi);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.RemoteCSE.csi)
}

// optional string mei = 104;
inline void RemoteCSE::clear_mei() {
  mei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoteCSE::mei() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RemoteCSE.mei)
  return mei_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteCSE::set_mei(const ::std::string& value) {
  
  mei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RemoteCSE.mei)
}
inline void RemoteCSE::set_mei(const char* value) {
  
  mei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.RemoteCSE.mei)
}
inline void RemoteCSE::set_mei(const char* value, size_t size) {
  
  mei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.RemoteCSE.mei)
}
inline ::std::string* RemoteCSE::mutable_mei() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.RemoteCSE.mei)
  return mei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoteCSE::release_mei() {
  
  return mei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteCSE::set_allocated_mei(::std::string* mei) {
  if (mei != NULL) {
    
  } else {
    
  }
  mei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mei);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.RemoteCSE.mei)
}

// optional string tri = 105;
inline void RemoteCSE::clear_tri() {
  tri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoteCSE::tri() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RemoteCSE.tri)
  return tri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteCSE::set_tri(const ::std::string& value) {
  
  tri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RemoteCSE.tri)
}
inline void RemoteCSE::set_tri(const char* value) {
  
  tri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.RemoteCSE.tri)
}
inline void RemoteCSE::set_tri(const char* value, size_t size) {
  
  tri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.RemoteCSE.tri)
}
inline ::std::string* RemoteCSE::mutable_tri() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.RemoteCSE.tri)
  return tri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoteCSE::release_tri() {
  
  return tri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteCSE::set_allocated_tri(::std::string* tri) {
  if (tri != NULL) {
    
  } else {
    
  }
  tri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tri);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.RemoteCSE.tri)
}

// optional bool rr = 106;
inline void RemoteCSE::clear_rr() {
  rr_ = false;
}
inline bool RemoteCSE::rr() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RemoteCSE.rr)
  return rr_;
}
inline void RemoteCSE::set_rr(bool value) {
  
  rr_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RemoteCSE.rr)
}

// optional string nl = 107;
inline void RemoteCSE::clear_nl() {
  nl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoteCSE::nl() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RemoteCSE.nl)
  return nl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteCSE::set_nl(const ::std::string& value) {
  
  nl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RemoteCSE.nl)
}
inline void RemoteCSE::set_nl(const char* value) {
  
  nl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.RemoteCSE.nl)
}
inline void RemoteCSE::set_nl(const char* value, size_t size) {
  
  nl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.RemoteCSE.nl)
}
inline ::std::string* RemoteCSE::mutable_nl() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.RemoteCSE.nl)
  return nl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoteCSE::release_nl() {
  
  return nl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteCSE::set_allocated_nl(::std::string* nl) {
  if (nl != NULL) {
    
  } else {
    
  }
  nl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nl);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.RemoteCSE.nl)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace OneM2M
}  // namespace MicroWireless

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RemoteCSE_2eproto__INCLUDED
