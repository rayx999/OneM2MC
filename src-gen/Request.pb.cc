// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MicroWireless {
namespace OneM2M {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Request_2eproto() {
  protobuf_AddDesc_Request_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Request.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, tg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, og_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, mi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, pc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, rs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, ol_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Request_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Request_2eproto() {
  delete Request::default_instance_;
  delete Request_reflection_;
}

void protobuf_AddDesc_Request_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MicroWireless::OneM2M::pb::protobuf_AddDesc_CommonTypes_2eproto();
  ::MicroWireless::OneM2M::pb::protobuf_AddDesc_ResponsePrim_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rRequest.proto\022\027MicroWireless.OneM2M.pb"
    "\032\021CommonTypes.proto\032\022ResponsePrim.proto\""
    "\365\001\n\007Request\022:\n\002op\030\001 \001(\0162..MicroWireless."
    "OneM2M.pb.CommonTypes.Operation\022\n\n\002tg\030\002 "
    "\001(\t\022\n\n\002og\030\003 \001(\t\022\013\n\003rid\030\004 \001(\t\022\n\n\002mi\030\005 \001(\t"
    "\022\n\n\002pc\030\006 \001(\t\022>\n\002rs\030\007 \001(\01622.MicroWireless"
    ".OneM2M.pb.CommonTypes.RequestStatus\0221\n\002"
    "ol\030\010 \001(\0132%.MicroWireless.OneM2M.pb.Respo"
    "nsePrimb\006proto3", 335);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Request.proto", &protobuf_RegisterTypes);
  Request::default_instance_ = new Request();
  Request::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Request_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Request_2eproto {
  StaticDescriptorInitializer_Request_2eproto() {
    protobuf_AddDesc_Request_2eproto();
  }
} static_descriptor_initializer_Request_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Request::kOpFieldNumber;
const int Request::kTgFieldNumber;
const int Request::kOgFieldNumber;
const int Request::kRidFieldNumber;
const int Request::kMiFieldNumber;
const int Request::kPcFieldNumber;
const int Request::kRsFieldNumber;
const int Request::kOlFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MicroWireless.OneM2M.pb.Request)
}

void Request::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ol_ = const_cast< ::MicroWireless::OneM2M::pb::ResponsePrim*>(&::MicroWireless::OneM2M::pb::ResponsePrim::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MicroWireless.OneM2M.pb.Request)
}

void Request::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  op_ = 0;
  tg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  og_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rs_ = 0;
  ol_ = NULL;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:MicroWireless.OneM2M.pb.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  tg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  og_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete ol_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Request_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Request*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(op_, rs_);
  tg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  og_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && ol_ != NULL) delete ol_;
  ol_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MicroWireless.OneM2M.pb.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MicroWireless.OneM2M.pb.CommonTypes.Operation op = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_op(static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_Operation >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tg;
        break;
      }

      // optional string tg = 2;
      case 2: {
        if (tag == 18) {
         parse_tg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tg().data(), this->tg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.Request.tg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_og;
        break;
      }

      // optional string og = 3;
      case 3: {
        if (tag == 26) {
         parse_og:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_og()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->og().data(), this->og().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.Request.og");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rid;
        break;
      }

      // optional string rid = 4;
      case 4: {
        if (tag == 34) {
         parse_rid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rid().data(), this->rid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.Request.rid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mi;
        break;
      }

      // optional string mi = 5;
      case 5: {
        if (tag == 42) {
         parse_mi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mi().data(), this->mi().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.Request.mi");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_pc;
        break;
      }

      // optional string pc = 6;
      case 6: {
        if (tag == 50) {
         parse_pc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pc().data(), this->pc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.Request.pc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rs;
        break;
      }

      // optional .MicroWireless.OneM2M.pb.CommonTypes.RequestStatus rs = 7;
      case 7: {
        if (tag == 56) {
         parse_rs:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rs(static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_RequestStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ol;
        break;
      }

      // optional .MicroWireless.OneM2M.pb.ResponsePrim ol = 8;
      case 8: {
        if (tag == 66) {
         parse_ol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ol()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MicroWireless.OneM2M.pb.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MicroWireless.OneM2M.pb.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MicroWireless.OneM2M.pb.Request)
  // optional .MicroWireless.OneM2M.pb.CommonTypes.Operation op = 1;
  if (this->op() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // optional string tg = 2;
  if (this->tg().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tg().data(), this->tg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.Request.tg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tg(), output);
  }

  // optional string og = 3;
  if (this->og().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->og().data(), this->og().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.Request.og");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->og(), output);
  }

  // optional string rid = 4;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.Request.rid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->rid(), output);
  }

  // optional string mi = 5;
  if (this->mi().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mi().data(), this->mi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.Request.mi");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mi(), output);
  }

  // optional string pc = 6;
  if (this->pc().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pc().data(), this->pc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.Request.pc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->pc(), output);
  }

  // optional .MicroWireless.OneM2M.pb.CommonTypes.RequestStatus rs = 7;
  if (this->rs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->rs(), output);
  }

  // optional .MicroWireless.OneM2M.pb.ResponsePrim ol = 8;
  if (this->has_ol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->ol_, output);
  }

  // @@protoc_insertion_point(serialize_end:MicroWireless.OneM2M.pb.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MicroWireless.OneM2M.pb.Request)
  // optional .MicroWireless.OneM2M.pb.CommonTypes.Operation op = 1;
  if (this->op() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  // optional string tg = 2;
  if (this->tg().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tg().data(), this->tg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.Request.tg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tg(), target);
  }

  // optional string og = 3;
  if (this->og().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->og().data(), this->og().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.Request.og");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->og(), target);
  }

  // optional string rid = 4;
  if (this->rid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.Request.rid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rid(), target);
  }

  // optional string mi = 5;
  if (this->mi().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mi().data(), this->mi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.Request.mi");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mi(), target);
  }

  // optional string pc = 6;
  if (this->pc().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pc().data(), this->pc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.Request.pc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->pc(), target);
  }

  // optional .MicroWireless.OneM2M.pb.CommonTypes.RequestStatus rs = 7;
  if (this->rs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->rs(), target);
  }

  // optional .MicroWireless.OneM2M.pb.ResponsePrim ol = 8;
  if (this->has_ol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->ol_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MicroWireless.OneM2M.pb.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  // optional .MicroWireless.OneM2M.pb.CommonTypes.Operation op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
  }

  // optional string tg = 2;
  if (this->tg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tg());
  }

  // optional string og = 3;
  if (this->og().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->og());
  }

  // optional string rid = 4;
  if (this->rid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rid());
  }

  // optional string mi = 5;
  if (this->mi().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mi());
  }

  // optional string pc = 6;
  if (this->pc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pc());
  }

  // optional .MicroWireless.OneM2M.pb.CommonTypes.RequestStatus rs = 7;
  if (this->rs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rs());
  }

  // optional .MicroWireless.OneM2M.pb.ResponsePrim ol = 8;
  if (this->has_ol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ol_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.op() != 0) {
    set_op(from.op());
  }
  if (from.tg().size() > 0) {

    tg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tg_);
  }
  if (from.og().size() > 0) {

    og_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.og_);
  }
  if (from.rid().size() > 0) {

    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  if (from.mi().size() > 0) {

    mi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mi_);
  }
  if (from.pc().size() > 0) {

    pc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pc_);
  }
  if (from.rs() != 0) {
    set_rs(from.rs());
  }
  if (from.has_ol()) {
    mutable_ol()->::MicroWireless::OneM2M::pb::ResponsePrim::MergeFrom(from.ol());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(op_, other->op_);
  tg_.Swap(&other->tg_);
  og_.Swap(&other->og_);
  rid_.Swap(&other->rid_);
  mi_.Swap(&other->mi_);
  pc_.Swap(&other->pc_);
  std::swap(rs_, other->rs_);
  std::swap(ol_, other->ol_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional .MicroWireless.OneM2M.pb.CommonTypes.Operation op = 1;
void Request::clear_op() {
  op_ = 0;
}
 ::MicroWireless::OneM2M::pb::CommonTypes_Operation Request::op() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.Request.op)
  return static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_Operation >(op_);
}
 void Request::set_op(::MicroWireless::OneM2M::pb::CommonTypes_Operation value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.Request.op)
}

// optional string tg = 2;
void Request::clear_tg() {
  tg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request::tg() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.Request.tg)
  return tg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_tg(const ::std::string& value) {
  
  tg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.Request.tg)
}
 void Request::set_tg(const char* value) {
  
  tg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.Request.tg)
}
 void Request::set_tg(const char* value, size_t size) {
  
  tg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.Request.tg)
}
 ::std::string* Request::mutable_tg() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.Request.tg)
  return tg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_tg() {
  
  return tg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_tg(::std::string* tg) {
  if (tg != NULL) {
    
  } else {
    
  }
  tg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tg);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.Request.tg)
}

// optional string og = 3;
void Request::clear_og() {
  og_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request::og() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.Request.og)
  return og_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_og(const ::std::string& value) {
  
  og_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.Request.og)
}
 void Request::set_og(const char* value) {
  
  og_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.Request.og)
}
 void Request::set_og(const char* value, size_t size) {
  
  og_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.Request.og)
}
 ::std::string* Request::mutable_og() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.Request.og)
  return og_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_og() {
  
  return og_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_og(::std::string* og) {
  if (og != NULL) {
    
  } else {
    
  }
  og_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), og);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.Request.og)
}

// optional string rid = 4;
void Request::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request::rid() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.Request.rid)
  return rid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.Request.rid)
}
 void Request::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.Request.rid)
}
 void Request::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.Request.rid)
}
 ::std::string* Request::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.Request.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_rid() {
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.Request.rid)
}

// optional string mi = 5;
void Request::clear_mi() {
  mi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request::mi() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.Request.mi)
  return mi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_mi(const ::std::string& value) {
  
  mi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.Request.mi)
}
 void Request::set_mi(const char* value) {
  
  mi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.Request.mi)
}
 void Request::set_mi(const char* value, size_t size) {
  
  mi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.Request.mi)
}
 ::std::string* Request::mutable_mi() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.Request.mi)
  return mi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_mi() {
  
  return mi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_mi(::std::string* mi) {
  if (mi != NULL) {
    
  } else {
    
  }
  mi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mi);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.Request.mi)
}

// optional string pc = 6;
void Request::clear_pc() {
  pc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request::pc() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.Request.pc)
  return pc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_pc(const ::std::string& value) {
  
  pc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.Request.pc)
}
 void Request::set_pc(const char* value) {
  
  pc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.Request.pc)
}
 void Request::set_pc(const char* value, size_t size) {
  
  pc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.Request.pc)
}
 ::std::string* Request::mutable_pc() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.Request.pc)
  return pc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_pc() {
  
  return pc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_pc(::std::string* pc) {
  if (pc != NULL) {
    
  } else {
    
  }
  pc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pc);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.Request.pc)
}

// optional .MicroWireless.OneM2M.pb.CommonTypes.RequestStatus rs = 7;
void Request::clear_rs() {
  rs_ = 0;
}
 ::MicroWireless::OneM2M::pb::CommonTypes_RequestStatus Request::rs() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.Request.rs)
  return static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_RequestStatus >(rs_);
}
 void Request::set_rs(::MicroWireless::OneM2M::pb::CommonTypes_RequestStatus value) {
  
  rs_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.Request.rs)
}

// optional .MicroWireless.OneM2M.pb.ResponsePrim ol = 8;
bool Request::has_ol() const {
  return !_is_default_instance_ && ol_ != NULL;
}
void Request::clear_ol() {
  if (GetArenaNoVirtual() == NULL && ol_ != NULL) delete ol_;
  ol_ = NULL;
}
 const ::MicroWireless::OneM2M::pb::ResponsePrim& Request::ol() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.Request.ol)
  return ol_ != NULL ? *ol_ : *default_instance_->ol_;
}
 ::MicroWireless::OneM2M::pb::ResponsePrim* Request::mutable_ol() {
  
  if (ol_ == NULL) {
    ol_ = new ::MicroWireless::OneM2M::pb::ResponsePrim;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.Request.ol)
  return ol_;
}
 ::MicroWireless::OneM2M::pb::ResponsePrim* Request::release_ol() {
  
  ::MicroWireless::OneM2M::pb::ResponsePrim* temp = ol_;
  ol_ = NULL;
  return temp;
}
 void Request::set_allocated_ol(::MicroWireless::OneM2M::pb::ResponsePrim* ol) {
  delete ol_;
  ol_ = ol;
  if (ol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.Request.ol)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace OneM2M
}  // namespace MicroWireless

// @@protoc_insertion_point(global_scope)
