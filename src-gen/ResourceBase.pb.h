// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ResourceBase.proto

#ifndef PROTOBUF_ResourceBase_2eproto__INCLUDED
#define PROTOBUF_ResourceBase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CSEBase.pb.h"
// @@protoc_insertion_point(includes)

namespace MicroWireless {
namespace OneM2M {
namespace pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ResourceBase_2eproto();
void protobuf_AssignDesc_ResourceBase_2eproto();
void protobuf_ShutdownFile_ResourceBase_2eproto();

class ResourceBase;

// ===================================================================

class ResourceBase : public ::google::protobuf::Message {
 public:
  ResourceBase();
  virtual ~ResourceBase();

  ResourceBase(const ResourceBase& from);

  inline ResourceBase& operator=(const ResourceBase& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResourceBase& default_instance();

  enum ResourceCase {
    kCse = 5,
    RESOURCE_NOT_SET = 0,
  };

  void Swap(ResourceBase* other);

  // implements Message ----------------------------------------------

  inline ResourceBase* New() const { return New(NULL); }

  ResourceBase* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResourceBase& from);
  void MergeFrom(const ResourceBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResourceBase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MicroWireless.OneM2M.pb.CSEBase cse = 5;
  bool has_cse() const;
  void clear_cse();
  static const int kCseFieldNumber = 5;
  const ::MicroWireless::OneM2M::pb::CSEBase& cse() const;
  ::MicroWireless::OneM2M::pb::CSEBase* mutable_cse();
  ::MicroWireless::OneM2M::pb::CSEBase* release_cse();
  void set_allocated_cse(::MicroWireless::OneM2M::pb::CSEBase* cse);

  ResourceCase resource_case() const;
  // @@protoc_insertion_point(class_scope:MicroWireless.OneM2M.pb.ResourceBase)
 private:
  inline void set_has_cse();

  inline bool has_resource() const;
  void clear_resource();
  inline void clear_has_resource();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union ResourceUnion {
    ResourceUnion() {}
    ::MicroWireless::OneM2M::pb::CSEBase* cse_;
  } resource_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_ResourceBase_2eproto();
  friend void protobuf_AssignDesc_ResourceBase_2eproto();
  friend void protobuf_ShutdownFile_ResourceBase_2eproto();

  void InitAsDefaultInstance();
  static ResourceBase* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ResourceBase

// optional .MicroWireless.OneM2M.pb.CSEBase cse = 5;
inline bool ResourceBase::has_cse() const {
  return resource_case() == kCse;
}
inline void ResourceBase::set_has_cse() {
  _oneof_case_[0] = kCse;
}
inline void ResourceBase::clear_cse() {
  if (has_cse()) {
    delete resource_.cse_;
    clear_has_resource();
  }
}
inline const ::MicroWireless::OneM2M::pb::CSEBase& ResourceBase::cse() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.ResourceBase.cse)
  return has_cse() ? *resource_.cse_
                      : ::MicroWireless::OneM2M::pb::CSEBase::default_instance();
}
inline ::MicroWireless::OneM2M::pb::CSEBase* ResourceBase::mutable_cse() {
  if (!has_cse()) {
    clear_resource();
    set_has_cse();
    resource_.cse_ = new ::MicroWireless::OneM2M::pb::CSEBase;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.ResourceBase.cse)
  return resource_.cse_;
}
inline ::MicroWireless::OneM2M::pb::CSEBase* ResourceBase::release_cse() {
  if (has_cse()) {
    clear_has_resource();
    ::MicroWireless::OneM2M::pb::CSEBase* temp = resource_.cse_;
    resource_.cse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ResourceBase::set_allocated_cse(::MicroWireless::OneM2M::pb::CSEBase* cse) {
  clear_resource();
  if (cse) {
    set_has_cse();
    resource_.cse_ = cse;
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.ResourceBase.cse)
}

inline bool ResourceBase::has_resource() const {
  return resource_case() != RESOURCE_NOT_SET;
}
inline void ResourceBase::clear_has_resource() {
  _oneof_case_[0] = RESOURCE_NOT_SET;
}
inline ResourceBase::ResourceCase ResourceBase::resource_case() const {
  return ResourceBase::ResourceCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace OneM2M
}  // namespace MicroWireless

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ResourceBase_2eproto__INCLUDED
