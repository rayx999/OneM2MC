// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RemoteCSE.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RemoteCSE.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MicroWireless {
namespace OneM2M {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* RemoteCSE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteCSE_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RemoteCSE_2eproto() {
  protobuf_AddDesc_RemoteCSE_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RemoteCSE.proto");
  GOOGLE_CHECK(file != NULL);
  RemoteCSE_descriptor_ = file->message_type(0);
  static const int RemoteCSE_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteCSE, cst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteCSE, poa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteCSE, cb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteCSE, csi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteCSE, mei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteCSE, tri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteCSE, rr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteCSE, nl_),
  };
  RemoteCSE_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RemoteCSE_descriptor_,
      RemoteCSE::default_instance_,
      RemoteCSE_offsets_,
      -1,
      -1,
      -1,
      sizeof(RemoteCSE),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteCSE, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteCSE, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RemoteCSE_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RemoteCSE_descriptor_, &RemoteCSE::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RemoteCSE_2eproto() {
  delete RemoteCSE::default_instance_;
  delete RemoteCSE_reflection_;
}

void protobuf_AddDesc_RemoteCSE_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MicroWireless::OneM2M::pb::protobuf_AddDesc_CommonTypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017RemoteCSE.proto\022\027MicroWireless.OneM2M."
    "pb\032\021CommonTypes.proto\"\236\001\n\tRemoteCSE\0229\n\003c"
    "st\030d \001(\0162,.MicroWireless.OneM2M.pb.Commo"
    "nTypes.CSEType\022\013\n\003poa\030e \003(\t\022\n\n\002cb\030f \001(\t\022"
    "\013\n\003csi\030g \001(\t\022\013\n\003mei\030h \001(\t\022\013\n\003tri\030i \001(\t\022\n"
    "\n\002rr\030j \001(\010\022\n\n\002nl\030k \001(\tb\006proto3", 230);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RemoteCSE.proto", &protobuf_RegisterTypes);
  RemoteCSE::default_instance_ = new RemoteCSE();
  RemoteCSE::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RemoteCSE_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RemoteCSE_2eproto {
  StaticDescriptorInitializer_RemoteCSE_2eproto() {
    protobuf_AddDesc_RemoteCSE_2eproto();
  }
} static_descriptor_initializer_RemoteCSE_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int RemoteCSE::kCstFieldNumber;
const int RemoteCSE::kPoaFieldNumber;
const int RemoteCSE::kCbFieldNumber;
const int RemoteCSE::kCsiFieldNumber;
const int RemoteCSE::kMeiFieldNumber;
const int RemoteCSE::kTriFieldNumber;
const int RemoteCSE::kRrFieldNumber;
const int RemoteCSE::kNlFieldNumber;
#endif  // !_MSC_VER

RemoteCSE::RemoteCSE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MicroWireless.OneM2M.pb.RemoteCSE)
}

void RemoteCSE::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RemoteCSE::RemoteCSE(const RemoteCSE& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MicroWireless.OneM2M.pb.RemoteCSE)
}

void RemoteCSE::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cst_ = 0;
  cb_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  csi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mei_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rr_ = false;
  nl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RemoteCSE::~RemoteCSE() {
  // @@protoc_insertion_point(destructor:MicroWireless.OneM2M.pb.RemoteCSE)
  SharedDtor();
}

void RemoteCSE::SharedDtor() {
  cb_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  csi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mei_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RemoteCSE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteCSE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteCSE_descriptor_;
}

const RemoteCSE& RemoteCSE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RemoteCSE_2eproto();
  return *default_instance_;
}

RemoteCSE* RemoteCSE::default_instance_ = NULL;

RemoteCSE* RemoteCSE::New(::google::protobuf::Arena* arena) const {
  RemoteCSE* n = new RemoteCSE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemoteCSE::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RemoteCSE*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cst_, rr_);
  cb_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  csi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  poa_.Clear();
}

bool RemoteCSE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MicroWireless.OneM2M.pb.RemoteCSE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MicroWireless.OneM2M.pb.CommonTypes.CSEType cst = 100;
      case 100: {
        if (tag == 800) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cst(static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_CSEType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_poa;
        break;
      }

      // repeated string poa = 101;
      case 101: {
        if (tag == 810) {
         parse_poa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_poa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->poa(this->poa_size() - 1).data(),
            this->poa(this->poa_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.RemoteCSE.poa");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_poa;
        if (input->ExpectTag(818)) goto parse_cb;
        break;
      }

      // optional string cb = 102;
      case 102: {
        if (tag == 818) {
         parse_cb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cb().data(), this->cb().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.RemoteCSE.cb");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(826)) goto parse_csi;
        break;
      }

      // optional string csi = 103;
      case 103: {
        if (tag == 826) {
         parse_csi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_csi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->csi().data(), this->csi().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.RemoteCSE.csi");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(834)) goto parse_mei;
        break;
      }

      // optional string mei = 104;
      case 104: {
        if (tag == 834) {
         parse_mei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mei().data(), this->mei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.RemoteCSE.mei");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(842)) goto parse_tri;
        break;
      }

      // optional string tri = 105;
      case 105: {
        if (tag == 842) {
         parse_tri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tri().data(), this->tri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.RemoteCSE.tri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(848)) goto parse_rr;
        break;
      }

      // optional bool rr = 106;
      case 106: {
        if (tag == 848) {
         parse_rr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rr_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(858)) goto parse_nl;
        break;
      }

      // optional string nl = 107;
      case 107: {
        if (tag == 858) {
         parse_nl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nl().data(), this->nl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.RemoteCSE.nl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MicroWireless.OneM2M.pb.RemoteCSE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MicroWireless.OneM2M.pb.RemoteCSE)
  return false;
#undef DO_
}

void RemoteCSE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MicroWireless.OneM2M.pb.RemoteCSE)
  // optional .MicroWireless.OneM2M.pb.CommonTypes.CSEType cst = 100;
  if (this->cst() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      100, this->cst(), output);
  }

  // repeated string poa = 101;
  for (int i = 0; i < this->poa_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->poa(i).data(), this->poa(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "MicroWireless.OneM2M.pb.RemoteCSE.poa");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      101, this->poa(i), output);
  }

  // optional string cb = 102;
  if (this->cb().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cb().data(), this->cb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.RemoteCSE.cb");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      102, this->cb(), output);
  }

  // optional string csi = 103;
  if (this->csi().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->csi().data(), this->csi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.RemoteCSE.csi");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      103, this->csi(), output);
  }

  // optional string mei = 104;
  if (this->mei().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mei().data(), this->mei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.RemoteCSE.mei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      104, this->mei(), output);
  }

  // optional string tri = 105;
  if (this->tri().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tri().data(), this->tri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.RemoteCSE.tri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      105, this->tri(), output);
  }

  // optional bool rr = 106;
  if (this->rr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(106, this->rr(), output);
  }

  // optional string nl = 107;
  if (this->nl().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nl().data(), this->nl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.RemoteCSE.nl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      107, this->nl(), output);
  }

  // @@protoc_insertion_point(serialize_end:MicroWireless.OneM2M.pb.RemoteCSE)
}

::google::protobuf::uint8* RemoteCSE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MicroWireless.OneM2M.pb.RemoteCSE)
  // optional .MicroWireless.OneM2M.pb.CommonTypes.CSEType cst = 100;
  if (this->cst() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      100, this->cst(), target);
  }

  // repeated string poa = 101;
  for (int i = 0; i < this->poa_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->poa(i).data(), this->poa(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.RemoteCSE.poa");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(101, this->poa(i), target);
  }

  // optional string cb = 102;
  if (this->cb().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cb().data(), this->cb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.RemoteCSE.cb");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->cb(), target);
  }

  // optional string csi = 103;
  if (this->csi().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->csi().data(), this->csi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.RemoteCSE.csi");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        103, this->csi(), target);
  }

  // optional string mei = 104;
  if (this->mei().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mei().data(), this->mei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.RemoteCSE.mei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        104, this->mei(), target);
  }

  // optional string tri = 105;
  if (this->tri().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tri().data(), this->tri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.RemoteCSE.tri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        105, this->tri(), target);
  }

  // optional bool rr = 106;
  if (this->rr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(106, this->rr(), target);
  }

  // optional string nl = 107;
  if (this->nl().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nl().data(), this->nl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.RemoteCSE.nl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        107, this->nl(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MicroWireless.OneM2M.pb.RemoteCSE)
  return target;
}

int RemoteCSE::ByteSize() const {
  int total_size = 0;

  // optional .MicroWireless.OneM2M.pb.CommonTypes.CSEType cst = 100;
  if (this->cst() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cst());
  }

  // optional string cb = 102;
  if (this->cb().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cb());
  }

  // optional string csi = 103;
  if (this->csi().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->csi());
  }

  // optional string mei = 104;
  if (this->mei().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mei());
  }

  // optional string tri = 105;
  if (this->tri().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tri());
  }

  // optional bool rr = 106;
  if (this->rr() != 0) {
    total_size += 2 + 1;
  }

  // optional string nl = 107;
  if (this->nl().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nl());
  }

  // repeated string poa = 101;
  total_size += 2 * this->poa_size();
  for (int i = 0; i < this->poa_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->poa(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteCSE::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RemoteCSE* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoteCSE>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoteCSE::MergeFrom(const RemoteCSE& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  poa_.MergeFrom(from.poa_);
  if (from.cst() != 0) {
    set_cst(from.cst());
  }
  if (from.cb().size() > 0) {

    cb_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cb_);
  }
  if (from.csi().size() > 0) {

    csi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.csi_);
  }
  if (from.mei().size() > 0) {

    mei_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mei_);
  }
  if (from.tri().size() > 0) {

    tri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tri_);
  }
  if (from.rr() != 0) {
    set_rr(from.rr());
  }
  if (from.nl().size() > 0) {

    nl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nl_);
  }
}

void RemoteCSE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteCSE::CopyFrom(const RemoteCSE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteCSE::IsInitialized() const {

  return true;
}

void RemoteCSE::Swap(RemoteCSE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoteCSE::InternalSwap(RemoteCSE* other) {
  std::swap(cst_, other->cst_);
  poa_.UnsafeArenaSwap(&other->poa_);
  cb_.Swap(&other->cb_);
  csi_.Swap(&other->csi_);
  mei_.Swap(&other->mei_);
  tri_.Swap(&other->tri_);
  std::swap(rr_, other->rr_);
  nl_.Swap(&other->nl_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemoteCSE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteCSE_descriptor_;
  metadata.reflection = RemoteCSE_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemoteCSE

// optional .MicroWireless.OneM2M.pb.CommonTypes.CSEType cst = 100;
void RemoteCSE::clear_cst() {
  cst_ = 0;
}
 ::MicroWireless::OneM2M::pb::CommonTypes_CSEType RemoteCSE::cst() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RemoteCSE.cst)
  return static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_CSEType >(cst_);
}
 void RemoteCSE::set_cst(::MicroWireless::OneM2M::pb::CommonTypes_CSEType value) {
  
  cst_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RemoteCSE.cst)
}

// repeated string poa = 101;
int RemoteCSE::poa_size() const {
  return poa_.size();
}
void RemoteCSE::clear_poa() {
  poa_.Clear();
}
 const ::std::string& RemoteCSE::poa(int index) const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RemoteCSE.poa)
  return poa_.Get(index);
}
 ::std::string* RemoteCSE::mutable_poa(int index) {
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.RemoteCSE.poa)
  return poa_.Mutable(index);
}
 void RemoteCSE::set_poa(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RemoteCSE.poa)
  poa_.Mutable(index)->assign(value);
}
 void RemoteCSE::set_poa(int index, const char* value) {
  poa_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.RemoteCSE.poa)
}
 void RemoteCSE::set_poa(int index, const char* value, size_t size) {
  poa_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.RemoteCSE.poa)
}
 ::std::string* RemoteCSE::add_poa() {
  return poa_.Add();
}
 void RemoteCSE::add_poa(const ::std::string& value) {
  poa_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MicroWireless.OneM2M.pb.RemoteCSE.poa)
}
 void RemoteCSE::add_poa(const char* value) {
  poa_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MicroWireless.OneM2M.pb.RemoteCSE.poa)
}
 void RemoteCSE::add_poa(const char* value, size_t size) {
  poa_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MicroWireless.OneM2M.pb.RemoteCSE.poa)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
RemoteCSE::poa() const {
  // @@protoc_insertion_point(field_list:MicroWireless.OneM2M.pb.RemoteCSE.poa)
  return poa_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
RemoteCSE::mutable_poa() {
  // @@protoc_insertion_point(field_mutable_list:MicroWireless.OneM2M.pb.RemoteCSE.poa)
  return &poa_;
}

// optional string cb = 102;
void RemoteCSE::clear_cb() {
  cb_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RemoteCSE::cb() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RemoteCSE.cb)
  return cb_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RemoteCSE::set_cb(const ::std::string& value) {
  
  cb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RemoteCSE.cb)
}
 void RemoteCSE::set_cb(const char* value) {
  
  cb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.RemoteCSE.cb)
}
 void RemoteCSE::set_cb(const char* value, size_t size) {
  
  cb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.RemoteCSE.cb)
}
 ::std::string* RemoteCSE::mutable_cb() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.RemoteCSE.cb)
  return cb_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RemoteCSE::release_cb() {
  
  return cb_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RemoteCSE::set_allocated_cb(::std::string* cb) {
  if (cb != NULL) {
    
  } else {
    
  }
  cb_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cb);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.RemoteCSE.cb)
}

// optional string csi = 103;
void RemoteCSE::clear_csi() {
  csi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RemoteCSE::csi() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RemoteCSE.csi)
  return csi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RemoteCSE::set_csi(const ::std::string& value) {
  
  csi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RemoteCSE.csi)
}
 void RemoteCSE::set_csi(const char* value) {
  
  csi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.RemoteCSE.csi)
}
 void RemoteCSE::set_csi(const char* value, size_t size) {
  
  csi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.RemoteCSE.csi)
}
 ::std::string* RemoteCSE::mutable_csi() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.RemoteCSE.csi)
  return csi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RemoteCSE::release_csi() {
  
  return csi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RemoteCSE::set_allocated_csi(::std::string* csi) {
  if (csi != NULL) {
    
  } else {
    
  }
  csi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), csi);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.RemoteCSE.csi)
}

// optional string mei = 104;
void RemoteCSE::clear_mei() {
  mei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RemoteCSE::mei() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RemoteCSE.mei)
  return mei_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RemoteCSE::set_mei(const ::std::string& value) {
  
  mei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RemoteCSE.mei)
}
 void RemoteCSE::set_mei(const char* value) {
  
  mei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.RemoteCSE.mei)
}
 void RemoteCSE::set_mei(const char* value, size_t size) {
  
  mei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.RemoteCSE.mei)
}
 ::std::string* RemoteCSE::mutable_mei() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.RemoteCSE.mei)
  return mei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RemoteCSE::release_mei() {
  
  return mei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RemoteCSE::set_allocated_mei(::std::string* mei) {
  if (mei != NULL) {
    
  } else {
    
  }
  mei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mei);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.RemoteCSE.mei)
}

// optional string tri = 105;
void RemoteCSE::clear_tri() {
  tri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RemoteCSE::tri() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RemoteCSE.tri)
  return tri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RemoteCSE::set_tri(const ::std::string& value) {
  
  tri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RemoteCSE.tri)
}
 void RemoteCSE::set_tri(const char* value) {
  
  tri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.RemoteCSE.tri)
}
 void RemoteCSE::set_tri(const char* value, size_t size) {
  
  tri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.RemoteCSE.tri)
}
 ::std::string* RemoteCSE::mutable_tri() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.RemoteCSE.tri)
  return tri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RemoteCSE::release_tri() {
  
  return tri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RemoteCSE::set_allocated_tri(::std::string* tri) {
  if (tri != NULL) {
    
  } else {
    
  }
  tri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tri);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.RemoteCSE.tri)
}

// optional bool rr = 106;
void RemoteCSE::clear_rr() {
  rr_ = false;
}
 bool RemoteCSE::rr() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RemoteCSE.rr)
  return rr_;
}
 void RemoteCSE::set_rr(bool value) {
  
  rr_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RemoteCSE.rr)
}

// optional string nl = 107;
void RemoteCSE::clear_nl() {
  nl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RemoteCSE::nl() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RemoteCSE.nl)
  return nl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RemoteCSE::set_nl(const ::std::string& value) {
  
  nl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RemoteCSE.nl)
}
 void RemoteCSE::set_nl(const char* value) {
  
  nl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.RemoteCSE.nl)
}
 void RemoteCSE::set_nl(const char* value, size_t size) {
  
  nl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.RemoteCSE.nl)
}
 ::std::string* RemoteCSE::mutable_nl() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.RemoteCSE.nl)
  return nl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RemoteCSE::release_nl() {
  
  return nl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RemoteCSE::set_allocated_nl(::std::string* nl) {
  if (nl != NULL) {
    
  } else {
    
  }
  nl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nl);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.RemoteCSE.nl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace OneM2M
}  // namespace MicroWireless

// @@protoc_insertion_point(global_scope)
