// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RequestPrim.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RequestPrim.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MicroWireless {
namespace OneM2M {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* FilterCriteria_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilterCriteria_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestPrim_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestPrim_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RequestPrim_2eproto() {
  protobuf_AddDesc_RequestPrim_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RequestPrim.proto");
  GOOGLE_CHECK(file != NULL);
  FilterCriteria_descriptor_ = file->message_type(0);
  static const int FilterCriteria_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterCriteria, crb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterCriteria, cra_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterCriteria, ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterCriteria, us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterCriteria, sts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterCriteria, stb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterCriteria, exb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterCriteria, exa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterCriteria, lbl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterCriteria, rty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterCriteria, sza_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterCriteria, szb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterCriteria, cty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterCriteria, atr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterCriteria, fu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterCriteria, lim_),
  };
  FilterCriteria_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FilterCriteria_descriptor_,
      FilterCriteria::default_instance_,
      FilterCriteria_offsets_,
      -1,
      -1,
      -1,
      sizeof(FilterCriteria),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterCriteria, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterCriteria, _is_default_instance_));
  RequestPrim_descriptor_ = file->message_type(1);
  static const int RequestPrim_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPrim, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPrim, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPrim, fr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPrim, rqi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPrim, ty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPrim, nm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPrim, pc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPrim, ot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPrim, rqet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPrim, rset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPrim, oet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPrim, rt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPrim, rp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPrim, rcn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPrim, ec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPrim, da_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPrim, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPrim, fc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPrim, drt_),
  };
  RequestPrim_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestPrim_descriptor_,
      RequestPrim::default_instance_,
      RequestPrim_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestPrim),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPrim, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPrim, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RequestPrim_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FilterCriteria_descriptor_, &FilterCriteria::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestPrim_descriptor_, &RequestPrim::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RequestPrim_2eproto() {
  delete FilterCriteria::default_instance_;
  delete FilterCriteria_reflection_;
  delete RequestPrim::default_instance_;
  delete RequestPrim_reflection_;
}

void protobuf_AddDesc_RequestPrim_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fduration_2eproto();
  ::MicroWireless::OneM2M::pb::protobuf_AddDesc_CommonTypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021RequestPrim.proto\022\027MicroWireless.OneM2"
    "M.pb\032\037google/protobuf/timestamp.proto\032\036g"
    "oogle/protobuf/duration.proto\032\021CommonTyp"
    "es.proto\"\300\004\n\016FilterCriteria\022\'\n\003crb\030\001 \001(\013"
    "2\032.google.protobuf.Timestamp\022\'\n\003cra\030\002 \001("
    "\0132\032.google.protobuf.Timestamp\022&\n\002ms\030\003 \001("
    "\0132\032.google.protobuf.Timestamp\022&\n\002us\030\004 \001("
    "\0132\032.google.protobuf.Timestamp\022\013\n\003sts\030\005 \001"
    "(\r\022\013\n\003stb\030\006 \001(\r\022\'\n\003exb\030\007 \001(\0132\032.google.pr"
    "otobuf.Timestamp\022\'\n\003exa\030\010 \001(\0132\032.google.p"
    "rotobuf.Timestamp\022\013\n\003lbl\030\t \003(\t\022>\n\003rty\030\n "
    "\003(\01621.MicroWireless.OneM2M.pb.CommonType"
    "s.ResourceType\022\013\n\003sza\030\013 \001(\004\022\013\n\003szb\030\014 \001(\004"
    "\022=\n\003cty\030\r \003(\01620.MicroWireless.OneM2M.pb."
    "CommonTypes.ContentType\022/\n\003atr\030\016 \003(\0132\".M"
    "icroWireless.OneM2M.pb.Attribute\022<\n\002fu\030\017"
    " \001(\01620.MicroWireless.OneM2M.pb.CommonTyp"
    "es.FilterUsage\022\013\n\003lim\030\020 \001(\r\"\351\005\n\013RequestP"
    "rim\022:\n\002op\030\001 \001(\0162..MicroWireless.OneM2M.p"
    "b.CommonTypes.Operation\022\n\n\002to\030\002 \001(\t\022\n\n\002f"
    "r\030\003 \001(\t\022\013\n\003rqi\030\004 \001(\t\022F\n\002ty\030\005 \001(\0162:.Micro"
    "Wireless.OneM2M.pb.CommonTypes.Supported"
    "ResourceType\022\n\n\002nm\030\006 \001(\t\022\n\n\002pc\030\007 \001(\t\022&\n\002"
    "ot\030\010 \001(\0132\032.google.protobuf.Timestamp\022(\n\004"
    "rqet\030\t \001(\0132\032.google.protobuf.Timestamp\022("
    "\n\004rset\030\n \001(\0132\032.google.protobuf.Timestamp"
    "\022&\n\003oet\030\013 \001(\0132\031.google.protobuf.Duration"
    "\022=\n\002rt\030\014 \001(\01621.MicroWireless.OneM2M.pb.C"
    "ommonTypes.ResponseType\022%\n\002rp\030\r \001(\0132\031.go"
    "ogle.protobuf.Duration\022\?\n\003rcn\030\016 \001(\01622.Mi"
    "croWireless.OneM2M.pb.CommonTypes.Result"
    "Content\0229\n\002ec\030\017 \001(\0162-.MicroWireless.OneM"
    "2M.pb.CommonTypes.EventCat\022\n\n\002da\030\020 \001(\010\022\013"
    "\n\003gid\030\021 \001(\t\0223\n\002fc\030\022 \001(\0132\'.MicroWireless."
    "OneM2M.pb.FilterCriteria\022E\n\003drt\030\023 \001(\01628."
    "MicroWireless.OneM2M.pb.CommonTypes.Disc"
    "overyResultTypeb\006proto3", 1463);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RequestPrim.proto", &protobuf_RegisterTypes);
  FilterCriteria::default_instance_ = new FilterCriteria();
  RequestPrim::default_instance_ = new RequestPrim();
  FilterCriteria::default_instance_->InitAsDefaultInstance();
  RequestPrim::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RequestPrim_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RequestPrim_2eproto {
  StaticDescriptorInitializer_RequestPrim_2eproto() {
    protobuf_AddDesc_RequestPrim_2eproto();
  }
} static_descriptor_initializer_RequestPrim_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int FilterCriteria::kCrbFieldNumber;
const int FilterCriteria::kCraFieldNumber;
const int FilterCriteria::kMsFieldNumber;
const int FilterCriteria::kUsFieldNumber;
const int FilterCriteria::kStsFieldNumber;
const int FilterCriteria::kStbFieldNumber;
const int FilterCriteria::kExbFieldNumber;
const int FilterCriteria::kExaFieldNumber;
const int FilterCriteria::kLblFieldNumber;
const int FilterCriteria::kRtyFieldNumber;
const int FilterCriteria::kSzaFieldNumber;
const int FilterCriteria::kSzbFieldNumber;
const int FilterCriteria::kCtyFieldNumber;
const int FilterCriteria::kAtrFieldNumber;
const int FilterCriteria::kFuFieldNumber;
const int FilterCriteria::kLimFieldNumber;
#endif  // !_MSC_VER

FilterCriteria::FilterCriteria()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MicroWireless.OneM2M.pb.FilterCriteria)
}

void FilterCriteria::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  crb_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
  cra_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
  ms_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
  us_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
  exb_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
  exa_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
}

FilterCriteria::FilterCriteria(const FilterCriteria& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MicroWireless.OneM2M.pb.FilterCriteria)
}

void FilterCriteria::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  crb_ = NULL;
  cra_ = NULL;
  ms_ = NULL;
  us_ = NULL;
  sts_ = 0u;
  stb_ = 0u;
  exb_ = NULL;
  exa_ = NULL;
  sza_ = GOOGLE_ULONGLONG(0);
  szb_ = GOOGLE_ULONGLONG(0);
  fu_ = 0;
  lim_ = 0u;
}

FilterCriteria::~FilterCriteria() {
  // @@protoc_insertion_point(destructor:MicroWireless.OneM2M.pb.FilterCriteria)
  SharedDtor();
}

void FilterCriteria::SharedDtor() {
  if (this != default_instance_) {
    delete crb_;
    delete cra_;
    delete ms_;
    delete us_;
    delete exb_;
    delete exa_;
  }
}

void FilterCriteria::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilterCriteria::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilterCriteria_descriptor_;
}

const FilterCriteria& FilterCriteria::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RequestPrim_2eproto();
  return *default_instance_;
}

FilterCriteria* FilterCriteria::default_instance_ = NULL;

FilterCriteria* FilterCriteria::New(::google::protobuf::Arena* arena) const {
  FilterCriteria* n = new FilterCriteria;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FilterCriteria::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FilterCriteria*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sts_, stb_);
  if (GetArenaNoVirtual() == NULL && crb_ != NULL) delete crb_;
  crb_ = NULL;
  if (GetArenaNoVirtual() == NULL && cra_ != NULL) delete cra_;
  cra_ = NULL;
  if (GetArenaNoVirtual() == NULL && ms_ != NULL) delete ms_;
  ms_ = NULL;
  if (GetArenaNoVirtual() == NULL && us_ != NULL) delete us_;
  us_ = NULL;
  if (GetArenaNoVirtual() == NULL && exb_ != NULL) delete exb_;
  exb_ = NULL;
  if (GetArenaNoVirtual() == NULL && exa_ != NULL) delete exa_;
  exa_ = NULL;
  ZR_(sza_, szb_);
  ZR_(fu_, lim_);

#undef ZR_HELPER_
#undef ZR_

  lbl_.Clear();
  rty_.Clear();
  cty_.Clear();
  atr_.Clear();
}

bool FilterCriteria::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MicroWireless.OneM2M.pb.FilterCriteria)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.protobuf.Timestamp crb = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crb()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cra;
        break;
      }

      // optional .google.protobuf.Timestamp cra = 2;
      case 2: {
        if (tag == 18) {
         parse_cra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cra()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ms;
        break;
      }

      // optional .google.protobuf.Timestamp ms = 3;
      case 3: {
        if (tag == 26) {
         parse_ms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_us;
        break;
      }

      // optional .google.protobuf.Timestamp us = 4;
      case 4: {
        if (tag == 34) {
         parse_us:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_us()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sts;
        break;
      }

      // optional uint32 sts = 5;
      case 5: {
        if (tag == 40) {
         parse_sts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sts_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_stb;
        break;
      }

      // optional uint32 stb = 6;
      case 6: {
        if (tag == 48) {
         parse_stb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stb_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_exb;
        break;
      }

      // optional .google.protobuf.Timestamp exb = 7;
      case 7: {
        if (tag == 58) {
         parse_exb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exb()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_exa;
        break;
      }

      // optional .google.protobuf.Timestamp exa = 8;
      case 8: {
        if (tag == 66) {
         parse_exa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exa()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_lbl;
        break;
      }

      // repeated string lbl = 9;
      case 9: {
        if (tag == 74) {
         parse_lbl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_lbl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lbl(this->lbl_size() - 1).data(),
            this->lbl(this->lbl_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.FilterCriteria.lbl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_lbl;
        if (input->ExpectTag(80)) goto parse_rty;
        break;
      }

      // repeated .MicroWireless.OneM2M.pb.CommonTypes.ResourceType rty = 10;
      case 10: {
        if (tag == 80) {
         parse_rty:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_rty(static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_ResourceType >(value));
        } else if (tag == 82) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_rty(static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_ResourceType >(value));
          }
          input->PopLimit(limit);
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_rty;
        if (input->ExpectTag(88)) goto parse_sza;
        break;
      }

      // optional uint64 sza = 11;
      case 11: {
        if (tag == 88) {
         parse_sza:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sza_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_szb;
        break;
      }

      // optional uint64 szb = 12;
      case 12: {
        if (tag == 96) {
         parse_szb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &szb_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_cty;
        break;
      }

      // repeated .MicroWireless.OneM2M.pb.CommonTypes.ContentType cty = 13;
      case 13: {
        if (tag == 104) {
         parse_cty:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_cty(static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_ContentType >(value));
        } else if (tag == 106) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_cty(static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_ContentType >(value));
          }
          input->PopLimit(limit);
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_cty;
        if (input->ExpectTag(114)) goto parse_atr;
        break;
      }

      // repeated .MicroWireless.OneM2M.pb.Attribute atr = 14;
      case 14: {
        if (tag == 114) {
         parse_atr:
          DO_(input->IncrementRecursionDepth());
         parse_loop_atr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_atr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_atr;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(120)) goto parse_fu;
        break;
      }

      // optional .MicroWireless.OneM2M.pb.CommonTypes.FilterUsage fu = 15;
      case 15: {
        if (tag == 120) {
         parse_fu:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_fu(static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_FilterUsage >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_lim;
        break;
      }

      // optional uint32 lim = 16;
      case 16: {
        if (tag == 128) {
         parse_lim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lim_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MicroWireless.OneM2M.pb.FilterCriteria)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MicroWireless.OneM2M.pb.FilterCriteria)
  return false;
#undef DO_
}

void FilterCriteria::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MicroWireless.OneM2M.pb.FilterCriteria)
  // optional .google.protobuf.Timestamp crb = 1;
  if (this->has_crb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->crb_, output);
  }

  // optional .google.protobuf.Timestamp cra = 2;
  if (this->has_cra()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cra_, output);
  }

  // optional .google.protobuf.Timestamp ms = 3;
  if (this->has_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ms_, output);
  }

  // optional .google.protobuf.Timestamp us = 4;
  if (this->has_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->us_, output);
  }

  // optional uint32 sts = 5;
  if (this->sts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sts(), output);
  }

  // optional uint32 stb = 6;
  if (this->stb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->stb(), output);
  }

  // optional .google.protobuf.Timestamp exb = 7;
  if (this->has_exb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->exb_, output);
  }

  // optional .google.protobuf.Timestamp exa = 8;
  if (this->has_exa()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->exa_, output);
  }

  // repeated string lbl = 9;
  for (int i = 0; i < this->lbl_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->lbl(i).data(), this->lbl(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "MicroWireless.OneM2M.pb.FilterCriteria.lbl");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->lbl(i), output);
  }

  // repeated .MicroWireless.OneM2M.pb.CommonTypes.ResourceType rty = 10;
  if (this->rty_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_rty_cached_byte_size_);
  }
  for (int i = 0; i < this->rty_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->rty(i), output);
  }

  // optional uint64 sza = 11;
  if (this->sza() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->sza(), output);
  }

  // optional uint64 szb = 12;
  if (this->szb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->szb(), output);
  }

  // repeated .MicroWireless.OneM2M.pb.CommonTypes.ContentType cty = 13;
  if (this->cty_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_cty_cached_byte_size_);
  }
  for (int i = 0; i < this->cty_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->cty(i), output);
  }

  // repeated .MicroWireless.OneM2M.pb.Attribute atr = 14;
  for (unsigned int i = 0, n = this->atr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->atr(i), output);
  }

  // optional .MicroWireless.OneM2M.pb.CommonTypes.FilterUsage fu = 15;
  if (this->fu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->fu(), output);
  }

  // optional uint32 lim = 16;
  if (this->lim() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->lim(), output);
  }

  // @@protoc_insertion_point(serialize_end:MicroWireless.OneM2M.pb.FilterCriteria)
}

::google::protobuf::uint8* FilterCriteria::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MicroWireless.OneM2M.pb.FilterCriteria)
  // optional .google.protobuf.Timestamp crb = 1;
  if (this->has_crb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->crb_, target);
  }

  // optional .google.protobuf.Timestamp cra = 2;
  if (this->has_cra()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->cra_, target);
  }

  // optional .google.protobuf.Timestamp ms = 3;
  if (this->has_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->ms_, target);
  }

  // optional .google.protobuf.Timestamp us = 4;
  if (this->has_us()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->us_, target);
  }

  // optional uint32 sts = 5;
  if (this->sts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sts(), target);
  }

  // optional uint32 stb = 6;
  if (this->stb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->stb(), target);
  }

  // optional .google.protobuf.Timestamp exb = 7;
  if (this->has_exb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->exb_, target);
  }

  // optional .google.protobuf.Timestamp exa = 8;
  if (this->has_exa()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->exa_, target);
  }

  // repeated string lbl = 9;
  for (int i = 0; i < this->lbl_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lbl(i).data(), this->lbl(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.FilterCriteria.lbl");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->lbl(i), target);
  }

  // repeated .MicroWireless.OneM2M.pb.CommonTypes.ResourceType rty = 10;
  if (this->rty_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _rty_cached_byte_size_, target);
  }
  for (int i = 0; i < this->rty_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->rty(i), target);
  }

  // optional uint64 sza = 11;
  if (this->sza() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->sza(), target);
  }

  // optional uint64 szb = 12;
  if (this->szb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->szb(), target);
  }

  // repeated .MicroWireless.OneM2M.pb.CommonTypes.ContentType cty = 13;
  if (this->cty_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _cty_cached_byte_size_, target);
  }
  for (int i = 0; i < this->cty_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->cty(i), target);
  }

  // repeated .MicroWireless.OneM2M.pb.Attribute atr = 14;
  for (unsigned int i = 0, n = this->atr_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->atr(i), target);
  }

  // optional .MicroWireless.OneM2M.pb.CommonTypes.FilterUsage fu = 15;
  if (this->fu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->fu(), target);
  }

  // optional uint32 lim = 16;
  if (this->lim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->lim(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MicroWireless.OneM2M.pb.FilterCriteria)
  return target;
}

int FilterCriteria::ByteSize() const {
  int total_size = 0;

  // optional .google.protobuf.Timestamp crb = 1;
  if (this->has_crb()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->crb_);
  }

  // optional .google.protobuf.Timestamp cra = 2;
  if (this->has_cra()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cra_);
  }

  // optional .google.protobuf.Timestamp ms = 3;
  if (this->has_ms()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ms_);
  }

  // optional .google.protobuf.Timestamp us = 4;
  if (this->has_us()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->us_);
  }

  // optional uint32 sts = 5;
  if (this->sts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sts());
  }

  // optional uint32 stb = 6;
  if (this->stb() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stb());
  }

  // optional .google.protobuf.Timestamp exb = 7;
  if (this->has_exb()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exb_);
  }

  // optional .google.protobuf.Timestamp exa = 8;
  if (this->has_exa()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exa_);
  }

  // optional uint64 sza = 11;
  if (this->sza() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sza());
  }

  // optional uint64 szb = 12;
  if (this->szb() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->szb());
  }

  // optional .MicroWireless.OneM2M.pb.CommonTypes.FilterUsage fu = 15;
  if (this->fu() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fu());
  }

  // optional uint32 lim = 16;
  if (this->lim() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lim());
  }

  // repeated string lbl = 9;
  total_size += 1 * this->lbl_size();
  for (int i = 0; i < this->lbl_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->lbl(i));
  }

  // repeated .MicroWireless.OneM2M.pb.CommonTypes.ResourceType rty = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->rty_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->rty(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rty_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .MicroWireless.OneM2M.pb.CommonTypes.ContentType cty = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->cty_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->cty(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cty_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .MicroWireless.OneM2M.pb.Attribute atr = 14;
  total_size += 1 * this->atr_size();
  for (int i = 0; i < this->atr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atr(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterCriteria::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FilterCriteria* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FilterCriteria>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FilterCriteria::MergeFrom(const FilterCriteria& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  lbl_.MergeFrom(from.lbl_);
  rty_.MergeFrom(from.rty_);
  cty_.MergeFrom(from.cty_);
  atr_.MergeFrom(from.atr_);
  if (from.has_crb()) {
    mutable_crb()->::google::protobuf::Timestamp::MergeFrom(from.crb());
  }
  if (from.has_cra()) {
    mutable_cra()->::google::protobuf::Timestamp::MergeFrom(from.cra());
  }
  if (from.has_ms()) {
    mutable_ms()->::google::protobuf::Timestamp::MergeFrom(from.ms());
  }
  if (from.has_us()) {
    mutable_us()->::google::protobuf::Timestamp::MergeFrom(from.us());
  }
  if (from.sts() != 0) {
    set_sts(from.sts());
  }
  if (from.stb() != 0) {
    set_stb(from.stb());
  }
  if (from.has_exb()) {
    mutable_exb()->::google::protobuf::Timestamp::MergeFrom(from.exb());
  }
  if (from.has_exa()) {
    mutable_exa()->::google::protobuf::Timestamp::MergeFrom(from.exa());
  }
  if (from.sza() != 0) {
    set_sza(from.sza());
  }
  if (from.szb() != 0) {
    set_szb(from.szb());
  }
  if (from.fu() != 0) {
    set_fu(from.fu());
  }
  if (from.lim() != 0) {
    set_lim(from.lim());
  }
}

void FilterCriteria::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterCriteria::CopyFrom(const FilterCriteria& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterCriteria::IsInitialized() const {

  return true;
}

void FilterCriteria::Swap(FilterCriteria* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilterCriteria::InternalSwap(FilterCriteria* other) {
  std::swap(crb_, other->crb_);
  std::swap(cra_, other->cra_);
  std::swap(ms_, other->ms_);
  std::swap(us_, other->us_);
  std::swap(sts_, other->sts_);
  std::swap(stb_, other->stb_);
  std::swap(exb_, other->exb_);
  std::swap(exa_, other->exa_);
  lbl_.UnsafeArenaSwap(&other->lbl_);
  rty_.UnsafeArenaSwap(&other->rty_);
  std::swap(sza_, other->sza_);
  std::swap(szb_, other->szb_);
  cty_.UnsafeArenaSwap(&other->cty_);
  atr_.UnsafeArenaSwap(&other->atr_);
  std::swap(fu_, other->fu_);
  std::swap(lim_, other->lim_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FilterCriteria::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilterCriteria_descriptor_;
  metadata.reflection = FilterCriteria_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FilterCriteria

// optional .google.protobuf.Timestamp crb = 1;
bool FilterCriteria::has_crb() const {
  return !_is_default_instance_ && crb_ != NULL;
}
void FilterCriteria::clear_crb() {
  if (GetArenaNoVirtual() == NULL && crb_ != NULL) delete crb_;
  crb_ = NULL;
}
 const ::google::protobuf::Timestamp& FilterCriteria::crb() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.crb)
  return crb_ != NULL ? *crb_ : *default_instance_->crb_;
}
 ::google::protobuf::Timestamp* FilterCriteria::mutable_crb() {
  
  if (crb_ == NULL) {
    crb_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.FilterCriteria.crb)
  return crb_;
}
 ::google::protobuf::Timestamp* FilterCriteria::release_crb() {
  
  ::google::protobuf::Timestamp* temp = crb_;
  crb_ = NULL;
  return temp;
}
 void FilterCriteria::set_allocated_crb(::google::protobuf::Timestamp* crb) {
  delete crb_;
  crb_ = crb;
  if (crb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.FilterCriteria.crb)
}

// optional .google.protobuf.Timestamp cra = 2;
bool FilterCriteria::has_cra() const {
  return !_is_default_instance_ && cra_ != NULL;
}
void FilterCriteria::clear_cra() {
  if (GetArenaNoVirtual() == NULL && cra_ != NULL) delete cra_;
  cra_ = NULL;
}
 const ::google::protobuf::Timestamp& FilterCriteria::cra() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.cra)
  return cra_ != NULL ? *cra_ : *default_instance_->cra_;
}
 ::google::protobuf::Timestamp* FilterCriteria::mutable_cra() {
  
  if (cra_ == NULL) {
    cra_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.FilterCriteria.cra)
  return cra_;
}
 ::google::protobuf::Timestamp* FilterCriteria::release_cra() {
  
  ::google::protobuf::Timestamp* temp = cra_;
  cra_ = NULL;
  return temp;
}
 void FilterCriteria::set_allocated_cra(::google::protobuf::Timestamp* cra) {
  delete cra_;
  cra_ = cra;
  if (cra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.FilterCriteria.cra)
}

// optional .google.protobuf.Timestamp ms = 3;
bool FilterCriteria::has_ms() const {
  return !_is_default_instance_ && ms_ != NULL;
}
void FilterCriteria::clear_ms() {
  if (GetArenaNoVirtual() == NULL && ms_ != NULL) delete ms_;
  ms_ = NULL;
}
 const ::google::protobuf::Timestamp& FilterCriteria::ms() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.ms)
  return ms_ != NULL ? *ms_ : *default_instance_->ms_;
}
 ::google::protobuf::Timestamp* FilterCriteria::mutable_ms() {
  
  if (ms_ == NULL) {
    ms_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.FilterCriteria.ms)
  return ms_;
}
 ::google::protobuf::Timestamp* FilterCriteria::release_ms() {
  
  ::google::protobuf::Timestamp* temp = ms_;
  ms_ = NULL;
  return temp;
}
 void FilterCriteria::set_allocated_ms(::google::protobuf::Timestamp* ms) {
  delete ms_;
  ms_ = ms;
  if (ms) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.FilterCriteria.ms)
}

// optional .google.protobuf.Timestamp us = 4;
bool FilterCriteria::has_us() const {
  return !_is_default_instance_ && us_ != NULL;
}
void FilterCriteria::clear_us() {
  if (GetArenaNoVirtual() == NULL && us_ != NULL) delete us_;
  us_ = NULL;
}
 const ::google::protobuf::Timestamp& FilterCriteria::us() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.us)
  return us_ != NULL ? *us_ : *default_instance_->us_;
}
 ::google::protobuf::Timestamp* FilterCriteria::mutable_us() {
  
  if (us_ == NULL) {
    us_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.FilterCriteria.us)
  return us_;
}
 ::google::protobuf::Timestamp* FilterCriteria::release_us() {
  
  ::google::protobuf::Timestamp* temp = us_;
  us_ = NULL;
  return temp;
}
 void FilterCriteria::set_allocated_us(::google::protobuf::Timestamp* us) {
  delete us_;
  us_ = us;
  if (us) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.FilterCriteria.us)
}

// optional uint32 sts = 5;
void FilterCriteria::clear_sts() {
  sts_ = 0u;
}
 ::google::protobuf::uint32 FilterCriteria::sts() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.sts)
  return sts_;
}
 void FilterCriteria::set_sts(::google::protobuf::uint32 value) {
  
  sts_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.FilterCriteria.sts)
}

// optional uint32 stb = 6;
void FilterCriteria::clear_stb() {
  stb_ = 0u;
}
 ::google::protobuf::uint32 FilterCriteria::stb() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.stb)
  return stb_;
}
 void FilterCriteria::set_stb(::google::protobuf::uint32 value) {
  
  stb_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.FilterCriteria.stb)
}

// optional .google.protobuf.Timestamp exb = 7;
bool FilterCriteria::has_exb() const {
  return !_is_default_instance_ && exb_ != NULL;
}
void FilterCriteria::clear_exb() {
  if (GetArenaNoVirtual() == NULL && exb_ != NULL) delete exb_;
  exb_ = NULL;
}
 const ::google::protobuf::Timestamp& FilterCriteria::exb() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.exb)
  return exb_ != NULL ? *exb_ : *default_instance_->exb_;
}
 ::google::protobuf::Timestamp* FilterCriteria::mutable_exb() {
  
  if (exb_ == NULL) {
    exb_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.FilterCriteria.exb)
  return exb_;
}
 ::google::protobuf::Timestamp* FilterCriteria::release_exb() {
  
  ::google::protobuf::Timestamp* temp = exb_;
  exb_ = NULL;
  return temp;
}
 void FilterCriteria::set_allocated_exb(::google::protobuf::Timestamp* exb) {
  delete exb_;
  exb_ = exb;
  if (exb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.FilterCriteria.exb)
}

// optional .google.protobuf.Timestamp exa = 8;
bool FilterCriteria::has_exa() const {
  return !_is_default_instance_ && exa_ != NULL;
}
void FilterCriteria::clear_exa() {
  if (GetArenaNoVirtual() == NULL && exa_ != NULL) delete exa_;
  exa_ = NULL;
}
 const ::google::protobuf::Timestamp& FilterCriteria::exa() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.exa)
  return exa_ != NULL ? *exa_ : *default_instance_->exa_;
}
 ::google::protobuf::Timestamp* FilterCriteria::mutable_exa() {
  
  if (exa_ == NULL) {
    exa_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.FilterCriteria.exa)
  return exa_;
}
 ::google::protobuf::Timestamp* FilterCriteria::release_exa() {
  
  ::google::protobuf::Timestamp* temp = exa_;
  exa_ = NULL;
  return temp;
}
 void FilterCriteria::set_allocated_exa(::google::protobuf::Timestamp* exa) {
  delete exa_;
  exa_ = exa;
  if (exa) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.FilterCriteria.exa)
}

// repeated string lbl = 9;
int FilterCriteria::lbl_size() const {
  return lbl_.size();
}
void FilterCriteria::clear_lbl() {
  lbl_.Clear();
}
 const ::std::string& FilterCriteria::lbl(int index) const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.lbl)
  return lbl_.Get(index);
}
 ::std::string* FilterCriteria::mutable_lbl(int index) {
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.FilterCriteria.lbl)
  return lbl_.Mutable(index);
}
 void FilterCriteria::set_lbl(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.FilterCriteria.lbl)
  lbl_.Mutable(index)->assign(value);
}
 void FilterCriteria::set_lbl(int index, const char* value) {
  lbl_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.FilterCriteria.lbl)
}
 void FilterCriteria::set_lbl(int index, const char* value, size_t size) {
  lbl_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.FilterCriteria.lbl)
}
 ::std::string* FilterCriteria::add_lbl() {
  return lbl_.Add();
}
 void FilterCriteria::add_lbl(const ::std::string& value) {
  lbl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MicroWireless.OneM2M.pb.FilterCriteria.lbl)
}
 void FilterCriteria::add_lbl(const char* value) {
  lbl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MicroWireless.OneM2M.pb.FilterCriteria.lbl)
}
 void FilterCriteria::add_lbl(const char* value, size_t size) {
  lbl_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MicroWireless.OneM2M.pb.FilterCriteria.lbl)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
FilterCriteria::lbl() const {
  // @@protoc_insertion_point(field_list:MicroWireless.OneM2M.pb.FilterCriteria.lbl)
  return lbl_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
FilterCriteria::mutable_lbl() {
  // @@protoc_insertion_point(field_mutable_list:MicroWireless.OneM2M.pb.FilterCriteria.lbl)
  return &lbl_;
}

// repeated .MicroWireless.OneM2M.pb.CommonTypes.ResourceType rty = 10;
int FilterCriteria::rty_size() const {
  return rty_.size();
}
void FilterCriteria::clear_rty() {
  rty_.Clear();
}
 ::MicroWireless::OneM2M::pb::CommonTypes_ResourceType FilterCriteria::rty(int index) const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.rty)
  return static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_ResourceType >(rty_.Get(index));
}
 void FilterCriteria::set_rty(int index, ::MicroWireless::OneM2M::pb::CommonTypes_ResourceType value) {
  rty_.Set(index, value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.FilterCriteria.rty)
}
 void FilterCriteria::add_rty(::MicroWireless::OneM2M::pb::CommonTypes_ResourceType value) {
  rty_.Add(value);
  // @@protoc_insertion_point(field_add:MicroWireless.OneM2M.pb.FilterCriteria.rty)
}
 const ::google::protobuf::RepeatedField<int>&
FilterCriteria::rty() const {
  // @@protoc_insertion_point(field_list:MicroWireless.OneM2M.pb.FilterCriteria.rty)
  return rty_;
}
 ::google::protobuf::RepeatedField<int>*
FilterCriteria::mutable_rty() {
  // @@protoc_insertion_point(field_mutable_list:MicroWireless.OneM2M.pb.FilterCriteria.rty)
  return &rty_;
}

// optional uint64 sza = 11;
void FilterCriteria::clear_sza() {
  sza_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 FilterCriteria::sza() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.sza)
  return sza_;
}
 void FilterCriteria::set_sza(::google::protobuf::uint64 value) {
  
  sza_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.FilterCriteria.sza)
}

// optional uint64 szb = 12;
void FilterCriteria::clear_szb() {
  szb_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 FilterCriteria::szb() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.szb)
  return szb_;
}
 void FilterCriteria::set_szb(::google::protobuf::uint64 value) {
  
  szb_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.FilterCriteria.szb)
}

// repeated .MicroWireless.OneM2M.pb.CommonTypes.ContentType cty = 13;
int FilterCriteria::cty_size() const {
  return cty_.size();
}
void FilterCriteria::clear_cty() {
  cty_.Clear();
}
 ::MicroWireless::OneM2M::pb::CommonTypes_ContentType FilterCriteria::cty(int index) const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.cty)
  return static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_ContentType >(cty_.Get(index));
}
 void FilterCriteria::set_cty(int index, ::MicroWireless::OneM2M::pb::CommonTypes_ContentType value) {
  cty_.Set(index, value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.FilterCriteria.cty)
}
 void FilterCriteria::add_cty(::MicroWireless::OneM2M::pb::CommonTypes_ContentType value) {
  cty_.Add(value);
  // @@protoc_insertion_point(field_add:MicroWireless.OneM2M.pb.FilterCriteria.cty)
}
 const ::google::protobuf::RepeatedField<int>&
FilterCriteria::cty() const {
  // @@protoc_insertion_point(field_list:MicroWireless.OneM2M.pb.FilterCriteria.cty)
  return cty_;
}
 ::google::protobuf::RepeatedField<int>*
FilterCriteria::mutable_cty() {
  // @@protoc_insertion_point(field_mutable_list:MicroWireless.OneM2M.pb.FilterCriteria.cty)
  return &cty_;
}

// repeated .MicroWireless.OneM2M.pb.Attribute atr = 14;
int FilterCriteria::atr_size() const {
  return atr_.size();
}
void FilterCriteria::clear_atr() {
  atr_.Clear();
}
 const ::MicroWireless::OneM2M::pb::Attribute& FilterCriteria::atr(int index) const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.atr)
  return atr_.Get(index);
}
 ::MicroWireless::OneM2M::pb::Attribute* FilterCriteria::mutable_atr(int index) {
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.FilterCriteria.atr)
  return atr_.Mutable(index);
}
 ::MicroWireless::OneM2M::pb::Attribute* FilterCriteria::add_atr() {
  // @@protoc_insertion_point(field_add:MicroWireless.OneM2M.pb.FilterCriteria.atr)
  return atr_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::MicroWireless::OneM2M::pb::Attribute >&
FilterCriteria::atr() const {
  // @@protoc_insertion_point(field_list:MicroWireless.OneM2M.pb.FilterCriteria.atr)
  return atr_;
}
 ::google::protobuf::RepeatedPtrField< ::MicroWireless::OneM2M::pb::Attribute >*
FilterCriteria::mutable_atr() {
  // @@protoc_insertion_point(field_mutable_list:MicroWireless.OneM2M.pb.FilterCriteria.atr)
  return &atr_;
}

// optional .MicroWireless.OneM2M.pb.CommonTypes.FilterUsage fu = 15;
void FilterCriteria::clear_fu() {
  fu_ = 0;
}
 ::MicroWireless::OneM2M::pb::CommonTypes_FilterUsage FilterCriteria::fu() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.fu)
  return static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_FilterUsage >(fu_);
}
 void FilterCriteria::set_fu(::MicroWireless::OneM2M::pb::CommonTypes_FilterUsage value) {
  
  fu_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.FilterCriteria.fu)
}

// optional uint32 lim = 16;
void FilterCriteria::clear_lim() {
  lim_ = 0u;
}
 ::google::protobuf::uint32 FilterCriteria::lim() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.FilterCriteria.lim)
  return lim_;
}
 void FilterCriteria::set_lim(::google::protobuf::uint32 value) {
  
  lim_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.FilterCriteria.lim)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RequestPrim::kOpFieldNumber;
const int RequestPrim::kToFieldNumber;
const int RequestPrim::kFrFieldNumber;
const int RequestPrim::kRqiFieldNumber;
const int RequestPrim::kTyFieldNumber;
const int RequestPrim::kNmFieldNumber;
const int RequestPrim::kPcFieldNumber;
const int RequestPrim::kOtFieldNumber;
const int RequestPrim::kRqetFieldNumber;
const int RequestPrim::kRsetFieldNumber;
const int RequestPrim::kOetFieldNumber;
const int RequestPrim::kRtFieldNumber;
const int RequestPrim::kRpFieldNumber;
const int RequestPrim::kRcnFieldNumber;
const int RequestPrim::kEcFieldNumber;
const int RequestPrim::kDaFieldNumber;
const int RequestPrim::kGidFieldNumber;
const int RequestPrim::kFcFieldNumber;
const int RequestPrim::kDrtFieldNumber;
#endif  // !_MSC_VER

RequestPrim::RequestPrim()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MicroWireless.OneM2M.pb.RequestPrim)
}

void RequestPrim::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ot_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
  rqet_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
  rset_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
  oet_ = const_cast< ::google::protobuf::Duration*>(&::google::protobuf::Duration::default_instance());
  rp_ = const_cast< ::google::protobuf::Duration*>(&::google::protobuf::Duration::default_instance());
  fc_ = const_cast< ::MicroWireless::OneM2M::pb::FilterCriteria*>(&::MicroWireless::OneM2M::pb::FilterCriteria::default_instance());
}

RequestPrim::RequestPrim(const RequestPrim& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MicroWireless.OneM2M.pb.RequestPrim)
}

void RequestPrim::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  op_ = 0;
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rqi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ty_ = 0;
  nm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ot_ = NULL;
  rqet_ = NULL;
  rset_ = NULL;
  oet_ = NULL;
  rt_ = 0;
  rp_ = NULL;
  rcn_ = 0;
  ec_ = 0;
  da_ = false;
  gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fc_ = NULL;
  drt_ = 0;
}

RequestPrim::~RequestPrim() {
  // @@protoc_insertion_point(destructor:MicroWireless.OneM2M.pb.RequestPrim)
  SharedDtor();
}

void RequestPrim::SharedDtor() {
  to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rqi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete ot_;
    delete rqet_;
    delete rset_;
    delete oet_;
    delete rp_;
    delete fc_;
  }
}

void RequestPrim::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPrim::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPrim_descriptor_;
}

const RequestPrim& RequestPrim::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RequestPrim_2eproto();
  return *default_instance_;
}

RequestPrim* RequestPrim::default_instance_ = NULL;

RequestPrim* RequestPrim::New(::google::protobuf::Arena* arena) const {
  RequestPrim* n = new RequestPrim;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestPrim::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RequestPrim*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(op_, ty_);
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rqi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && ot_ != NULL) delete ot_;
  ot_ = NULL;
  ZR_(rt_, da_);
  if (GetArenaNoVirtual() == NULL && rqet_ != NULL) delete rqet_;
  rqet_ = NULL;
  if (GetArenaNoVirtual() == NULL && rset_ != NULL) delete rset_;
  rset_ = NULL;
  if (GetArenaNoVirtual() == NULL && oet_ != NULL) delete oet_;
  oet_ = NULL;
  if (GetArenaNoVirtual() == NULL && rp_ != NULL) delete rp_;
  rp_ = NULL;
  gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && fc_ != NULL) delete fc_;
  fc_ = NULL;
  drt_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool RequestPrim::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MicroWireless.OneM2M.pb.RequestPrim)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MicroWireless.OneM2M.pb.CommonTypes.Operation op = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_op(static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_Operation >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_to;
        break;
      }

      // optional string to = 2;
      case 2: {
        if (tag == 18) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.RequestPrim.to");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fr;
        break;
      }

      // optional string fr = 3;
      case 3: {
        if (tag == 26) {
         parse_fr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fr().data(), this->fr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.RequestPrim.fr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rqi;
        break;
      }

      // optional string rqi = 4;
      case 4: {
        if (tag == 34) {
         parse_rqi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rqi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rqi().data(), this->rqi().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.RequestPrim.rqi");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ty;
        break;
      }

      // optional .MicroWireless.OneM2M.pb.CommonTypes.SupportedResourceType ty = 5;
      case 5: {
        if (tag == 40) {
         parse_ty:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ty(static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_SupportedResourceType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_nm;
        break;
      }

      // optional string nm = 6;
      case 6: {
        if (tag == 50) {
         parse_nm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nm().data(), this->nm().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.RequestPrim.nm");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pc;
        break;
      }

      // optional string pc = 7;
      case 7: {
        if (tag == 58) {
         parse_pc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pc().data(), this->pc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.RequestPrim.pc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ot;
        break;
      }

      // optional .google.protobuf.Timestamp ot = 8;
      case 8: {
        if (tag == 66) {
         parse_ot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_rqet;
        break;
      }

      // optional .google.protobuf.Timestamp rqet = 9;
      case 9: {
        if (tag == 74) {
         parse_rqet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rqet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_rset;
        break;
      }

      // optional .google.protobuf.Timestamp rset = 10;
      case 10: {
        if (tag == 82) {
         parse_rset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_oet;
        break;
      }

      // optional .google.protobuf.Duration oet = 11;
      case 11: {
        if (tag == 90) {
         parse_oet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_rt;
        break;
      }

      // optional .MicroWireless.OneM2M.pb.CommonTypes.ResponseType rt = 12;
      case 12: {
        if (tag == 96) {
         parse_rt:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rt(static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_ResponseType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_rp;
        break;
      }

      // optional .google.protobuf.Duration rp = 13;
      case 13: {
        if (tag == 106) {
         parse_rp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_rcn;
        break;
      }

      // optional .MicroWireless.OneM2M.pb.CommonTypes.ResultContent rcn = 14;
      case 14: {
        if (tag == 112) {
         parse_rcn:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rcn(static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_ResultContent >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_ec;
        break;
      }

      // optional .MicroWireless.OneM2M.pb.CommonTypes.EventCat ec = 15;
      case 15: {
        if (tag == 120) {
         parse_ec:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ec(static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_EventCat >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_da;
        break;
      }

      // optional bool da = 16;
      case 16: {
        if (tag == 128) {
         parse_da:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &da_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_gid;
        break;
      }

      // optional string gid = 17;
      case 17: {
        if (tag == 138) {
         parse_gid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gid().data(), this->gid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.RequestPrim.gid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_fc;
        break;
      }

      // optional .MicroWireless.OneM2M.pb.FilterCriteria fc = 18;
      case 18: {
        if (tag == 146) {
         parse_fc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_drt;
        break;
      }

      // optional .MicroWireless.OneM2M.pb.CommonTypes.DiscoveryResultType drt = 19;
      case 19: {
        if (tag == 152) {
         parse_drt:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_drt(static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_DiscoveryResultType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MicroWireless.OneM2M.pb.RequestPrim)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MicroWireless.OneM2M.pb.RequestPrim)
  return false;
#undef DO_
}

void RequestPrim::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MicroWireless.OneM2M.pb.RequestPrim)
  // optional .MicroWireless.OneM2M.pb.CommonTypes.Operation op = 1;
  if (this->op() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // optional string to = 2;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.RequestPrim.to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->to(), output);
  }

  // optional string fr = 3;
  if (this->fr().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fr().data(), this->fr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.RequestPrim.fr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fr(), output);
  }

  // optional string rqi = 4;
  if (this->rqi().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rqi().data(), this->rqi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.RequestPrim.rqi");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->rqi(), output);
  }

  // optional .MicroWireless.OneM2M.pb.CommonTypes.SupportedResourceType ty = 5;
  if (this->ty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->ty(), output);
  }

  // optional string nm = 6;
  if (this->nm().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nm().data(), this->nm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.RequestPrim.nm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->nm(), output);
  }

  // optional string pc = 7;
  if (this->pc().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pc().data(), this->pc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.RequestPrim.pc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->pc(), output);
  }

  // optional .google.protobuf.Timestamp ot = 8;
  if (this->has_ot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->ot_, output);
  }

  // optional .google.protobuf.Timestamp rqet = 9;
  if (this->has_rqet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->rqet_, output);
  }

  // optional .google.protobuf.Timestamp rset = 10;
  if (this->has_rset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->rset_, output);
  }

  // optional .google.protobuf.Duration oet = 11;
  if (this->has_oet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->oet_, output);
  }

  // optional .MicroWireless.OneM2M.pb.CommonTypes.ResponseType rt = 12;
  if (this->rt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->rt(), output);
  }

  // optional .google.protobuf.Duration rp = 13;
  if (this->has_rp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->rp_, output);
  }

  // optional .MicroWireless.OneM2M.pb.CommonTypes.ResultContent rcn = 14;
  if (this->rcn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->rcn(), output);
  }

  // optional .MicroWireless.OneM2M.pb.CommonTypes.EventCat ec = 15;
  if (this->ec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->ec(), output);
  }

  // optional bool da = 16;
  if (this->da() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->da(), output);
  }

  // optional string gid = 17;
  if (this->gid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.RequestPrim.gid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->gid(), output);
  }

  // optional .MicroWireless.OneM2M.pb.FilterCriteria fc = 18;
  if (this->has_fc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->fc_, output);
  }

  // optional .MicroWireless.OneM2M.pb.CommonTypes.DiscoveryResultType drt = 19;
  if (this->drt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->drt(), output);
  }

  // @@protoc_insertion_point(serialize_end:MicroWireless.OneM2M.pb.RequestPrim)
}

::google::protobuf::uint8* RequestPrim::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MicroWireless.OneM2M.pb.RequestPrim)
  // optional .MicroWireless.OneM2M.pb.CommonTypes.Operation op = 1;
  if (this->op() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  // optional string to = 2;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.RequestPrim.to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->to(), target);
  }

  // optional string fr = 3;
  if (this->fr().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fr().data(), this->fr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.RequestPrim.fr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fr(), target);
  }

  // optional string rqi = 4;
  if (this->rqi().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rqi().data(), this->rqi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.RequestPrim.rqi");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rqi(), target);
  }

  // optional .MicroWireless.OneM2M.pb.CommonTypes.SupportedResourceType ty = 5;
  if (this->ty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->ty(), target);
  }

  // optional string nm = 6;
  if (this->nm().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nm().data(), this->nm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.RequestPrim.nm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->nm(), target);
  }

  // optional string pc = 7;
  if (this->pc().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pc().data(), this->pc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.RequestPrim.pc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->pc(), target);
  }

  // optional .google.protobuf.Timestamp ot = 8;
  if (this->has_ot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->ot_, target);
  }

  // optional .google.protobuf.Timestamp rqet = 9;
  if (this->has_rqet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->rqet_, target);
  }

  // optional .google.protobuf.Timestamp rset = 10;
  if (this->has_rset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->rset_, target);
  }

  // optional .google.protobuf.Duration oet = 11;
  if (this->has_oet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *this->oet_, target);
  }

  // optional .MicroWireless.OneM2M.pb.CommonTypes.ResponseType rt = 12;
  if (this->rt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->rt(), target);
  }

  // optional .google.protobuf.Duration rp = 13;
  if (this->has_rp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, *this->rp_, target);
  }

  // optional .MicroWireless.OneM2M.pb.CommonTypes.ResultContent rcn = 14;
  if (this->rcn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->rcn(), target);
  }

  // optional .MicroWireless.OneM2M.pb.CommonTypes.EventCat ec = 15;
  if (this->ec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->ec(), target);
  }

  // optional bool da = 16;
  if (this->da() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->da(), target);
  }

  // optional string gid = 17;
  if (this->gid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.RequestPrim.gid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->gid(), target);
  }

  // optional .MicroWireless.OneM2M.pb.FilterCriteria fc = 18;
  if (this->has_fc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, *this->fc_, target);
  }

  // optional .MicroWireless.OneM2M.pb.CommonTypes.DiscoveryResultType drt = 19;
  if (this->drt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->drt(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MicroWireless.OneM2M.pb.RequestPrim)
  return target;
}

int RequestPrim::ByteSize() const {
  int total_size = 0;

  // optional .MicroWireless.OneM2M.pb.CommonTypes.Operation op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
  }

  // optional string to = 2;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to());
  }

  // optional string fr = 3;
  if (this->fr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fr());
  }

  // optional string rqi = 4;
  if (this->rqi().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rqi());
  }

  // optional .MicroWireless.OneM2M.pb.CommonTypes.SupportedResourceType ty = 5;
  if (this->ty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ty());
  }

  // optional string nm = 6;
  if (this->nm().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nm());
  }

  // optional string pc = 7;
  if (this->pc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pc());
  }

  // optional .google.protobuf.Timestamp ot = 8;
  if (this->has_ot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ot_);
  }

  // optional .google.protobuf.Timestamp rqet = 9;
  if (this->has_rqet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rqet_);
  }

  // optional .google.protobuf.Timestamp rset = 10;
  if (this->has_rset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rset_);
  }

  // optional .google.protobuf.Duration oet = 11;
  if (this->has_oet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->oet_);
  }

  // optional .MicroWireless.OneM2M.pb.CommonTypes.ResponseType rt = 12;
  if (this->rt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rt());
  }

  // optional .google.protobuf.Duration rp = 13;
  if (this->has_rp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rp_);
  }

  // optional .MicroWireless.OneM2M.pb.CommonTypes.ResultContent rcn = 14;
  if (this->rcn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rcn());
  }

  // optional .MicroWireless.OneM2M.pb.CommonTypes.EventCat ec = 15;
  if (this->ec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ec());
  }

  // optional bool da = 16;
  if (this->da() != 0) {
    total_size += 2 + 1;
  }

  // optional string gid = 17;
  if (this->gid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gid());
  }

  // optional .MicroWireless.OneM2M.pb.FilterCriteria fc = 18;
  if (this->has_fc()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fc_);
  }

  // optional .MicroWireless.OneM2M.pb.CommonTypes.DiscoveryResultType drt = 19;
  if (this->drt() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->drt());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPrim::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RequestPrim* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestPrim>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestPrim::MergeFrom(const RequestPrim& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.op() != 0) {
    set_op(from.op());
  }
  if (from.to().size() > 0) {

    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  if (from.fr().size() > 0) {

    fr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fr_);
  }
  if (from.rqi().size() > 0) {

    rqi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rqi_);
  }
  if (from.ty() != 0) {
    set_ty(from.ty());
  }
  if (from.nm().size() > 0) {

    nm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nm_);
  }
  if (from.pc().size() > 0) {

    pc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pc_);
  }
  if (from.has_ot()) {
    mutable_ot()->::google::protobuf::Timestamp::MergeFrom(from.ot());
  }
  if (from.has_rqet()) {
    mutable_rqet()->::google::protobuf::Timestamp::MergeFrom(from.rqet());
  }
  if (from.has_rset()) {
    mutable_rset()->::google::protobuf::Timestamp::MergeFrom(from.rset());
  }
  if (from.has_oet()) {
    mutable_oet()->::google::protobuf::Duration::MergeFrom(from.oet());
  }
  if (from.rt() != 0) {
    set_rt(from.rt());
  }
  if (from.has_rp()) {
    mutable_rp()->::google::protobuf::Duration::MergeFrom(from.rp());
  }
  if (from.rcn() != 0) {
    set_rcn(from.rcn());
  }
  if (from.ec() != 0) {
    set_ec(from.ec());
  }
  if (from.da() != 0) {
    set_da(from.da());
  }
  if (from.gid().size() > 0) {

    gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gid_);
  }
  if (from.has_fc()) {
    mutable_fc()->::MicroWireless::OneM2M::pb::FilterCriteria::MergeFrom(from.fc());
  }
  if (from.drt() != 0) {
    set_drt(from.drt());
  }
}

void RequestPrim::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPrim::CopyFrom(const RequestPrim& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPrim::IsInitialized() const {

  return true;
}

void RequestPrim::Swap(RequestPrim* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestPrim::InternalSwap(RequestPrim* other) {
  std::swap(op_, other->op_);
  to_.Swap(&other->to_);
  fr_.Swap(&other->fr_);
  rqi_.Swap(&other->rqi_);
  std::swap(ty_, other->ty_);
  nm_.Swap(&other->nm_);
  pc_.Swap(&other->pc_);
  std::swap(ot_, other->ot_);
  std::swap(rqet_, other->rqet_);
  std::swap(rset_, other->rset_);
  std::swap(oet_, other->oet_);
  std::swap(rt_, other->rt_);
  std::swap(rp_, other->rp_);
  std::swap(rcn_, other->rcn_);
  std::swap(ec_, other->ec_);
  std::swap(da_, other->da_);
  gid_.Swap(&other->gid_);
  std::swap(fc_, other->fc_);
  std::swap(drt_, other->drt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestPrim::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestPrim_descriptor_;
  metadata.reflection = RequestPrim_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestPrim

// optional .MicroWireless.OneM2M.pb.CommonTypes.Operation op = 1;
void RequestPrim::clear_op() {
  op_ = 0;
}
 ::MicroWireless::OneM2M::pb::CommonTypes_Operation RequestPrim::op() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RequestPrim.op)
  return static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_Operation >(op_);
}
 void RequestPrim::set_op(::MicroWireless::OneM2M::pb::CommonTypes_Operation value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RequestPrim.op)
}

// optional string to = 2;
void RequestPrim::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RequestPrim::to() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RequestPrim.to)
  return to_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestPrim::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RequestPrim.to)
}
 void RequestPrim::set_to(const char* value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.RequestPrim.to)
}
 void RequestPrim::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.RequestPrim.to)
}
 ::std::string* RequestPrim::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.RequestPrim.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestPrim::release_to() {
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestPrim::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.RequestPrim.to)
}

// optional string fr = 3;
void RequestPrim::clear_fr() {
  fr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RequestPrim::fr() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RequestPrim.fr)
  return fr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestPrim::set_fr(const ::std::string& value) {
  
  fr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RequestPrim.fr)
}
 void RequestPrim::set_fr(const char* value) {
  
  fr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.RequestPrim.fr)
}
 void RequestPrim::set_fr(const char* value, size_t size) {
  
  fr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.RequestPrim.fr)
}
 ::std::string* RequestPrim::mutable_fr() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.RequestPrim.fr)
  return fr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestPrim::release_fr() {
  
  return fr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestPrim::set_allocated_fr(::std::string* fr) {
  if (fr != NULL) {
    
  } else {
    
  }
  fr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fr);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.RequestPrim.fr)
}

// optional string rqi = 4;
void RequestPrim::clear_rqi() {
  rqi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RequestPrim::rqi() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RequestPrim.rqi)
  return rqi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestPrim::set_rqi(const ::std::string& value) {
  
  rqi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RequestPrim.rqi)
}
 void RequestPrim::set_rqi(const char* value) {
  
  rqi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.RequestPrim.rqi)
}
 void RequestPrim::set_rqi(const char* value, size_t size) {
  
  rqi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.RequestPrim.rqi)
}
 ::std::string* RequestPrim::mutable_rqi() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.RequestPrim.rqi)
  return rqi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestPrim::release_rqi() {
  
  return rqi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestPrim::set_allocated_rqi(::std::string* rqi) {
  if (rqi != NULL) {
    
  } else {
    
  }
  rqi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rqi);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.RequestPrim.rqi)
}

// optional .MicroWireless.OneM2M.pb.CommonTypes.SupportedResourceType ty = 5;
void RequestPrim::clear_ty() {
  ty_ = 0;
}
 ::MicroWireless::OneM2M::pb::CommonTypes_SupportedResourceType RequestPrim::ty() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RequestPrim.ty)
  return static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_SupportedResourceType >(ty_);
}
 void RequestPrim::set_ty(::MicroWireless::OneM2M::pb::CommonTypes_SupportedResourceType value) {
  
  ty_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RequestPrim.ty)
}

// optional string nm = 6;
void RequestPrim::clear_nm() {
  nm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RequestPrim::nm() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RequestPrim.nm)
  return nm_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestPrim::set_nm(const ::std::string& value) {
  
  nm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RequestPrim.nm)
}
 void RequestPrim::set_nm(const char* value) {
  
  nm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.RequestPrim.nm)
}
 void RequestPrim::set_nm(const char* value, size_t size) {
  
  nm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.RequestPrim.nm)
}
 ::std::string* RequestPrim::mutable_nm() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.RequestPrim.nm)
  return nm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestPrim::release_nm() {
  
  return nm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestPrim::set_allocated_nm(::std::string* nm) {
  if (nm != NULL) {
    
  } else {
    
  }
  nm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nm);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.RequestPrim.nm)
}

// optional string pc = 7;
void RequestPrim::clear_pc() {
  pc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RequestPrim::pc() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RequestPrim.pc)
  return pc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestPrim::set_pc(const ::std::string& value) {
  
  pc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RequestPrim.pc)
}
 void RequestPrim::set_pc(const char* value) {
  
  pc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.RequestPrim.pc)
}
 void RequestPrim::set_pc(const char* value, size_t size) {
  
  pc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.RequestPrim.pc)
}
 ::std::string* RequestPrim::mutable_pc() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.RequestPrim.pc)
  return pc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestPrim::release_pc() {
  
  return pc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestPrim::set_allocated_pc(::std::string* pc) {
  if (pc != NULL) {
    
  } else {
    
  }
  pc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pc);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.RequestPrim.pc)
}

// optional .google.protobuf.Timestamp ot = 8;
bool RequestPrim::has_ot() const {
  return !_is_default_instance_ && ot_ != NULL;
}
void RequestPrim::clear_ot() {
  if (GetArenaNoVirtual() == NULL && ot_ != NULL) delete ot_;
  ot_ = NULL;
}
 const ::google::protobuf::Timestamp& RequestPrim::ot() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RequestPrim.ot)
  return ot_ != NULL ? *ot_ : *default_instance_->ot_;
}
 ::google::protobuf::Timestamp* RequestPrim::mutable_ot() {
  
  if (ot_ == NULL) {
    ot_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.RequestPrim.ot)
  return ot_;
}
 ::google::protobuf::Timestamp* RequestPrim::release_ot() {
  
  ::google::protobuf::Timestamp* temp = ot_;
  ot_ = NULL;
  return temp;
}
 void RequestPrim::set_allocated_ot(::google::protobuf::Timestamp* ot) {
  delete ot_;
  ot_ = ot;
  if (ot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.RequestPrim.ot)
}

// optional .google.protobuf.Timestamp rqet = 9;
bool RequestPrim::has_rqet() const {
  return !_is_default_instance_ && rqet_ != NULL;
}
void RequestPrim::clear_rqet() {
  if (GetArenaNoVirtual() == NULL && rqet_ != NULL) delete rqet_;
  rqet_ = NULL;
}
 const ::google::protobuf::Timestamp& RequestPrim::rqet() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RequestPrim.rqet)
  return rqet_ != NULL ? *rqet_ : *default_instance_->rqet_;
}
 ::google::protobuf::Timestamp* RequestPrim::mutable_rqet() {
  
  if (rqet_ == NULL) {
    rqet_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.RequestPrim.rqet)
  return rqet_;
}
 ::google::protobuf::Timestamp* RequestPrim::release_rqet() {
  
  ::google::protobuf::Timestamp* temp = rqet_;
  rqet_ = NULL;
  return temp;
}
 void RequestPrim::set_allocated_rqet(::google::protobuf::Timestamp* rqet) {
  delete rqet_;
  rqet_ = rqet;
  if (rqet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.RequestPrim.rqet)
}

// optional .google.protobuf.Timestamp rset = 10;
bool RequestPrim::has_rset() const {
  return !_is_default_instance_ && rset_ != NULL;
}
void RequestPrim::clear_rset() {
  if (GetArenaNoVirtual() == NULL && rset_ != NULL) delete rset_;
  rset_ = NULL;
}
 const ::google::protobuf::Timestamp& RequestPrim::rset() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RequestPrim.rset)
  return rset_ != NULL ? *rset_ : *default_instance_->rset_;
}
 ::google::protobuf::Timestamp* RequestPrim::mutable_rset() {
  
  if (rset_ == NULL) {
    rset_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.RequestPrim.rset)
  return rset_;
}
 ::google::protobuf::Timestamp* RequestPrim::release_rset() {
  
  ::google::protobuf::Timestamp* temp = rset_;
  rset_ = NULL;
  return temp;
}
 void RequestPrim::set_allocated_rset(::google::protobuf::Timestamp* rset) {
  delete rset_;
  rset_ = rset;
  if (rset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.RequestPrim.rset)
}

// optional .google.protobuf.Duration oet = 11;
bool RequestPrim::has_oet() const {
  return !_is_default_instance_ && oet_ != NULL;
}
void RequestPrim::clear_oet() {
  if (GetArenaNoVirtual() == NULL && oet_ != NULL) delete oet_;
  oet_ = NULL;
}
 const ::google::protobuf::Duration& RequestPrim::oet() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RequestPrim.oet)
  return oet_ != NULL ? *oet_ : *default_instance_->oet_;
}
 ::google::protobuf::Duration* RequestPrim::mutable_oet() {
  
  if (oet_ == NULL) {
    oet_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.RequestPrim.oet)
  return oet_;
}
 ::google::protobuf::Duration* RequestPrim::release_oet() {
  
  ::google::protobuf::Duration* temp = oet_;
  oet_ = NULL;
  return temp;
}
 void RequestPrim::set_allocated_oet(::google::protobuf::Duration* oet) {
  delete oet_;
  oet_ = oet;
  if (oet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.RequestPrim.oet)
}

// optional .MicroWireless.OneM2M.pb.CommonTypes.ResponseType rt = 12;
void RequestPrim::clear_rt() {
  rt_ = 0;
}
 ::MicroWireless::OneM2M::pb::CommonTypes_ResponseType RequestPrim::rt() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RequestPrim.rt)
  return static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_ResponseType >(rt_);
}
 void RequestPrim::set_rt(::MicroWireless::OneM2M::pb::CommonTypes_ResponseType value) {
  
  rt_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RequestPrim.rt)
}

// optional .google.protobuf.Duration rp = 13;
bool RequestPrim::has_rp() const {
  return !_is_default_instance_ && rp_ != NULL;
}
void RequestPrim::clear_rp() {
  if (GetArenaNoVirtual() == NULL && rp_ != NULL) delete rp_;
  rp_ = NULL;
}
 const ::google::protobuf::Duration& RequestPrim::rp() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RequestPrim.rp)
  return rp_ != NULL ? *rp_ : *default_instance_->rp_;
}
 ::google::protobuf::Duration* RequestPrim::mutable_rp() {
  
  if (rp_ == NULL) {
    rp_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.RequestPrim.rp)
  return rp_;
}
 ::google::protobuf::Duration* RequestPrim::release_rp() {
  
  ::google::protobuf::Duration* temp = rp_;
  rp_ = NULL;
  return temp;
}
 void RequestPrim::set_allocated_rp(::google::protobuf::Duration* rp) {
  delete rp_;
  rp_ = rp;
  if (rp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.RequestPrim.rp)
}

// optional .MicroWireless.OneM2M.pb.CommonTypes.ResultContent rcn = 14;
void RequestPrim::clear_rcn() {
  rcn_ = 0;
}
 ::MicroWireless::OneM2M::pb::CommonTypes_ResultContent RequestPrim::rcn() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RequestPrim.rcn)
  return static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_ResultContent >(rcn_);
}
 void RequestPrim::set_rcn(::MicroWireless::OneM2M::pb::CommonTypes_ResultContent value) {
  
  rcn_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RequestPrim.rcn)
}

// optional .MicroWireless.OneM2M.pb.CommonTypes.EventCat ec = 15;
void RequestPrim::clear_ec() {
  ec_ = 0;
}
 ::MicroWireless::OneM2M::pb::CommonTypes_EventCat RequestPrim::ec() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RequestPrim.ec)
  return static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_EventCat >(ec_);
}
 void RequestPrim::set_ec(::MicroWireless::OneM2M::pb::CommonTypes_EventCat value) {
  
  ec_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RequestPrim.ec)
}

// optional bool da = 16;
void RequestPrim::clear_da() {
  da_ = false;
}
 bool RequestPrim::da() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RequestPrim.da)
  return da_;
}
 void RequestPrim::set_da(bool value) {
  
  da_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RequestPrim.da)
}

// optional string gid = 17;
void RequestPrim::clear_gid() {
  gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RequestPrim::gid() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RequestPrim.gid)
  return gid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestPrim::set_gid(const ::std::string& value) {
  
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RequestPrim.gid)
}
 void RequestPrim::set_gid(const char* value) {
  
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.RequestPrim.gid)
}
 void RequestPrim::set_gid(const char* value, size_t size) {
  
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.RequestPrim.gid)
}
 ::std::string* RequestPrim::mutable_gid() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.RequestPrim.gid)
  return gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestPrim::release_gid() {
  
  return gid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestPrim::set_allocated_gid(::std::string* gid) {
  if (gid != NULL) {
    
  } else {
    
  }
  gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gid);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.RequestPrim.gid)
}

// optional .MicroWireless.OneM2M.pb.FilterCriteria fc = 18;
bool RequestPrim::has_fc() const {
  return !_is_default_instance_ && fc_ != NULL;
}
void RequestPrim::clear_fc() {
  if (GetArenaNoVirtual() == NULL && fc_ != NULL) delete fc_;
  fc_ = NULL;
}
 const ::MicroWireless::OneM2M::pb::FilterCriteria& RequestPrim::fc() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RequestPrim.fc)
  return fc_ != NULL ? *fc_ : *default_instance_->fc_;
}
 ::MicroWireless::OneM2M::pb::FilterCriteria* RequestPrim::mutable_fc() {
  
  if (fc_ == NULL) {
    fc_ = new ::MicroWireless::OneM2M::pb::FilterCriteria;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.RequestPrim.fc)
  return fc_;
}
 ::MicroWireless::OneM2M::pb::FilterCriteria* RequestPrim::release_fc() {
  
  ::MicroWireless::OneM2M::pb::FilterCriteria* temp = fc_;
  fc_ = NULL;
  return temp;
}
 void RequestPrim::set_allocated_fc(::MicroWireless::OneM2M::pb::FilterCriteria* fc) {
  delete fc_;
  fc_ = fc;
  if (fc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.RequestPrim.fc)
}

// optional .MicroWireless.OneM2M.pb.CommonTypes.DiscoveryResultType drt = 19;
void RequestPrim::clear_drt() {
  drt_ = 0;
}
 ::MicroWireless::OneM2M::pb::CommonTypes_DiscoveryResultType RequestPrim::drt() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.RequestPrim.drt)
  return static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_DiscoveryResultType >(drt_);
}
 void RequestPrim::set_drt(::MicroWireless::OneM2M::pb::CommonTypes_DiscoveryResultType value) {
  
  drt_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.RequestPrim.drt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace OneM2M
}  // namespace MicroWireless

// @@protoc_insertion_point(global_scope)
