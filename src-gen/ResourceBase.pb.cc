// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ResourceBase.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ResourceBase.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MicroWireless {
namespace OneM2M {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* ResourceBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceBase_reflection_ = NULL;
struct ResourceBaseOneofInstance {
  const ::MicroWireless::OneM2M::pb::CSEBase* cse_;
}* ResourceBase_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_ResourceBase_2eproto() {
  protobuf_AddDesc_ResourceBase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ResourceBase.proto");
  GOOGLE_CHECK(file != NULL);
  ResourceBase_descriptor_ = file->message_type(0);
  static const int ResourceBase_offsets_[2] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ResourceBase_default_oneof_instance_, cse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceBase, resource_),
  };
  ResourceBase_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResourceBase_descriptor_,
      ResourceBase::default_instance_,
      ResourceBase_offsets_,
      -1,
      -1,
      -1,
      ResourceBase_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceBase, _oneof_case_[0]),
      sizeof(ResourceBase),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceBase, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceBase, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ResourceBase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResourceBase_descriptor_, &ResourceBase::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ResourceBase_2eproto() {
  delete ResourceBase::default_instance_;
  delete ResourceBase_default_oneof_instance_;
  delete ResourceBase_reflection_;
}

void protobuf_AddDesc_ResourceBase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MicroWireless::OneM2M::pb::protobuf_AddDesc_CSEBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ResourceBase.proto\022\027MicroWireless.OneM"
    "2M.pb\032\rCSEBase.proto\"K\n\014ResourceBase\022/\n\003"
    "cse\030\005 \001(\0132 .MicroWireless.OneM2M.pb.CSEB"
    "aseH\000B\n\n\010resourceb\006proto3", 145);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ResourceBase.proto", &protobuf_RegisterTypes);
  ResourceBase::default_instance_ = new ResourceBase();
  ResourceBase_default_oneof_instance_ = new ResourceBaseOneofInstance();
  ResourceBase::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ResourceBase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ResourceBase_2eproto {
  StaticDescriptorInitializer_ResourceBase_2eproto() {
    protobuf_AddDesc_ResourceBase_2eproto();
  }
} static_descriptor_initializer_ResourceBase_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int ResourceBase::kCseFieldNumber;
#endif  // !_MSC_VER

ResourceBase::ResourceBase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MicroWireless.OneM2M.pb.ResourceBase)
}

void ResourceBase::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ResourceBase_default_oneof_instance_->cse_ = const_cast< ::MicroWireless::OneM2M::pb::CSEBase*>(&::MicroWireless::OneM2M::pb::CSEBase::default_instance());
}

ResourceBase::ResourceBase(const ResourceBase& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MicroWireless.OneM2M.pb.ResourceBase)
}

void ResourceBase::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_resource();
}

ResourceBase::~ResourceBase() {
  // @@protoc_insertion_point(destructor:MicroWireless.OneM2M.pb.ResourceBase)
  SharedDtor();
}

void ResourceBase::SharedDtor() {
  if (has_resource()) {
    clear_resource();
  }
  if (this != default_instance_) {
  }
}

void ResourceBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceBase_descriptor_;
}

const ResourceBase& ResourceBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ResourceBase_2eproto();
  return *default_instance_;
}

ResourceBase* ResourceBase::default_instance_ = NULL;

ResourceBase* ResourceBase::New(::google::protobuf::Arena* arena) const {
  ResourceBase* n = new ResourceBase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResourceBase::clear_resource() {
  switch(resource_case()) {
    case kCse: {
      delete resource_.cse_;
      break;
    }
    case RESOURCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESOURCE_NOT_SET;
}


void ResourceBase::Clear() {
  clear_resource();
}

bool ResourceBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MicroWireless.OneM2M.pb.ResourceBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MicroWireless.OneM2M.pb.CSEBase cse = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MicroWireless.OneM2M.pb.ResourceBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MicroWireless.OneM2M.pb.ResourceBase)
  return false;
#undef DO_
}

void ResourceBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MicroWireless.OneM2M.pb.ResourceBase)
  // optional .MicroWireless.OneM2M.pb.CSEBase cse = 5;
  if (has_cse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *resource_.cse_, output);
  }

  // @@protoc_insertion_point(serialize_end:MicroWireless.OneM2M.pb.ResourceBase)
}

::google::protobuf::uint8* ResourceBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MicroWireless.OneM2M.pb.ResourceBase)
  // optional .MicroWireless.OneM2M.pb.CSEBase cse = 5;
  if (has_cse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *resource_.cse_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MicroWireless.OneM2M.pb.ResourceBase)
  return target;
}

int ResourceBase::ByteSize() const {
  int total_size = 0;

  switch (resource_case()) {
    // optional .MicroWireless.OneM2M.pb.CSEBase cse = 5;
    case kCse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resource_.cse_);
      break;
    }
    case RESOURCE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceBase::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ResourceBase* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResourceBase>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceBase::MergeFrom(const ResourceBase& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.resource_case()) {
    case kCse: {
      mutable_cse()->::MicroWireless::OneM2M::pb::CSEBase::MergeFrom(from.cse());
      break;
    }
    case RESOURCE_NOT_SET: {
      break;
    }
  }
}

void ResourceBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceBase::CopyFrom(const ResourceBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceBase::IsInitialized() const {

  return true;
}

void ResourceBase::Swap(ResourceBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResourceBase::InternalSwap(ResourceBase* other) {
  std::swap(resource_, other->resource_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResourceBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceBase_descriptor_;
  metadata.reflection = ResourceBase_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResourceBase

// optional .MicroWireless.OneM2M.pb.CSEBase cse = 5;
bool ResourceBase::has_cse() const {
  return resource_case() == kCse;
}
void ResourceBase::set_has_cse() {
  _oneof_case_[0] = kCse;
}
void ResourceBase::clear_cse() {
  if (has_cse()) {
    delete resource_.cse_;
    clear_has_resource();
  }
}
 const ::MicroWireless::OneM2M::pb::CSEBase& ResourceBase::cse() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.ResourceBase.cse)
  return has_cse() ? *resource_.cse_
                      : ::MicroWireless::OneM2M::pb::CSEBase::default_instance();
}
 ::MicroWireless::OneM2M::pb::CSEBase* ResourceBase::mutable_cse() {
  if (!has_cse()) {
    clear_resource();
    set_has_cse();
    resource_.cse_ = new ::MicroWireless::OneM2M::pb::CSEBase;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.ResourceBase.cse)
  return resource_.cse_;
}
 ::MicroWireless::OneM2M::pb::CSEBase* ResourceBase::release_cse() {
  if (has_cse()) {
    clear_has_resource();
    ::MicroWireless::OneM2M::pb::CSEBase* temp = resource_.cse_;
    resource_.cse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ResourceBase::set_allocated_cse(::MicroWireless::OneM2M::pb::CSEBase* cse) {
  clear_resource();
  if (cse) {
    set_has_cse();
    resource_.cse_ = cse;
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.ResourceBase.cse)
}

bool ResourceBase::has_resource() const {
  return resource_case() != RESOURCE_NOT_SET;
}
void ResourceBase::clear_has_resource() {
  _oneof_case_[0] = RESOURCE_NOT_SET;
}
ResourceBase::ResourceCase ResourceBase::resource_case() const {
  return ResourceBase::ResourceCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace OneM2M
}  // namespace MicroWireless

// @@protoc_insertion_point(global_scope)
