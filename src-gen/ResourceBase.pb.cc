// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ResourceBase.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ResourceBase.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MicroWireless {
namespace OneM2M {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* ResourceBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceBase_reflection_ = NULL;
struct ResourceBaseOneofInstance {
  const ::MicroWireless::OneM2M::pb::AE* ae_;
  const ::MicroWireless::OneM2M::pb::AE* aea_;
  const ::MicroWireless::OneM2M::pb::CSEBase* csb_;
  const ::MicroWireless::OneM2M::pb::Request* req_;
}* ResourceBase_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_ResourceBase_2eproto() {
  protobuf_AddDesc_ResourceBase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ResourceBase.proto");
  GOOGLE_CHECK(file != NULL);
  ResourceBase_descriptor_ = file->message_type(0);
  static const int ResourceBase_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceBase, ty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceBase, ri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceBase, rn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceBase, pi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceBase, ct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceBase, lt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceBase, et_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceBase, acpi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceBase, lbl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceBase, aa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceBase, at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceBase, st_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ResourceBase_default_oneof_instance_, ae_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ResourceBase_default_oneof_instance_, aea_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ResourceBase_default_oneof_instance_, csb_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ResourceBase_default_oneof_instance_, req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceBase, resource_),
  };
  ResourceBase_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResourceBase_descriptor_,
      ResourceBase::default_instance_,
      ResourceBase_offsets_,
      -1,
      -1,
      -1,
      ResourceBase_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceBase, _oneof_case_[0]),
      sizeof(ResourceBase),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceBase, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceBase, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ResourceBase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResourceBase_descriptor_, &ResourceBase::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ResourceBase_2eproto() {
  delete ResourceBase::default_instance_;
  delete ResourceBase_default_oneof_instance_;
  delete ResourceBase_reflection_;
}

void protobuf_AddDesc_ResourceBase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::MicroWireless::OneM2M::pb::protobuf_AddDesc_CommonTypes_2eproto();
  ::MicroWireless::OneM2M::pb::protobuf_AddDesc_CSEBase_2eproto();
  ::MicroWireless::OneM2M::pb::protobuf_AddDesc_AE_2eproto();
  ::MicroWireless::OneM2M::pb::protobuf_AddDesc_Request_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ResourceBase.proto\022\027MicroWireless.OneM"
    "2M.pb\032\037google/protobuf/timestamp.proto\032\021"
    "CommonTypes.proto\032\rCSEBase.proto\032\010AE.pro"
    "to\032\rRequest.proto\"\376\003\n\014ResourceBase\022F\n\002ty"
    "\030\001 \001(\0162:.MicroWireless.OneM2M.pb.CommonT"
    "ypes.SupportedResourceType\022\n\n\002ri\030\002 \001(\t\022\n"
    "\n\002rn\030\003 \001(\t\022\n\n\002pi\030\004 \001(\t\022&\n\002ct\030\005 \001(\0132\032.goo"
    "gle.protobuf.Timestamp\022&\n\002lt\030\006 \001(\0132\032.goo"
    "gle.protobuf.Timestamp\022&\n\002et\030\007 \001(\0132\032.goo"
    "gle.protobuf.Timestamp\022\014\n\004acpi\030\010 \003(\t\022\013\n\003"
    "lbl\030\t \003(\t\022\n\n\002aa\030\n \001(\t\022\n\n\002at\030\013 \001(\t\022\n\n\002st\030"
    "\014 \001(\005\022+\n\002ae\030\262\352\001 \001(\0132\033.MicroWireless.OneM"
    "2M.pb.AEH\000\022,\n\003aeA\030\302\270\002 \001(\0132\033.MicroWireles"
    "s.OneM2M.pb.AEH\000\0221\n\003csb\030\265\352\001 \001(\0132 .MicroW"
    "ireless.OneM2M.pb.CSEBaseH\000\0221\n\003req\030\301\352\001 \001"
    "(\0132 .MicroWireless.OneM2M.pb.RequestH\000B\n"
    "\n\010resourceb\006proto3", 658);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ResourceBase.proto", &protobuf_RegisterTypes);
  ResourceBase::default_instance_ = new ResourceBase();
  ResourceBase_default_oneof_instance_ = new ResourceBaseOneofInstance();
  ResourceBase::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ResourceBase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ResourceBase_2eproto {
  StaticDescriptorInitializer_ResourceBase_2eproto() {
    protobuf_AddDesc_ResourceBase_2eproto();
  }
} static_descriptor_initializer_ResourceBase_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int ResourceBase::kTyFieldNumber;
const int ResourceBase::kRiFieldNumber;
const int ResourceBase::kRnFieldNumber;
const int ResourceBase::kPiFieldNumber;
const int ResourceBase::kCtFieldNumber;
const int ResourceBase::kLtFieldNumber;
const int ResourceBase::kEtFieldNumber;
const int ResourceBase::kAcpiFieldNumber;
const int ResourceBase::kLblFieldNumber;
const int ResourceBase::kAaFieldNumber;
const int ResourceBase::kAtFieldNumber;
const int ResourceBase::kStFieldNumber;
const int ResourceBase::kAeFieldNumber;
const int ResourceBase::kAeAFieldNumber;
const int ResourceBase::kCsbFieldNumber;
const int ResourceBase::kReqFieldNumber;
#endif  // !_MSC_VER

ResourceBase::ResourceBase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MicroWireless.OneM2M.pb.ResourceBase)
}

void ResourceBase::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ct_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
  lt_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
  et_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
  ResourceBase_default_oneof_instance_->ae_ = const_cast< ::MicroWireless::OneM2M::pb::AE*>(&::MicroWireless::OneM2M::pb::AE::default_instance());
  ResourceBase_default_oneof_instance_->aea_ = const_cast< ::MicroWireless::OneM2M::pb::AE*>(&::MicroWireless::OneM2M::pb::AE::default_instance());
  ResourceBase_default_oneof_instance_->csb_ = const_cast< ::MicroWireless::OneM2M::pb::CSEBase*>(&::MicroWireless::OneM2M::pb::CSEBase::default_instance());
  ResourceBase_default_oneof_instance_->req_ = const_cast< ::MicroWireless::OneM2M::pb::Request*>(&::MicroWireless::OneM2M::pb::Request::default_instance());
}

ResourceBase::ResourceBase(const ResourceBase& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MicroWireless.OneM2M.pb.ResourceBase)
}

void ResourceBase::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ty_ = 0;
  ri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ct_ = NULL;
  lt_ = NULL;
  et_ = NULL;
  aa_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  at_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  st_ = 0;
  clear_has_resource();
}

ResourceBase::~ResourceBase() {
  // @@protoc_insertion_point(destructor:MicroWireless.OneM2M.pb.ResourceBase)
  SharedDtor();
}

void ResourceBase::SharedDtor() {
  ri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aa_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  at_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_resource()) {
    clear_resource();
  }
  if (this != default_instance_) {
    delete ct_;
    delete lt_;
    delete et_;
  }
}

void ResourceBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceBase_descriptor_;
}

const ResourceBase& ResourceBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ResourceBase_2eproto();
  return *default_instance_;
}

ResourceBase* ResourceBase::default_instance_ = NULL;

ResourceBase* ResourceBase::New(::google::protobuf::Arena* arena) const {
  ResourceBase* n = new ResourceBase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResourceBase::clear_resource() {
  switch(resource_case()) {
    case kAe: {
      delete resource_.ae_;
      break;
    }
    case kAeA: {
      delete resource_.aea_;
      break;
    }
    case kCsb: {
      delete resource_.csb_;
      break;
    }
    case kReq: {
      delete resource_.req_;
      break;
    }
    case RESOURCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESOURCE_NOT_SET;
}


void ResourceBase::Clear() {
  ty_ = 0;
  ri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && ct_ != NULL) delete ct_;
  ct_ = NULL;
  if (GetArenaNoVirtual() == NULL && lt_ != NULL) delete lt_;
  lt_ = NULL;
  if (GetArenaNoVirtual() == NULL && et_ != NULL) delete et_;
  et_ = NULL;
  aa_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  at_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  st_ = 0;
  acpi_.Clear();
  lbl_.Clear();
  clear_resource();
}

bool ResourceBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MicroWireless.OneM2M.pb.ResourceBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(320018);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MicroWireless.OneM2M.pb.CommonTypes.SupportedResourceType ty = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ty(static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_SupportedResourceType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ri;
        break;
      }

      // optional string ri = 2;
      case 2: {
        if (tag == 18) {
         parse_ri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ri().data(), this->ri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.ResourceBase.ri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rn;
        break;
      }

      // optional string rn = 3;
      case 3: {
        if (tag == 26) {
         parse_rn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rn().data(), this->rn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.ResourceBase.rn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pi;
        break;
      }

      // optional string pi = 4;
      case 4: {
        if (tag == 34) {
         parse_pi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pi().data(), this->pi().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.ResourceBase.pi");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ct;
        break;
      }

      // optional .google.protobuf.Timestamp ct = 5;
      case 5: {
        if (tag == 42) {
         parse_ct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_lt;
        break;
      }

      // optional .google.protobuf.Timestamp lt = 6;
      case 6: {
        if (tag == 50) {
         parse_lt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_et;
        break;
      }

      // optional .google.protobuf.Timestamp et = 7;
      case 7: {
        if (tag == 58) {
         parse_et:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_et()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_acpi;
        break;
      }

      // repeated string acpi = 8;
      case 8: {
        if (tag == 66) {
         parse_acpi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_acpi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->acpi(this->acpi_size() - 1).data(),
            this->acpi(this->acpi_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.ResourceBase.acpi");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_acpi;
        if (input->ExpectTag(74)) goto parse_lbl;
        break;
      }

      // repeated string lbl = 9;
      case 9: {
        if (tag == 74) {
         parse_lbl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_lbl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lbl(this->lbl_size() - 1).data(),
            this->lbl(this->lbl_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.ResourceBase.lbl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_lbl;
        if (input->ExpectTag(82)) goto parse_aa;
        break;
      }

      // optional string aa = 10;
      case 10: {
        if (tag == 82) {
         parse_aa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->aa().data(), this->aa().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.ResourceBase.aa");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_at;
        break;
      }

      // optional string at = 11;
      case 11: {
        if (tag == 90) {
         parse_at:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_at()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->at().data(), this->at().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MicroWireless.OneM2M.pb.ResourceBase.at");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_st;
        break;
      }

      // optional int32 st = 12;
      case 12: {
        if (tag == 96) {
         parse_st:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &st_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240018)) goto parse_ae;
        break;
      }

      // optional .MicroWireless.OneM2M.pb.AE ae = 30002;
      case 30002: {
        if (tag == 240018) {
         parse_ae:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ae()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240042)) goto parse_csb;
        break;
      }

      // optional .MicroWireless.OneM2M.pb.CSEBase csb = 30005;
      case 30005: {
        if (tag == 240042) {
         parse_csb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_csb()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240138)) goto parse_req;
        break;
      }

      // optional .MicroWireless.OneM2M.pb.Request req = 30017;
      case 30017: {
        if (tag == 240138) {
         parse_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320018)) goto parse_aeA;
        break;
      }

      // optional .MicroWireless.OneM2M.pb.AE aeA = 40002;
      case 40002: {
        if (tag == 320018) {
         parse_aeA:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aea()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MicroWireless.OneM2M.pb.ResourceBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MicroWireless.OneM2M.pb.ResourceBase)
  return false;
#undef DO_
}

void ResourceBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MicroWireless.OneM2M.pb.ResourceBase)
  // optional .MicroWireless.OneM2M.pb.CommonTypes.SupportedResourceType ty = 1;
  if (this->ty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ty(), output);
  }

  // optional string ri = 2;
  if (this->ri().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ri().data(), this->ri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.ResourceBase.ri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ri(), output);
  }

  // optional string rn = 3;
  if (this->rn().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rn().data(), this->rn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.ResourceBase.rn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rn(), output);
  }

  // optional string pi = 4;
  if (this->pi().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pi().data(), this->pi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.ResourceBase.pi");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pi(), output);
  }

  // optional .google.protobuf.Timestamp ct = 5;
  if (this->has_ct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->ct_, output);
  }

  // optional .google.protobuf.Timestamp lt = 6;
  if (this->has_lt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->lt_, output);
  }

  // optional .google.protobuf.Timestamp et = 7;
  if (this->has_et()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->et_, output);
  }

  // repeated string acpi = 8;
  for (int i = 0; i < this->acpi_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->acpi(i).data(), this->acpi(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "MicroWireless.OneM2M.pb.ResourceBase.acpi");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->acpi(i), output);
  }

  // repeated string lbl = 9;
  for (int i = 0; i < this->lbl_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->lbl(i).data(), this->lbl(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "MicroWireless.OneM2M.pb.ResourceBase.lbl");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->lbl(i), output);
  }

  // optional string aa = 10;
  if (this->aa().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aa().data(), this->aa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.ResourceBase.aa");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->aa(), output);
  }

  // optional string at = 11;
  if (this->at().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->at().data(), this->at().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.ResourceBase.at");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->at(), output);
  }

  // optional int32 st = 12;
  if (this->st() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->st(), output);
  }

  // optional .MicroWireless.OneM2M.pb.AE ae = 30002;
  if (has_ae()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30002, *resource_.ae_, output);
  }

  // optional .MicroWireless.OneM2M.pb.CSEBase csb = 30005;
  if (has_csb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30005, *resource_.csb_, output);
  }

  // optional .MicroWireless.OneM2M.pb.Request req = 30017;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30017, *resource_.req_, output);
  }

  // optional .MicroWireless.OneM2M.pb.AE aeA = 40002;
  if (has_aea()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40002, *resource_.aea_, output);
  }

  // @@protoc_insertion_point(serialize_end:MicroWireless.OneM2M.pb.ResourceBase)
}

::google::protobuf::uint8* ResourceBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MicroWireless.OneM2M.pb.ResourceBase)
  // optional .MicroWireless.OneM2M.pb.CommonTypes.SupportedResourceType ty = 1;
  if (this->ty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ty(), target);
  }

  // optional string ri = 2;
  if (this->ri().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ri().data(), this->ri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.ResourceBase.ri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ri(), target);
  }

  // optional string rn = 3;
  if (this->rn().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rn().data(), this->rn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.ResourceBase.rn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rn(), target);
  }

  // optional string pi = 4;
  if (this->pi().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pi().data(), this->pi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.ResourceBase.pi");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pi(), target);
  }

  // optional .google.protobuf.Timestamp ct = 5;
  if (this->has_ct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->ct_, target);
  }

  // optional .google.protobuf.Timestamp lt = 6;
  if (this->has_lt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->lt_, target);
  }

  // optional .google.protobuf.Timestamp et = 7;
  if (this->has_et()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->et_, target);
  }

  // repeated string acpi = 8;
  for (int i = 0; i < this->acpi_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acpi(i).data(), this->acpi(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.ResourceBase.acpi");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->acpi(i), target);
  }

  // repeated string lbl = 9;
  for (int i = 0; i < this->lbl_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lbl(i).data(), this->lbl(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.ResourceBase.lbl");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->lbl(i), target);
  }

  // optional string aa = 10;
  if (this->aa().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aa().data(), this->aa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.ResourceBase.aa");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->aa(), target);
  }

  // optional string at = 11;
  if (this->at().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->at().data(), this->at().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MicroWireless.OneM2M.pb.ResourceBase.at");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->at(), target);
  }

  // optional int32 st = 12;
  if (this->st() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->st(), target);
  }

  // optional .MicroWireless.OneM2M.pb.AE ae = 30002;
  if (has_ae()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30002, *resource_.ae_, target);
  }

  // optional .MicroWireless.OneM2M.pb.CSEBase csb = 30005;
  if (has_csb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30005, *resource_.csb_, target);
  }

  // optional .MicroWireless.OneM2M.pb.Request req = 30017;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30017, *resource_.req_, target);
  }

  // optional .MicroWireless.OneM2M.pb.AE aeA = 40002;
  if (has_aea()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40002, *resource_.aea_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MicroWireless.OneM2M.pb.ResourceBase)
  return target;
}

int ResourceBase::ByteSize() const {
  int total_size = 0;

  // optional .MicroWireless.OneM2M.pb.CommonTypes.SupportedResourceType ty = 1;
  if (this->ty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ty());
  }

  // optional string ri = 2;
  if (this->ri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ri());
  }

  // optional string rn = 3;
  if (this->rn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rn());
  }

  // optional string pi = 4;
  if (this->pi().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pi());
  }

  // optional .google.protobuf.Timestamp ct = 5;
  if (this->has_ct()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ct_);
  }

  // optional .google.protobuf.Timestamp lt = 6;
  if (this->has_lt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lt_);
  }

  // optional .google.protobuf.Timestamp et = 7;
  if (this->has_et()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->et_);
  }

  // optional string aa = 10;
  if (this->aa().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->aa());
  }

  // optional string at = 11;
  if (this->at().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->at());
  }

  // optional int32 st = 12;
  if (this->st() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->st());
  }

  // repeated string acpi = 8;
  total_size += 1 * this->acpi_size();
  for (int i = 0; i < this->acpi_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->acpi(i));
  }

  // repeated string lbl = 9;
  total_size += 1 * this->lbl_size();
  for (int i = 0; i < this->lbl_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->lbl(i));
  }

  switch (resource_case()) {
    // optional .MicroWireless.OneM2M.pb.AE ae = 30002;
    case kAe: {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resource_.ae_);
      break;
    }
    // optional .MicroWireless.OneM2M.pb.AE aeA = 40002;
    case kAeA: {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resource_.aea_);
      break;
    }
    // optional .MicroWireless.OneM2M.pb.CSEBase csb = 30005;
    case kCsb: {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resource_.csb_);
      break;
    }
    // optional .MicroWireless.OneM2M.pb.Request req = 30017;
    case kReq: {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *resource_.req_);
      break;
    }
    case RESOURCE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceBase::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ResourceBase* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResourceBase>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceBase::MergeFrom(const ResourceBase& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  acpi_.MergeFrom(from.acpi_);
  lbl_.MergeFrom(from.lbl_);
  switch (from.resource_case()) {
    case kAe: {
      mutable_ae()->::MicroWireless::OneM2M::pb::AE::MergeFrom(from.ae());
      break;
    }
    case kAeA: {
      mutable_aea()->::MicroWireless::OneM2M::pb::AE::MergeFrom(from.aea());
      break;
    }
    case kCsb: {
      mutable_csb()->::MicroWireless::OneM2M::pb::CSEBase::MergeFrom(from.csb());
      break;
    }
    case kReq: {
      mutable_req()->::MicroWireless::OneM2M::pb::Request::MergeFrom(from.req());
      break;
    }
    case RESOURCE_NOT_SET: {
      break;
    }
  }
  if (from.ty() != 0) {
    set_ty(from.ty());
  }
  if (from.ri().size() > 0) {

    ri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ri_);
  }
  if (from.rn().size() > 0) {

    rn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rn_);
  }
  if (from.pi().size() > 0) {

    pi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pi_);
  }
  if (from.has_ct()) {
    mutable_ct()->::google::protobuf::Timestamp::MergeFrom(from.ct());
  }
  if (from.has_lt()) {
    mutable_lt()->::google::protobuf::Timestamp::MergeFrom(from.lt());
  }
  if (from.has_et()) {
    mutable_et()->::google::protobuf::Timestamp::MergeFrom(from.et());
  }
  if (from.aa().size() > 0) {

    aa_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aa_);
  }
  if (from.at().size() > 0) {

    at_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.at_);
  }
  if (from.st() != 0) {
    set_st(from.st());
  }
}

void ResourceBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceBase::CopyFrom(const ResourceBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceBase::IsInitialized() const {

  return true;
}

void ResourceBase::Swap(ResourceBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResourceBase::InternalSwap(ResourceBase* other) {
  std::swap(ty_, other->ty_);
  ri_.Swap(&other->ri_);
  rn_.Swap(&other->rn_);
  pi_.Swap(&other->pi_);
  std::swap(ct_, other->ct_);
  std::swap(lt_, other->lt_);
  std::swap(et_, other->et_);
  acpi_.UnsafeArenaSwap(&other->acpi_);
  lbl_.UnsafeArenaSwap(&other->lbl_);
  aa_.Swap(&other->aa_);
  at_.Swap(&other->at_);
  std::swap(st_, other->st_);
  std::swap(resource_, other->resource_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResourceBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceBase_descriptor_;
  metadata.reflection = ResourceBase_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResourceBase

// optional .MicroWireless.OneM2M.pb.CommonTypes.SupportedResourceType ty = 1;
void ResourceBase::clear_ty() {
  ty_ = 0;
}
 ::MicroWireless::OneM2M::pb::CommonTypes_SupportedResourceType ResourceBase::ty() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.ResourceBase.ty)
  return static_cast< ::MicroWireless::OneM2M::pb::CommonTypes_SupportedResourceType >(ty_);
}
 void ResourceBase::set_ty(::MicroWireless::OneM2M::pb::CommonTypes_SupportedResourceType value) {
  
  ty_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.ResourceBase.ty)
}

// optional string ri = 2;
void ResourceBase::clear_ri() {
  ri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResourceBase::ri() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.ResourceBase.ri)
  return ri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResourceBase::set_ri(const ::std::string& value) {
  
  ri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.ResourceBase.ri)
}
 void ResourceBase::set_ri(const char* value) {
  
  ri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.ResourceBase.ri)
}
 void ResourceBase::set_ri(const char* value, size_t size) {
  
  ri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.ResourceBase.ri)
}
 ::std::string* ResourceBase::mutable_ri() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.ResourceBase.ri)
  return ri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResourceBase::release_ri() {
  
  return ri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResourceBase::set_allocated_ri(::std::string* ri) {
  if (ri != NULL) {
    
  } else {
    
  }
  ri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ri);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.ResourceBase.ri)
}

// optional string rn = 3;
void ResourceBase::clear_rn() {
  rn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResourceBase::rn() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.ResourceBase.rn)
  return rn_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResourceBase::set_rn(const ::std::string& value) {
  
  rn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.ResourceBase.rn)
}
 void ResourceBase::set_rn(const char* value) {
  
  rn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.ResourceBase.rn)
}
 void ResourceBase::set_rn(const char* value, size_t size) {
  
  rn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.ResourceBase.rn)
}
 ::std::string* ResourceBase::mutable_rn() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.ResourceBase.rn)
  return rn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResourceBase::release_rn() {
  
  return rn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResourceBase::set_allocated_rn(::std::string* rn) {
  if (rn != NULL) {
    
  } else {
    
  }
  rn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rn);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.ResourceBase.rn)
}

// optional string pi = 4;
void ResourceBase::clear_pi() {
  pi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResourceBase::pi() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.ResourceBase.pi)
  return pi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResourceBase::set_pi(const ::std::string& value) {
  
  pi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.ResourceBase.pi)
}
 void ResourceBase::set_pi(const char* value) {
  
  pi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.ResourceBase.pi)
}
 void ResourceBase::set_pi(const char* value, size_t size) {
  
  pi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.ResourceBase.pi)
}
 ::std::string* ResourceBase::mutable_pi() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.ResourceBase.pi)
  return pi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResourceBase::release_pi() {
  
  return pi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResourceBase::set_allocated_pi(::std::string* pi) {
  if (pi != NULL) {
    
  } else {
    
  }
  pi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pi);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.ResourceBase.pi)
}

// optional .google.protobuf.Timestamp ct = 5;
bool ResourceBase::has_ct() const {
  return !_is_default_instance_ && ct_ != NULL;
}
void ResourceBase::clear_ct() {
  if (GetArenaNoVirtual() == NULL && ct_ != NULL) delete ct_;
  ct_ = NULL;
}
 const ::google::protobuf::Timestamp& ResourceBase::ct() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.ResourceBase.ct)
  return ct_ != NULL ? *ct_ : *default_instance_->ct_;
}
 ::google::protobuf::Timestamp* ResourceBase::mutable_ct() {
  
  if (ct_ == NULL) {
    ct_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.ResourceBase.ct)
  return ct_;
}
 ::google::protobuf::Timestamp* ResourceBase::release_ct() {
  
  ::google::protobuf::Timestamp* temp = ct_;
  ct_ = NULL;
  return temp;
}
 void ResourceBase::set_allocated_ct(::google::protobuf::Timestamp* ct) {
  delete ct_;
  ct_ = ct;
  if (ct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.ResourceBase.ct)
}

// optional .google.protobuf.Timestamp lt = 6;
bool ResourceBase::has_lt() const {
  return !_is_default_instance_ && lt_ != NULL;
}
void ResourceBase::clear_lt() {
  if (GetArenaNoVirtual() == NULL && lt_ != NULL) delete lt_;
  lt_ = NULL;
}
 const ::google::protobuf::Timestamp& ResourceBase::lt() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.ResourceBase.lt)
  return lt_ != NULL ? *lt_ : *default_instance_->lt_;
}
 ::google::protobuf::Timestamp* ResourceBase::mutable_lt() {
  
  if (lt_ == NULL) {
    lt_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.ResourceBase.lt)
  return lt_;
}
 ::google::protobuf::Timestamp* ResourceBase::release_lt() {
  
  ::google::protobuf::Timestamp* temp = lt_;
  lt_ = NULL;
  return temp;
}
 void ResourceBase::set_allocated_lt(::google::protobuf::Timestamp* lt) {
  delete lt_;
  lt_ = lt;
  if (lt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.ResourceBase.lt)
}

// optional .google.protobuf.Timestamp et = 7;
bool ResourceBase::has_et() const {
  return !_is_default_instance_ && et_ != NULL;
}
void ResourceBase::clear_et() {
  if (GetArenaNoVirtual() == NULL && et_ != NULL) delete et_;
  et_ = NULL;
}
 const ::google::protobuf::Timestamp& ResourceBase::et() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.ResourceBase.et)
  return et_ != NULL ? *et_ : *default_instance_->et_;
}
 ::google::protobuf::Timestamp* ResourceBase::mutable_et() {
  
  if (et_ == NULL) {
    et_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.ResourceBase.et)
  return et_;
}
 ::google::protobuf::Timestamp* ResourceBase::release_et() {
  
  ::google::protobuf::Timestamp* temp = et_;
  et_ = NULL;
  return temp;
}
 void ResourceBase::set_allocated_et(::google::protobuf::Timestamp* et) {
  delete et_;
  et_ = et;
  if (et) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.ResourceBase.et)
}

// repeated string acpi = 8;
int ResourceBase::acpi_size() const {
  return acpi_.size();
}
void ResourceBase::clear_acpi() {
  acpi_.Clear();
}
 const ::std::string& ResourceBase::acpi(int index) const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.ResourceBase.acpi)
  return acpi_.Get(index);
}
 ::std::string* ResourceBase::mutable_acpi(int index) {
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.ResourceBase.acpi)
  return acpi_.Mutable(index);
}
 void ResourceBase::set_acpi(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.ResourceBase.acpi)
  acpi_.Mutable(index)->assign(value);
}
 void ResourceBase::set_acpi(int index, const char* value) {
  acpi_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.ResourceBase.acpi)
}
 void ResourceBase::set_acpi(int index, const char* value, size_t size) {
  acpi_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.ResourceBase.acpi)
}
 ::std::string* ResourceBase::add_acpi() {
  return acpi_.Add();
}
 void ResourceBase::add_acpi(const ::std::string& value) {
  acpi_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MicroWireless.OneM2M.pb.ResourceBase.acpi)
}
 void ResourceBase::add_acpi(const char* value) {
  acpi_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MicroWireless.OneM2M.pb.ResourceBase.acpi)
}
 void ResourceBase::add_acpi(const char* value, size_t size) {
  acpi_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MicroWireless.OneM2M.pb.ResourceBase.acpi)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResourceBase::acpi() const {
  // @@protoc_insertion_point(field_list:MicroWireless.OneM2M.pb.ResourceBase.acpi)
  return acpi_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ResourceBase::mutable_acpi() {
  // @@protoc_insertion_point(field_mutable_list:MicroWireless.OneM2M.pb.ResourceBase.acpi)
  return &acpi_;
}

// repeated string lbl = 9;
int ResourceBase::lbl_size() const {
  return lbl_.size();
}
void ResourceBase::clear_lbl() {
  lbl_.Clear();
}
 const ::std::string& ResourceBase::lbl(int index) const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.ResourceBase.lbl)
  return lbl_.Get(index);
}
 ::std::string* ResourceBase::mutable_lbl(int index) {
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.ResourceBase.lbl)
  return lbl_.Mutable(index);
}
 void ResourceBase::set_lbl(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.ResourceBase.lbl)
  lbl_.Mutable(index)->assign(value);
}
 void ResourceBase::set_lbl(int index, const char* value) {
  lbl_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.ResourceBase.lbl)
}
 void ResourceBase::set_lbl(int index, const char* value, size_t size) {
  lbl_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.ResourceBase.lbl)
}
 ::std::string* ResourceBase::add_lbl() {
  return lbl_.Add();
}
 void ResourceBase::add_lbl(const ::std::string& value) {
  lbl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MicroWireless.OneM2M.pb.ResourceBase.lbl)
}
 void ResourceBase::add_lbl(const char* value) {
  lbl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MicroWireless.OneM2M.pb.ResourceBase.lbl)
}
 void ResourceBase::add_lbl(const char* value, size_t size) {
  lbl_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MicroWireless.OneM2M.pb.ResourceBase.lbl)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResourceBase::lbl() const {
  // @@protoc_insertion_point(field_list:MicroWireless.OneM2M.pb.ResourceBase.lbl)
  return lbl_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ResourceBase::mutable_lbl() {
  // @@protoc_insertion_point(field_mutable_list:MicroWireless.OneM2M.pb.ResourceBase.lbl)
  return &lbl_;
}

// optional string aa = 10;
void ResourceBase::clear_aa() {
  aa_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResourceBase::aa() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.ResourceBase.aa)
  return aa_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResourceBase::set_aa(const ::std::string& value) {
  
  aa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.ResourceBase.aa)
}
 void ResourceBase::set_aa(const char* value) {
  
  aa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.ResourceBase.aa)
}
 void ResourceBase::set_aa(const char* value, size_t size) {
  
  aa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.ResourceBase.aa)
}
 ::std::string* ResourceBase::mutable_aa() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.ResourceBase.aa)
  return aa_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResourceBase::release_aa() {
  
  return aa_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResourceBase::set_allocated_aa(::std::string* aa) {
  if (aa != NULL) {
    
  } else {
    
  }
  aa_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aa);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.ResourceBase.aa)
}

// optional string at = 11;
void ResourceBase::clear_at() {
  at_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResourceBase::at() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.ResourceBase.at)
  return at_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResourceBase::set_at(const ::std::string& value) {
  
  at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.ResourceBase.at)
}
 void ResourceBase::set_at(const char* value) {
  
  at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MicroWireless.OneM2M.pb.ResourceBase.at)
}
 void ResourceBase::set_at(const char* value, size_t size) {
  
  at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MicroWireless.OneM2M.pb.ResourceBase.at)
}
 ::std::string* ResourceBase::mutable_at() {
  
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.ResourceBase.at)
  return at_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResourceBase::release_at() {
  
  return at_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResourceBase::set_allocated_at(::std::string* at) {
  if (at != NULL) {
    
  } else {
    
  }
  at_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), at);
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.ResourceBase.at)
}

// optional int32 st = 12;
void ResourceBase::clear_st() {
  st_ = 0;
}
 ::google::protobuf::int32 ResourceBase::st() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.ResourceBase.st)
  return st_;
}
 void ResourceBase::set_st(::google::protobuf::int32 value) {
  
  st_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.ResourceBase.st)
}

// optional .MicroWireless.OneM2M.pb.AE ae = 30002;
bool ResourceBase::has_ae() const {
  return resource_case() == kAe;
}
void ResourceBase::set_has_ae() {
  _oneof_case_[0] = kAe;
}
void ResourceBase::clear_ae() {
  if (has_ae()) {
    delete resource_.ae_;
    clear_has_resource();
  }
}
 const ::MicroWireless::OneM2M::pb::AE& ResourceBase::ae() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.ResourceBase.ae)
  return has_ae() ? *resource_.ae_
                      : ::MicroWireless::OneM2M::pb::AE::default_instance();
}
 ::MicroWireless::OneM2M::pb::AE* ResourceBase::mutable_ae() {
  if (!has_ae()) {
    clear_resource();
    set_has_ae();
    resource_.ae_ = new ::MicroWireless::OneM2M::pb::AE;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.ResourceBase.ae)
  return resource_.ae_;
}
 ::MicroWireless::OneM2M::pb::AE* ResourceBase::release_ae() {
  if (has_ae()) {
    clear_has_resource();
    ::MicroWireless::OneM2M::pb::AE* temp = resource_.ae_;
    resource_.ae_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ResourceBase::set_allocated_ae(::MicroWireless::OneM2M::pb::AE* ae) {
  clear_resource();
  if (ae) {
    set_has_ae();
    resource_.ae_ = ae;
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.ResourceBase.ae)
}

// optional .MicroWireless.OneM2M.pb.AE aeA = 40002;
bool ResourceBase::has_aea() const {
  return resource_case() == kAeA;
}
void ResourceBase::set_has_aea() {
  _oneof_case_[0] = kAeA;
}
void ResourceBase::clear_aea() {
  if (has_aea()) {
    delete resource_.aea_;
    clear_has_resource();
  }
}
 const ::MicroWireless::OneM2M::pb::AE& ResourceBase::aea() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.ResourceBase.aeA)
  return has_aea() ? *resource_.aea_
                      : ::MicroWireless::OneM2M::pb::AE::default_instance();
}
 ::MicroWireless::OneM2M::pb::AE* ResourceBase::mutable_aea() {
  if (!has_aea()) {
    clear_resource();
    set_has_aea();
    resource_.aea_ = new ::MicroWireless::OneM2M::pb::AE;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.ResourceBase.aeA)
  return resource_.aea_;
}
 ::MicroWireless::OneM2M::pb::AE* ResourceBase::release_aea() {
  if (has_aea()) {
    clear_has_resource();
    ::MicroWireless::OneM2M::pb::AE* temp = resource_.aea_;
    resource_.aea_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ResourceBase::set_allocated_aea(::MicroWireless::OneM2M::pb::AE* aea) {
  clear_resource();
  if (aea) {
    set_has_aea();
    resource_.aea_ = aea;
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.ResourceBase.aeA)
}

// optional .MicroWireless.OneM2M.pb.CSEBase csb = 30005;
bool ResourceBase::has_csb() const {
  return resource_case() == kCsb;
}
void ResourceBase::set_has_csb() {
  _oneof_case_[0] = kCsb;
}
void ResourceBase::clear_csb() {
  if (has_csb()) {
    delete resource_.csb_;
    clear_has_resource();
  }
}
 const ::MicroWireless::OneM2M::pb::CSEBase& ResourceBase::csb() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.ResourceBase.csb)
  return has_csb() ? *resource_.csb_
                      : ::MicroWireless::OneM2M::pb::CSEBase::default_instance();
}
 ::MicroWireless::OneM2M::pb::CSEBase* ResourceBase::mutable_csb() {
  if (!has_csb()) {
    clear_resource();
    set_has_csb();
    resource_.csb_ = new ::MicroWireless::OneM2M::pb::CSEBase;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.ResourceBase.csb)
  return resource_.csb_;
}
 ::MicroWireless::OneM2M::pb::CSEBase* ResourceBase::release_csb() {
  if (has_csb()) {
    clear_has_resource();
    ::MicroWireless::OneM2M::pb::CSEBase* temp = resource_.csb_;
    resource_.csb_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ResourceBase::set_allocated_csb(::MicroWireless::OneM2M::pb::CSEBase* csb) {
  clear_resource();
  if (csb) {
    set_has_csb();
    resource_.csb_ = csb;
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.ResourceBase.csb)
}

// optional .MicroWireless.OneM2M.pb.Request req = 30017;
bool ResourceBase::has_req() const {
  return resource_case() == kReq;
}
void ResourceBase::set_has_req() {
  _oneof_case_[0] = kReq;
}
void ResourceBase::clear_req() {
  if (has_req()) {
    delete resource_.req_;
    clear_has_resource();
  }
}
 const ::MicroWireless::OneM2M::pb::Request& ResourceBase::req() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.ResourceBase.req)
  return has_req() ? *resource_.req_
                      : ::MicroWireless::OneM2M::pb::Request::default_instance();
}
 ::MicroWireless::OneM2M::pb::Request* ResourceBase::mutable_req() {
  if (!has_req()) {
    clear_resource();
    set_has_req();
    resource_.req_ = new ::MicroWireless::OneM2M::pb::Request;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.ResourceBase.req)
  return resource_.req_;
}
 ::MicroWireless::OneM2M::pb::Request* ResourceBase::release_req() {
  if (has_req()) {
    clear_has_resource();
    ::MicroWireless::OneM2M::pb::Request* temp = resource_.req_;
    resource_.req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ResourceBase::set_allocated_req(::MicroWireless::OneM2M::pb::Request* req) {
  clear_resource();
  if (req) {
    set_has_req();
    resource_.req_ = req;
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.ResourceBase.req)
}

bool ResourceBase::has_resource() const {
  return resource_case() != RESOURCE_NOT_SET;
}
void ResourceBase::clear_has_resource() {
  _oneof_case_[0] = RESOURCE_NOT_SET;
}
ResourceBase::ResourceCase ResourceBase::resource_case() const {
  return ResourceBase::ResourceCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace OneM2M
}  // namespace MicroWireless

// @@protoc_insertion_point(global_scope)
