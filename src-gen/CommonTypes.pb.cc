// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonTypes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CommonTypes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MicroWireless {
namespace OneM2M {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* CommonTypes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonTypes_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CommonTypes_ResourceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommonTypes_CSEType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommonTypes_SupportedResourceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommonTypes_LocationSource_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommonTypes_EventCat_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommonTypes_ContentType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommonTypes_FilterUsage_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommonTypes_DiscoveryResultType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommonTypes_Operation_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommonTypes_ResponseType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommonTypes_ResultContent_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommonTypes_RequestStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommonTypes_ConsistencyStrategy_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommonTypes_CmdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommonTypes_ExecModeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommonTypes_ExecStatusType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommonTypes_ExecResultType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommonTypes_ResponseStatusCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Attribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attribute_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CommonTypes_2eproto() {
  protobuf_AddDesc_CommonTypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CommonTypes.proto");
  GOOGLE_CHECK(file != NULL);
  CommonTypes_descriptor_ = file->message_type(0);
  static const int CommonTypes_offsets_[1] = {
  };
  CommonTypes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommonTypes_descriptor_,
      CommonTypes::default_instance_,
      CommonTypes_offsets_,
      -1,
      -1,
      -1,
      sizeof(CommonTypes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTypes, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTypes, _is_default_instance_));
  CommonTypes_ResourceType_descriptor_ = CommonTypes_descriptor_->enum_type(0);
  CommonTypes_CSEType_descriptor_ = CommonTypes_descriptor_->enum_type(1);
  CommonTypes_SupportedResourceType_descriptor_ = CommonTypes_descriptor_->enum_type(2);
  CommonTypes_LocationSource_descriptor_ = CommonTypes_descriptor_->enum_type(3);
  CommonTypes_EventCat_descriptor_ = CommonTypes_descriptor_->enum_type(4);
  CommonTypes_ContentType_descriptor_ = CommonTypes_descriptor_->enum_type(5);
  CommonTypes_FilterUsage_descriptor_ = CommonTypes_descriptor_->enum_type(6);
  CommonTypes_DiscoveryResultType_descriptor_ = CommonTypes_descriptor_->enum_type(7);
  CommonTypes_Operation_descriptor_ = CommonTypes_descriptor_->enum_type(8);
  CommonTypes_ResponseType_descriptor_ = CommonTypes_descriptor_->enum_type(9);
  CommonTypes_ResultContent_descriptor_ = CommonTypes_descriptor_->enum_type(10);
  CommonTypes_RequestStatus_descriptor_ = CommonTypes_descriptor_->enum_type(11);
  CommonTypes_ConsistencyStrategy_descriptor_ = CommonTypes_descriptor_->enum_type(12);
  CommonTypes_CmdType_descriptor_ = CommonTypes_descriptor_->enum_type(13);
  CommonTypes_ExecModeType_descriptor_ = CommonTypes_descriptor_->enum_type(14);
  CommonTypes_ExecStatusType_descriptor_ = CommonTypes_descriptor_->enum_type(15);
  CommonTypes_ExecResultType_descriptor_ = CommonTypes_descriptor_->enum_type(16);
  CommonTypes_ResponseStatusCode_descriptor_ = CommonTypes_descriptor_->enum_type(17);
  Attribute_descriptor_ = file->message_type(1);
  static const int Attribute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, atr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, vl_),
  };
  Attribute_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Attribute_descriptor_,
      Attribute::default_instance_,
      Attribute_offsets_,
      -1,
      -1,
      -1,
      sizeof(Attribute),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CommonTypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommonTypes_descriptor_, &CommonTypes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Attribute_descriptor_, &Attribute::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CommonTypes_2eproto() {
  delete CommonTypes::default_instance_;
  delete CommonTypes_reflection_;
  delete Attribute::default_instance_;
  delete Attribute_reflection_;
}

void protobuf_AddDesc_CommonTypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021CommonTypes.proto\022\027MicroWireless.OneM2"
    "M.pb\032\031google/protobuf/any.proto\"\357\036\n\013Comm"
    "onTypes\"N\n\014ResourceType\022\026\n\022RESOURCE_TYPE"
    "_NONE\020\000\022\n\n\006NORMAL\020\001\022\013\n\007VIRTUAL\020\002\022\r\n\tANNO"
    "UNCED\020\003\"A\n\007CSEType\022\021\n\rCSE_TYPE_NONE\020\000\022\n\n"
    "\006IN_CSE\020\001\022\n\n\006MN_CSE\020\002\022\013\n\007ASN_CSE\020\003\"\200\006\n\025S"
    "upportedResourceType\022 \n\034SUPPORTED_RESOUR"
    "CE_TYPE_NONE\020\000\022\031\n\025ACCESS_CONTROL_POLICY\020"
    "\001\022\006\n\002AE\020\002\022\r\n\tCONTAINER\020\003\022\024\n\020CONTENT_INST"
    "ANCE\020\004\022\014\n\010CSE_BASE\020\005\022\014\n\010DELIVERY\020\006\022\020\n\014EV"
    "ENT_CONFIG\020\007\022\021\n\rEXEC_INSTANCE\020\010\022\t\n\005GROUP"
    "\020\t\022\023\n\017LOCATION_POLICY\020\n\022\014\n\010MGMT_CMD\020\013\022\014\n"
    "\010MGMT_OBJ\020\014\022\027\n\023SERVICE_SUB_PROFILE\020\r\022\010\n\004"
    "NODE\020\016\022\023\n\017POLLING_CHANNEL\020\017\022\016\n\nREMOTE_CS"
    "E\020\020\022\013\n\007REQUEST\020\021\022\014\n\010SCHEDULE\020\022\022\024\n\020SERVIC"
    "E_SUB_NODE\020\023\022\021\n\rSTATS_COLLECT\020\024\022\020\n\014STATS"
    "_CONFIG\020\025\022\020\n\014SUBSCRIPTION\020\026\022\030\n\024SERVICE_S"
    "UB_APP_RULE\020\027\022\020\n\014MEMBER_MIXED\020\030\022\037\n\032ACCES"
    "S_CONTROL_POLICY_ANNC\020\221N\022\014\n\007AE_ANNC\020\222N\022\023"
    "\n\016CONTAINER_ANNC\020\223N\022\032\n\025CONTENT_INSTANCE_"
    "ANNC\020\224N\022\017\n\nGROUP_ANNC\020\231N\022\031\n\024LOCATION_POL"
    "ICY_ANNC\020\232N\022\022\n\rMGMT_OBJ_ANNC\020\234N\022\016\n\tNODE_"
    "ANNC\020\236N\022\024\n\017REMOTE_CSE_ANNC\020\240N\022\022\n\rSCHEDUL"
    "E_ANNC\020\242N\022\014\n\006LATEST\020\241\234\001\022\014\n\006OLDEST\020\242\234\001\022\023\n"
    "\rFAN_OUT_POINT\020\243\234\001\022\031\n\023POLLING_CHANNEL_UR"
    "I\020\244\234\001\"b\n\016LocationSource\022\030\n\024LOCATION_SOUR"
    "CE_NONE\020\000\022\021\n\rNETWORK_BASED\020\001\022\020\n\014DEVICE_B"
    "ASED\020\002\022\021\n\rSHARING_BASED\020\003\"\224\001\n\010EventCat\022\023"
    "\n\017EVENT_CATS_NONE\020\000\022\032\n\026STD_EVENT_CATS_DE"
    "FAULT\020\001\022\034\n\030STD_EVENT_CATS_IMMEDIATE\020\002\022\036\n"
    "\032STD_EVENT_CATS_BEST_EFFORT\020\003\022\031\n\025STD_EVE"
    "NT_CATS_LATEST\020\004\"O\n\013ContentType\022\025\n\021CONTE"
    "NT_TYPE_NONE\020\000\022\023\n\017APPLICATION_XML\020\001\022\024\n\020A"
    "PPLICATION_JSON\020\002\"]\n\013FilterUsage\022\025\n\021FILT"
    "ER_USAGE_NONE\020\000\022\026\n\022DISCOVERY_CRITERIA\020\001\022"
    "\037\n\033EVENT_NOTIFICATION_CRITERIA\020\002\"\225\001\n\023Dis"
    "coveryResultType\022\026\n\022DISC_RES_TYPE_NONE\020\000"
    "\022\036\n\032DISC_RES_TYPE_HIERARCHICAL\020\001\022\"\n\036DISC"
    "_RES_TYPE_NON_HIERARCHICAL\020\002\022\"\n\036DISC_RES"
    "_TYPE_CSEID_RESOURCEID\020\003\"\217\001\n\tOperation\022\022"
    "\n\016OPERATION_NONE\020\000\022\024\n\020OPERATION_CREATE\020\001"
    "\022\026\n\022OPERATION_RETRIEVE\020\002\022\024\n\020OPERATION_UP"
    "DATE\020\003\022\024\n\020OPERATION_DELETE\020\004\022\024\n\020OPERATIO"
    "N_NOTIFY\020\005\"{\n\014ResponseType\022\026\n\022RESPONSE_T"
    "YPE_NONE\020\000\022\035\n\031NON_BLOCKING_REQUEST_SYNC\020"
    "\001\022\036\n\032NON_BLOCKING_REQUEST_ASYNC\020\002\022\024\n\020BLO"
    "CKING_REQUEST\020\003\"\374\001\n\rResultContent\022\032\n\026RES"
    "ULT_CONTENT_NOTHING\020\000\022\035\n\031RESULT_CONTENT_"
    "ATTRIBUTES\020\001\022\030\n\024RESULT_CONTENT_HADDR\020\002\022\035"
    "\n\031RESULT_CONTENT_HADDR_ATTR\020\003\022\035\n\031RESULT_"
    "CONTENT_ATTR_CHILD\020\004\022!\n\035RESULT_CONTENT_A"
    "TTR_CHILD_REF\020\005\022\030\n\024RESULT_CONTENT_CHILD\020"
    "\006\022\033\n\027RESULT_CONTENT_ORIGINAL\020\007\"\233\001\n\rReque"
    "stStatus\022\027\n\023REQUEST_STATUS_NONE\020\000\022\034\n\030REQ"
    "UEST_STATUS_COMPLETED\020\001\022\031\n\025REQUEST_STATU"
    "S_FAILED\020\002\022\032\n\026REQUEST_STATUS_PENDING\020\003\022\034"
    "\n\030REQUEST_STATUS_FORWARDED\020\004\"j\n\023Consiste"
    "ncyStrategy\022\035\n\031CONSISTENCY_STRATEGY_NONE"
    "\020\000\022\022\n\016ABONDON_MEMBER\020\001\022\021\n\rABONDON_GROUP\020"
    "\002\022\r\n\tSET_MIXED\020\003\"\275\001\n\007CmdType\022\021\n\rCMD_TYPE"
    "_NONE\020\000\022\022\n\016CMD_TYPE_RESET\020\001\022\023\n\017CMD_TYPE_"
    "REBOOT\020\002\022\023\n\017CMD_TYPE_UPLOAD\020\003\022\025\n\021CMD_TYP"
    "E_DOWNLOAD\020\004\022\027\n\023CMD_TYPE_SW_INSTALL\020\005\022\031\n"
    "\025CMD_TYPE_SW_UNINSTALL\020\006\022\026\n\022CMD_TYPE_SW_"
    "UPDATE\020\007\"u\n\014ExecModeType\022\027\n\023EXEC_MODE_TY"
    "PE_NONE\020\000\022\022\n\016IMMEDIATE_ONCE\020\001\022\024\n\020IMMEDIA"
    "TE_REPEAT\020\002\022\017\n\013RANDOM_ONCE\020\003\022\021\n\rRANDOM_R"
    "EPEAT\020\004\"\317\001\n\016ExecStatusType\022\031\n\025EXEC_STATU"
    "S_TYPE_NONE\020\000\022\031\n\025EXEC_STATUS_INITIATED\020\001"
    "\022\027\n\023EXEC_STATUS_PENDING\020\002\022\030\n\024EXEC_STATUS"
    "_FINISHED\020\003\022\032\n\026EXEC_STATUS_CANCELLING\020\004\022"
    "\031\n\025EXEC_STATUS_CANCELLED\020\005\022\035\n\031EXEC_STATU"
    "S_UNCANCELLABLE\020\006\"+\n\016ExecResultType\022\031\n\025E"
    "XEC_RESULT_TYPE_NONE\020\000\"\270\010\n\022ResponseStatu"
    "sCode\022\014\n\010RSC_NONE\020\000\022\021\n\014RSC_ACCEPTED\020\350\007\022\013"
    "\n\006RSC_OK\020\320\017\022\020\n\013RSC_CREATED\020\321\017\022\020\n\013RSC_DEL"
    "ETED\020\322\017\022\020\n\013RSC_CHANGED\020\323\017\022\024\n\017RSC_BAD_REQ"
    "UEST\020\240\037\022\022\n\rRSC_NOT_FOUND\020\244\037\022\036\n\031RSC_OPERA"
    "TION_NOT_ALLOWED\020\245\037\022\030\n\023RSC_REQUEST_TIMEO"
    "UT\020\250\037\022%\n RSC_SUB_CREATOR_HAS_NO_PRIVILEG"
    "E\020\205 \022\034\n\027RSC_CONTENTS_UNACCEPTED\020\206 \022\026\n\021RS"
    "C_ACCESS_DENIED\020\207 \022 \n\033RSC_GROUP_REQUEST_"
    "ID_EXISTS\020\210 \022\021\n\014RSC_CONFLICT\020\211 \022\036\n\031RSC_I"
    "NTERNAL_SERVER_ERROR\020\210\'\022\030\n\023RSC_NOT_IMPLE"
    "MENTED\020\211\'\022\035\n\030RSC_TARGET_NOT_REACHABLE\020\357\'"
    "\022\025\n\020RSC_NO_PREVILEGE\020\361\'\022\027\n\022RSC_ALREADY_E"
    "XISTS\020\362\'\022\036\n\031RSC_TAGET_NOT_SUBSCIBABLE\020\323("
    "\022%\n RSC_SUB_VERIFICATION_INIT_FAILED\020\324(\022"
    "\"\n\035RSC_SUB_HOST_HAS_NO_PRIVILEGE\020\325(\022+\n&R"
    "SC_NON_BLOCKING_REQUEST_NOT_SUPPORTED\020\326("
    "\022\036\n\031RSC_EXT_OBJ_NOT_REACHABLE\020\363.\022\032\n\025RSC_"
    "EXT_OBJ_NOT_FOUND\020\365.\022\034\n\027RSC_MAX_MEMBER_E"
    "XCEEDED\020\372.\022!\n\034RSC_MEMBER_TYPE_INCONSISTE"
    "NT\020\373.\022&\n!RSC_MGMT_SESSION_CANNOT_ESTABLI"
    "SH\020\204/\022+\n&RSC_MGMT_SESSION_ESTABLISHMENT_"
    "TIMEOUT\020\205/\022\030\n\023RSC_INVALID_CMDTYPE\020\206/\022\032\n\025"
    "RSC_INVALID_ARGUMENTS\020\207/\022\037\n\032RSC_INSUFFIC"
    "IENT_ARGUMENTS\020\210/\022\036\n\031RSC_MGMT_CONVERSION"
    "_ERROR\020\211/\022!\n\034RSC_MGMT_CANCELATION_FAILUR"
    "E\020\212/\022\031\n\024RSC_ALREADY_COMPLETE\020\214/\022 \n\033RSC_C"
    "OMMAND_NOT_CANCALLABLE\020\215/\":\n\tAttribute\022\013"
    "\n\003atr\030\001 \001(\r\022 \n\002vl\030\002 \001(\0132\024.google.protobu"
    "f.Anyb\006proto3", 4093);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CommonTypes.proto", &protobuf_RegisterTypes);
  CommonTypes::default_instance_ = new CommonTypes();
  Attribute::default_instance_ = new Attribute();
  CommonTypes::default_instance_->InitAsDefaultInstance();
  Attribute::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CommonTypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CommonTypes_2eproto {
  StaticDescriptorInitializer_CommonTypes_2eproto() {
    protobuf_AddDesc_CommonTypes_2eproto();
  }
} static_descriptor_initializer_CommonTypes_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* CommonTypes_ResourceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonTypes_ResourceType_descriptor_;
}
bool CommonTypes_ResourceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommonTypes_ResourceType CommonTypes::RESOURCE_TYPE_NONE;
const CommonTypes_ResourceType CommonTypes::NORMAL;
const CommonTypes_ResourceType CommonTypes::VIRTUAL;
const CommonTypes_ResourceType CommonTypes::ANNOUNCED;
const CommonTypes_ResourceType CommonTypes::ResourceType_MIN;
const CommonTypes_ResourceType CommonTypes::ResourceType_MAX;
const int CommonTypes::ResourceType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CommonTypes_CSEType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonTypes_CSEType_descriptor_;
}
bool CommonTypes_CSEType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommonTypes_CSEType CommonTypes::CSE_TYPE_NONE;
const CommonTypes_CSEType CommonTypes::IN_CSE;
const CommonTypes_CSEType CommonTypes::MN_CSE;
const CommonTypes_CSEType CommonTypes::ASN_CSE;
const CommonTypes_CSEType CommonTypes::CSEType_MIN;
const CommonTypes_CSEType CommonTypes::CSEType_MAX;
const int CommonTypes::CSEType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CommonTypes_SupportedResourceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonTypes_SupportedResourceType_descriptor_;
}
bool CommonTypes_SupportedResourceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10009:
    case 10010:
    case 10012:
    case 10014:
    case 10016:
    case 10018:
    case 20001:
    case 20002:
    case 20003:
    case 20004:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommonTypes_SupportedResourceType CommonTypes::SUPPORTED_RESOURCE_TYPE_NONE;
const CommonTypes_SupportedResourceType CommonTypes::ACCESS_CONTROL_POLICY;
const CommonTypes_SupportedResourceType CommonTypes::AE;
const CommonTypes_SupportedResourceType CommonTypes::CONTAINER;
const CommonTypes_SupportedResourceType CommonTypes::CONTENT_INSTANCE;
const CommonTypes_SupportedResourceType CommonTypes::CSE_BASE;
const CommonTypes_SupportedResourceType CommonTypes::DELIVERY;
const CommonTypes_SupportedResourceType CommonTypes::EVENT_CONFIG;
const CommonTypes_SupportedResourceType CommonTypes::EXEC_INSTANCE;
const CommonTypes_SupportedResourceType CommonTypes::GROUP;
const CommonTypes_SupportedResourceType CommonTypes::LOCATION_POLICY;
const CommonTypes_SupportedResourceType CommonTypes::MGMT_CMD;
const CommonTypes_SupportedResourceType CommonTypes::MGMT_OBJ;
const CommonTypes_SupportedResourceType CommonTypes::SERVICE_SUB_PROFILE;
const CommonTypes_SupportedResourceType CommonTypes::NODE;
const CommonTypes_SupportedResourceType CommonTypes::POLLING_CHANNEL;
const CommonTypes_SupportedResourceType CommonTypes::REMOTE_CSE;
const CommonTypes_SupportedResourceType CommonTypes::REQUEST;
const CommonTypes_SupportedResourceType CommonTypes::SCHEDULE;
const CommonTypes_SupportedResourceType CommonTypes::SERVICE_SUB_NODE;
const CommonTypes_SupportedResourceType CommonTypes::STATS_COLLECT;
const CommonTypes_SupportedResourceType CommonTypes::STATS_CONFIG;
const CommonTypes_SupportedResourceType CommonTypes::SUBSCRIPTION;
const CommonTypes_SupportedResourceType CommonTypes::SERVICE_SUB_APP_RULE;
const CommonTypes_SupportedResourceType CommonTypes::MEMBER_MIXED;
const CommonTypes_SupportedResourceType CommonTypes::ACCESS_CONTROL_POLICY_ANNC;
const CommonTypes_SupportedResourceType CommonTypes::AE_ANNC;
const CommonTypes_SupportedResourceType CommonTypes::CONTAINER_ANNC;
const CommonTypes_SupportedResourceType CommonTypes::CONTENT_INSTANCE_ANNC;
const CommonTypes_SupportedResourceType CommonTypes::GROUP_ANNC;
const CommonTypes_SupportedResourceType CommonTypes::LOCATION_POLICY_ANNC;
const CommonTypes_SupportedResourceType CommonTypes::MGMT_OBJ_ANNC;
const CommonTypes_SupportedResourceType CommonTypes::NODE_ANNC;
const CommonTypes_SupportedResourceType CommonTypes::REMOTE_CSE_ANNC;
const CommonTypes_SupportedResourceType CommonTypes::SCHEDULE_ANNC;
const CommonTypes_SupportedResourceType CommonTypes::LATEST;
const CommonTypes_SupportedResourceType CommonTypes::OLDEST;
const CommonTypes_SupportedResourceType CommonTypes::FAN_OUT_POINT;
const CommonTypes_SupportedResourceType CommonTypes::POLLING_CHANNEL_URI;
const CommonTypes_SupportedResourceType CommonTypes::SupportedResourceType_MIN;
const CommonTypes_SupportedResourceType CommonTypes::SupportedResourceType_MAX;
const int CommonTypes::SupportedResourceType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CommonTypes_LocationSource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonTypes_LocationSource_descriptor_;
}
bool CommonTypes_LocationSource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommonTypes_LocationSource CommonTypes::LOCATION_SOURCE_NONE;
const CommonTypes_LocationSource CommonTypes::NETWORK_BASED;
const CommonTypes_LocationSource CommonTypes::DEVICE_BASED;
const CommonTypes_LocationSource CommonTypes::SHARING_BASED;
const CommonTypes_LocationSource CommonTypes::LocationSource_MIN;
const CommonTypes_LocationSource CommonTypes::LocationSource_MAX;
const int CommonTypes::LocationSource_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CommonTypes_EventCat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonTypes_EventCat_descriptor_;
}
bool CommonTypes_EventCat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommonTypes_EventCat CommonTypes::EVENT_CATS_NONE;
const CommonTypes_EventCat CommonTypes::STD_EVENT_CATS_DEFAULT;
const CommonTypes_EventCat CommonTypes::STD_EVENT_CATS_IMMEDIATE;
const CommonTypes_EventCat CommonTypes::STD_EVENT_CATS_BEST_EFFORT;
const CommonTypes_EventCat CommonTypes::STD_EVENT_CATS_LATEST;
const CommonTypes_EventCat CommonTypes::EventCat_MIN;
const CommonTypes_EventCat CommonTypes::EventCat_MAX;
const int CommonTypes::EventCat_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CommonTypes_ContentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonTypes_ContentType_descriptor_;
}
bool CommonTypes_ContentType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommonTypes_ContentType CommonTypes::CONTENT_TYPE_NONE;
const CommonTypes_ContentType CommonTypes::APPLICATION_XML;
const CommonTypes_ContentType CommonTypes::APPLICATION_JSON;
const CommonTypes_ContentType CommonTypes::ContentType_MIN;
const CommonTypes_ContentType CommonTypes::ContentType_MAX;
const int CommonTypes::ContentType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CommonTypes_FilterUsage_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonTypes_FilterUsage_descriptor_;
}
bool CommonTypes_FilterUsage_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommonTypes_FilterUsage CommonTypes::FILTER_USAGE_NONE;
const CommonTypes_FilterUsage CommonTypes::DISCOVERY_CRITERIA;
const CommonTypes_FilterUsage CommonTypes::EVENT_NOTIFICATION_CRITERIA;
const CommonTypes_FilterUsage CommonTypes::FilterUsage_MIN;
const CommonTypes_FilterUsage CommonTypes::FilterUsage_MAX;
const int CommonTypes::FilterUsage_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CommonTypes_DiscoveryResultType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonTypes_DiscoveryResultType_descriptor_;
}
bool CommonTypes_DiscoveryResultType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommonTypes_DiscoveryResultType CommonTypes::DISC_RES_TYPE_NONE;
const CommonTypes_DiscoveryResultType CommonTypes::DISC_RES_TYPE_HIERARCHICAL;
const CommonTypes_DiscoveryResultType CommonTypes::DISC_RES_TYPE_NON_HIERARCHICAL;
const CommonTypes_DiscoveryResultType CommonTypes::DISC_RES_TYPE_CSEID_RESOURCEID;
const CommonTypes_DiscoveryResultType CommonTypes::DiscoveryResultType_MIN;
const CommonTypes_DiscoveryResultType CommonTypes::DiscoveryResultType_MAX;
const int CommonTypes::DiscoveryResultType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CommonTypes_Operation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonTypes_Operation_descriptor_;
}
bool CommonTypes_Operation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommonTypes_Operation CommonTypes::OPERATION_NONE;
const CommonTypes_Operation CommonTypes::OPERATION_CREATE;
const CommonTypes_Operation CommonTypes::OPERATION_RETRIEVE;
const CommonTypes_Operation CommonTypes::OPERATION_UPDATE;
const CommonTypes_Operation CommonTypes::OPERATION_DELETE;
const CommonTypes_Operation CommonTypes::OPERATION_NOTIFY;
const CommonTypes_Operation CommonTypes::Operation_MIN;
const CommonTypes_Operation CommonTypes::Operation_MAX;
const int CommonTypes::Operation_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CommonTypes_ResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonTypes_ResponseType_descriptor_;
}
bool CommonTypes_ResponseType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommonTypes_ResponseType CommonTypes::RESPONSE_TYPE_NONE;
const CommonTypes_ResponseType CommonTypes::NON_BLOCKING_REQUEST_SYNC;
const CommonTypes_ResponseType CommonTypes::NON_BLOCKING_REQUEST_ASYNC;
const CommonTypes_ResponseType CommonTypes::BLOCKING_REQUEST;
const CommonTypes_ResponseType CommonTypes::ResponseType_MIN;
const CommonTypes_ResponseType CommonTypes::ResponseType_MAX;
const int CommonTypes::ResponseType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CommonTypes_ResultContent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonTypes_ResultContent_descriptor_;
}
bool CommonTypes_ResultContent_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommonTypes_ResultContent CommonTypes::RESULT_CONTENT_NOTHING;
const CommonTypes_ResultContent CommonTypes::RESULT_CONTENT_ATTRIBUTES;
const CommonTypes_ResultContent CommonTypes::RESULT_CONTENT_HADDR;
const CommonTypes_ResultContent CommonTypes::RESULT_CONTENT_HADDR_ATTR;
const CommonTypes_ResultContent CommonTypes::RESULT_CONTENT_ATTR_CHILD;
const CommonTypes_ResultContent CommonTypes::RESULT_CONTENT_ATTR_CHILD_REF;
const CommonTypes_ResultContent CommonTypes::RESULT_CONTENT_CHILD;
const CommonTypes_ResultContent CommonTypes::RESULT_CONTENT_ORIGINAL;
const CommonTypes_ResultContent CommonTypes::ResultContent_MIN;
const CommonTypes_ResultContent CommonTypes::ResultContent_MAX;
const int CommonTypes::ResultContent_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CommonTypes_RequestStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonTypes_RequestStatus_descriptor_;
}
bool CommonTypes_RequestStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommonTypes_RequestStatus CommonTypes::REQUEST_STATUS_NONE;
const CommonTypes_RequestStatus CommonTypes::REQUEST_STATUS_COMPLETED;
const CommonTypes_RequestStatus CommonTypes::REQUEST_STATUS_FAILED;
const CommonTypes_RequestStatus CommonTypes::REQUEST_STATUS_PENDING;
const CommonTypes_RequestStatus CommonTypes::REQUEST_STATUS_FORWARDED;
const CommonTypes_RequestStatus CommonTypes::RequestStatus_MIN;
const CommonTypes_RequestStatus CommonTypes::RequestStatus_MAX;
const int CommonTypes::RequestStatus_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CommonTypes_ConsistencyStrategy_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonTypes_ConsistencyStrategy_descriptor_;
}
bool CommonTypes_ConsistencyStrategy_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommonTypes_ConsistencyStrategy CommonTypes::CONSISTENCY_STRATEGY_NONE;
const CommonTypes_ConsistencyStrategy CommonTypes::ABONDON_MEMBER;
const CommonTypes_ConsistencyStrategy CommonTypes::ABONDON_GROUP;
const CommonTypes_ConsistencyStrategy CommonTypes::SET_MIXED;
const CommonTypes_ConsistencyStrategy CommonTypes::ConsistencyStrategy_MIN;
const CommonTypes_ConsistencyStrategy CommonTypes::ConsistencyStrategy_MAX;
const int CommonTypes::ConsistencyStrategy_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CommonTypes_CmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonTypes_CmdType_descriptor_;
}
bool CommonTypes_CmdType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommonTypes_CmdType CommonTypes::CMD_TYPE_NONE;
const CommonTypes_CmdType CommonTypes::CMD_TYPE_RESET;
const CommonTypes_CmdType CommonTypes::CMD_TYPE_REBOOT;
const CommonTypes_CmdType CommonTypes::CMD_TYPE_UPLOAD;
const CommonTypes_CmdType CommonTypes::CMD_TYPE_DOWNLOAD;
const CommonTypes_CmdType CommonTypes::CMD_TYPE_SW_INSTALL;
const CommonTypes_CmdType CommonTypes::CMD_TYPE_SW_UNINSTALL;
const CommonTypes_CmdType CommonTypes::CMD_TYPE_SW_UPDATE;
const CommonTypes_CmdType CommonTypes::CmdType_MIN;
const CommonTypes_CmdType CommonTypes::CmdType_MAX;
const int CommonTypes::CmdType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CommonTypes_ExecModeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonTypes_ExecModeType_descriptor_;
}
bool CommonTypes_ExecModeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommonTypes_ExecModeType CommonTypes::EXEC_MODE_TYPE_NONE;
const CommonTypes_ExecModeType CommonTypes::IMMEDIATE_ONCE;
const CommonTypes_ExecModeType CommonTypes::IMMEDIATE_REPEAT;
const CommonTypes_ExecModeType CommonTypes::RANDOM_ONCE;
const CommonTypes_ExecModeType CommonTypes::RANDOM_REPEAT;
const CommonTypes_ExecModeType CommonTypes::ExecModeType_MIN;
const CommonTypes_ExecModeType CommonTypes::ExecModeType_MAX;
const int CommonTypes::ExecModeType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CommonTypes_ExecStatusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonTypes_ExecStatusType_descriptor_;
}
bool CommonTypes_ExecStatusType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommonTypes_ExecStatusType CommonTypes::EXEC_STATUS_TYPE_NONE;
const CommonTypes_ExecStatusType CommonTypes::EXEC_STATUS_INITIATED;
const CommonTypes_ExecStatusType CommonTypes::EXEC_STATUS_PENDING;
const CommonTypes_ExecStatusType CommonTypes::EXEC_STATUS_FINISHED;
const CommonTypes_ExecStatusType CommonTypes::EXEC_STATUS_CANCELLING;
const CommonTypes_ExecStatusType CommonTypes::EXEC_STATUS_CANCELLED;
const CommonTypes_ExecStatusType CommonTypes::EXEC_STATUS_UNCANCELLABLE;
const CommonTypes_ExecStatusType CommonTypes::ExecStatusType_MIN;
const CommonTypes_ExecStatusType CommonTypes::ExecStatusType_MAX;
const int CommonTypes::ExecStatusType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CommonTypes_ExecResultType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonTypes_ExecResultType_descriptor_;
}
bool CommonTypes_ExecResultType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommonTypes_ExecResultType CommonTypes::EXEC_RESULT_TYPE_NONE;
const CommonTypes_ExecResultType CommonTypes::ExecResultType_MIN;
const CommonTypes_ExecResultType CommonTypes::ExecResultType_MAX;
const int CommonTypes::ExecResultType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CommonTypes_ResponseStatusCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonTypes_ResponseStatusCode_descriptor_;
}
bool CommonTypes_ResponseStatusCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1000:
    case 2000:
    case 2001:
    case 2002:
    case 2003:
    case 4000:
    case 4004:
    case 4005:
    case 4008:
    case 4101:
    case 4102:
    case 4103:
    case 4104:
    case 4105:
    case 5000:
    case 5001:
    case 5103:
    case 5105:
    case 5106:
    case 5203:
    case 5204:
    case 5205:
    case 5206:
    case 6003:
    case 6005:
    case 6010:
    case 6011:
    case 6020:
    case 6021:
    case 6022:
    case 6023:
    case 6024:
    case 6025:
    case 6026:
    case 6028:
    case 6029:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommonTypes_ResponseStatusCode CommonTypes::RSC_NONE;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_ACCEPTED;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_OK;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_CREATED;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_DELETED;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_CHANGED;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_BAD_REQUEST;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_NOT_FOUND;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_OPERATION_NOT_ALLOWED;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_REQUEST_TIMEOUT;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_SUB_CREATOR_HAS_NO_PRIVILEGE;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_CONTENTS_UNACCEPTED;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_ACCESS_DENIED;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_GROUP_REQUEST_ID_EXISTS;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_CONFLICT;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_INTERNAL_SERVER_ERROR;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_NOT_IMPLEMENTED;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_TARGET_NOT_REACHABLE;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_NO_PREVILEGE;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_ALREADY_EXISTS;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_TAGET_NOT_SUBSCIBABLE;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_SUB_VERIFICATION_INIT_FAILED;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_SUB_HOST_HAS_NO_PRIVILEGE;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_NON_BLOCKING_REQUEST_NOT_SUPPORTED;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_EXT_OBJ_NOT_REACHABLE;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_EXT_OBJ_NOT_FOUND;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_MAX_MEMBER_EXCEEDED;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_MEMBER_TYPE_INCONSISTENT;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_MGMT_SESSION_CANNOT_ESTABLISH;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_MGMT_SESSION_ESTABLISHMENT_TIMEOUT;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_INVALID_CMDTYPE;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_INVALID_ARGUMENTS;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_INSUFFICIENT_ARGUMENTS;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_MGMT_CONVERSION_ERROR;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_MGMT_CANCELATION_FAILURE;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_ALREADY_COMPLETE;
const CommonTypes_ResponseStatusCode CommonTypes::RSC_COMMAND_NOT_CANCALLABLE;
const CommonTypes_ResponseStatusCode CommonTypes::ResponseStatusCode_MIN;
const CommonTypes_ResponseStatusCode CommonTypes::ResponseStatusCode_MAX;
const int CommonTypes::ResponseStatusCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

CommonTypes::CommonTypes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MicroWireless.OneM2M.pb.CommonTypes)
}

void CommonTypes::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CommonTypes::CommonTypes(const CommonTypes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MicroWireless.OneM2M.pb.CommonTypes)
}

void CommonTypes::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CommonTypes::~CommonTypes() {
  // @@protoc_insertion_point(destructor:MicroWireless.OneM2M.pb.CommonTypes)
  SharedDtor();
}

void CommonTypes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommonTypes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonTypes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonTypes_descriptor_;
}

const CommonTypes& CommonTypes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonTypes_2eproto();
  return *default_instance_;
}

CommonTypes* CommonTypes::default_instance_ = NULL;

CommonTypes* CommonTypes::New(::google::protobuf::Arena* arena) const {
  CommonTypes* n = new CommonTypes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommonTypes::Clear() {
}

bool CommonTypes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MicroWireless.OneM2M.pb.CommonTypes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:MicroWireless.OneM2M.pb.CommonTypes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MicroWireless.OneM2M.pb.CommonTypes)
  return false;
#undef DO_
}

void CommonTypes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MicroWireless.OneM2M.pb.CommonTypes)
  // @@protoc_insertion_point(serialize_end:MicroWireless.OneM2M.pb.CommonTypes)
}

::google::protobuf::uint8* CommonTypes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MicroWireless.OneM2M.pb.CommonTypes)
  // @@protoc_insertion_point(serialize_to_array_end:MicroWireless.OneM2M.pb.CommonTypes)
  return target;
}

int CommonTypes::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonTypes::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CommonTypes* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonTypes>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonTypes::MergeFrom(const CommonTypes& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void CommonTypes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonTypes::CopyFrom(const CommonTypes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonTypes::IsInitialized() const {

  return true;
}

void CommonTypes::Swap(CommonTypes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonTypes::InternalSwap(CommonTypes* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommonTypes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonTypes_descriptor_;
  metadata.reflection = CommonTypes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommonTypes

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Attribute::kAtrFieldNumber;
const int Attribute::kVlFieldNumber;
#endif  // !_MSC_VER

Attribute::Attribute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MicroWireless.OneM2M.pb.Attribute)
}

void Attribute::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  vl_ = const_cast< ::google::protobuf::Any*>(&::google::protobuf::Any::default_instance());
}

Attribute::Attribute(const Attribute& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MicroWireless.OneM2M.pb.Attribute)
}

void Attribute::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  atr_ = 0u;
  vl_ = NULL;
}

Attribute::~Attribute() {
  // @@protoc_insertion_point(destructor:MicroWireless.OneM2M.pb.Attribute)
  SharedDtor();
}

void Attribute::SharedDtor() {
  if (this != default_instance_) {
    delete vl_;
  }
}

void Attribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attribute_descriptor_;
}

const Attribute& Attribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonTypes_2eproto();
  return *default_instance_;
}

Attribute* Attribute::default_instance_ = NULL;

Attribute* Attribute::New(::google::protobuf::Arena* arena) const {
  Attribute* n = new Attribute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Attribute::Clear() {
  atr_ = 0u;
  if (GetArenaNoVirtual() == NULL && vl_ != NULL) delete vl_;
  vl_ = NULL;
}

bool Attribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MicroWireless.OneM2M.pb.Attribute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 atr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atr_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vl;
        break;
      }

      // optional .google.protobuf.Any vl = 2;
      case 2: {
        if (tag == 18) {
         parse_vl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MicroWireless.OneM2M.pb.Attribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MicroWireless.OneM2M.pb.Attribute)
  return false;
#undef DO_
}

void Attribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MicroWireless.OneM2M.pb.Attribute)
  // optional uint32 atr = 1;
  if (this->atr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->atr(), output);
  }

  // optional .google.protobuf.Any vl = 2;
  if (this->has_vl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->vl_, output);
  }

  // @@protoc_insertion_point(serialize_end:MicroWireless.OneM2M.pb.Attribute)
}

::google::protobuf::uint8* Attribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MicroWireless.OneM2M.pb.Attribute)
  // optional uint32 atr = 1;
  if (this->atr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->atr(), target);
  }

  // optional .google.protobuf.Any vl = 2;
  if (this->has_vl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->vl_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MicroWireless.OneM2M.pb.Attribute)
  return target;
}

int Attribute::ByteSize() const {
  int total_size = 0;

  // optional uint32 atr = 1;
  if (this->atr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->atr());
  }

  // optional .google.protobuf.Any vl = 2;
  if (this->has_vl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vl_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attribute::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Attribute* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Attribute>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attribute::MergeFrom(const Attribute& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.atr() != 0) {
    set_atr(from.atr());
  }
  if (from.has_vl()) {
    mutable_vl()->::google::protobuf::Any::MergeFrom(from.vl());
  }
}

void Attribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attribute::CopyFrom(const Attribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attribute::IsInitialized() const {

  return true;
}

void Attribute::Swap(Attribute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Attribute::InternalSwap(Attribute* other) {
  std::swap(atr_, other->atr_);
  std::swap(vl_, other->vl_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Attribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attribute_descriptor_;
  metadata.reflection = Attribute_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Attribute

// optional uint32 atr = 1;
void Attribute::clear_atr() {
  atr_ = 0u;
}
 ::google::protobuf::uint32 Attribute::atr() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.Attribute.atr)
  return atr_;
}
 void Attribute::set_atr(::google::protobuf::uint32 value) {
  
  atr_ = value;
  // @@protoc_insertion_point(field_set:MicroWireless.OneM2M.pb.Attribute.atr)
}

// optional .google.protobuf.Any vl = 2;
bool Attribute::has_vl() const {
  return !_is_default_instance_ && vl_ != NULL;
}
void Attribute::clear_vl() {
  if (GetArenaNoVirtual() == NULL && vl_ != NULL) delete vl_;
  vl_ = NULL;
}
 const ::google::protobuf::Any& Attribute::vl() const {
  // @@protoc_insertion_point(field_get:MicroWireless.OneM2M.pb.Attribute.vl)
  return vl_ != NULL ? *vl_ : *default_instance_->vl_;
}
 ::google::protobuf::Any* Attribute::mutable_vl() {
  
  if (vl_ == NULL) {
    vl_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:MicroWireless.OneM2M.pb.Attribute.vl)
  return vl_;
}
 ::google::protobuf::Any* Attribute::release_vl() {
  
  ::google::protobuf::Any* temp = vl_;
  vl_ = NULL;
  return temp;
}
 void Attribute::set_allocated_vl(::google::protobuf::Any* vl) {
  delete vl_;
  vl_ = vl;
  if (vl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MicroWireless.OneM2M.pb.Attribute.vl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace OneM2M
}  // namespace MicroWireless

// @@protoc_insertion_point(global_scope)
